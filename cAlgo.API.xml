<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>cAlgo.API</name>
  </assembly>
  <members>
    <member name="T:cAlgo.API.AccessRights">
      <summary>
        cBots and Indicators Access Rights.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This is how you can use the AccessRights property of an Indicator or Robot attribute
          // The default value is None, which means your indicator/cBot will not access anything outside
          // like files, network, windows registry, etc
          // If you try to access any of aforementioned resources you will see an access right error on
          // cTrader automate logs tab if your indicator/cBot access rights were not enough.
          // The FullAccess gives you access to everything, it's like executing a .NET standalone app
          // on a Windows machine.
          // The AccessRights allows cTrader to notify the user of your indicator/cBot that it will
          // access which resources on his system, so he can decide to allow it or not
          [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.FullAccess)]
          public class AccessRightSample : Indicator
          {
          protected override void Initialize()
          {
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Application" />
      <signature>
        <code>public enum AccessRights</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.AccessRights.None">
      <summary>
        Algorithm doesn’t require any access rights.
      </summary>
      <signature>
        <code>public static AccessRights None;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.AccessRights.FileSystem">
      <summary>
        Access to file system.
      </summary>
    </member>
    <member name="F:cAlgo.API.AccessRights.Internet">
      <summary>
        Access to Internet or other networks.
      </summary>
    </member>
    <member name="F:cAlgo.API.AccessRights.Registry">
      <summary>
        Access to windows registry.
      </summary>
    </member>
    <member name="F:cAlgo.API.AccessRights.FullAccess">
      <summary>
        The unlimited access rights.
      </summary>
      <signature>
        <code>public static AccessRights FullAccess;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.AlgoInstanceParameter">
      <summary>
        The interface representing an indicator / robot instance parameter.
        Provides properties that allow for accessing various information about an algo instance parameter.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.AlgoRegistry" />
      <signature>
        <code>public interface AlgoInstanceParameter</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AlgoInstanceParameter.Name">
      <summary>
        Gets the name of a parameter.
      </summary>
      <signature>
        <code>public string Name { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AlgoInstanceParameter.DisplayName">
      <summary>
        Gets the display name of a parameter (shown in the 'Parameters' section of an instance).
      </summary>
      <signature>
        <code>public string DisplayName { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AlgoInstanceParameter.Value">
      <summary>
        Gets the value of a parameter.
      </summary>
      <signature>
        <code>public object Value { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AlgoInstanceParameter.Type">
      <summary>
        Gets the <c>ALgoParameterType</c> of a parameter.
      </summary>
      <signature>
        <code>public AlgoParameterType Type { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.AlgoInstanceParameters">
      <summary>
        Represents the collection of all the parameters of an indicator or Robot.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.AlgoRegistry" />
      <signature>
        <code>public interface AlgoInstanceParameters</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AlgoInstanceParameters.Item(System.Int32)">
      <summary>
        Gets a parameter by it's index.
      </summary>
      <param name="index">Parameter Index</param>
      <remarks>It will return null if index is out of range.</remarks>
      <signature>
        <code>public AlgoInstanceParameter this[int index] { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AlgoInstanceParameters.Item(System.String)">
      <summary>
        Gets a parameter by it's name.
      </summary>
      <param name="name">Parameter Name</param>
      <remarks>It will return null if parameter not found.</remarks>
      <signature>
        <code>public AlgoInstanceParameter this[string name] { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AlgoInstanceParameters.Count">
      <summary>
        Gets the number of parameters.
      </summary>
      <signature>
        <code>public int Count { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.AlgoKind">
      <summary>
        Represents the predefined kinds of algorithm types.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.AlgoRegistry" />
      <signature>
        <code>public enum AlgoKind</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.AlgoKind.CustomIndicator">
      <summary>
        Custom indicator
      </summary>
      <signature>
        <code>public static AlgoKind CustomIndicator;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.AlgoKind.StandardIndicator">
      <summary>
        Standard / built-in indicator
      </summary>
      <signature>
        <code>public static AlgoKind StandardIndicator;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.AlgoKind.Robot">
      <summary>
        Robot / cBot
      </summary>
      <signature>
        <code>public static AlgoKind Robot;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.AlgoKind.Plugin">
      <summary>
        Plugin
      </summary>
      <signature>
        <code>public static AlgoKind Plugin;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.AlgoParameter">
      <summary>
        Represents an algorithm parameter.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.AlgoRegistry" />
      <signature>
        <code>public interface AlgoParameter</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AlgoParameter.Name">
      <summary>
        Gets Parameter name.
      </summary>
      <signature>
        <code>public string Name { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AlgoParameter.Type">
      <summary>
        Gets parameter type.
      </summary>
      <signature>
        <code>public AlgoParameterType Type { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AlgoParameter.DefaultValue">
      <summary>
        Gets default value of the parameter.
      </summary>
      <signature>
        <code>public object DefaultValue { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.AlgoParameterType">
      <summary>
        Represents the different types of algorithm parameters.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.AlgoRegistry" />
      <signature>
        <code>public enum AlgoParameterType</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.AlgoParameterType.Integer">
      <summary>
        Represents a parameter of type <c>int</c>.
      </summary>
      <signature>
        <code>public static AlgoParameterType Integer;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.AlgoParameterType.Double">
      <summary>
        Represents a parameter of type <c>double</c>.
      </summary>
      <signature>
        <code>public static AlgoParameterType Double;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.AlgoParameterType.Boolean">
      <summary>
        Represents a parameter of type <c>bool</c>.
      </summary>
      <signature>
        <code>public static AlgoParameterType Boolean;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.AlgoParameterType.String">
      <summary>
        Represents a parameter of type <c>string</c>.
      </summary>
      <signature>
        <code>public static AlgoParameterType String;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.AlgoParameterType.Enum">
      <summary>
        Represents a parameter of type <c>enum</c>.
      </summary>
      <signature>
        <code>public static AlgoParameterType Enum;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.AlgoParameterType.DataSeries">
      <summary>
        Represents a parameter of type <c>DataSeries</c>.
      </summary>
      <signature>
        <code>public static AlgoParameterType DataSeries;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.AlgoParameterType.Color">
      <summary>
        Represents a parameter of type <c>Color</c>.
      </summary>
      <signature>
        <code>public static AlgoParameterType Color;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.AlgoParameterType.TimeFrame">
      <summary>
        Represents a parameter of type <c>TimeFrame</c>.
      </summary>
      <signature>
        <code>public static AlgoParameterType TimeFrame;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.AlgoRegistry">
      <summary>
        Provides all installed algorithms data
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.AlgoRegistry" />
      <signature>
        <code>public interface AlgoRegistry</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AlgoRegistry.Count">
      <summary>
        Gets number of installed algorithms.
      </summary>
      <signature>
        <code>public int Count { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.AlgoRegistry.GetCount(cAlgo.API.AlgoKind)">
      <summary>
        Returns number of specific kind of installed algorithms.
      </summary>
      <param name="algoKind">Algorithms kind</param>
      <returns>Count</returns>
      <signature>
        <code>public int GetCount(AlgoKind algoKind)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.AlgoRegistry.Exists(System.String)">
      <summary>
        Checks existence of an algorithm.
      </summary>
      <param name="name">Algorithm type name</param>
      <returns>True if exist otherwise false.</returns>
      <signature>
        <code>public bool Exists(string name)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.AlgoRegistry.Exists(System.String,cAlgo.API.AlgoKind)">
      <summary>
        Checks existence of an algorithm.
      </summary>
      <param name="name">Algorithm type name</param>
      <param name="algoKind">Algorithm type kind</param>
      <returns>True if exist otherwise false.</returns>
      <signature>
        <code>public bool Exists(string name, AlgoKind algoKind)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.AlgoRegistry.Get(System.String)">
      <summary>
        Returns an algorithm type by it's name.
      </summary>
      <param name="name">Algorithm type name</param>
      <returns>AlgoType</returns>
      <signature>
        <code>public AlgoType Get(string name)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.AlgoRegistry.Get(System.String,cAlgo.API.AlgoKind)">
      <summary>
        Returns an algorithm type by it's name and kind.
      </summary>
      <param name="name">Algorithm type name</param>
      <param name="algoKind">Algorithm type kind</param>
      <returns>AlgoType</returns>
      <signature>
        <code>public AlgoType Get(string name, AlgoKind algoKind)</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.AlgoRegistry.AlgoTypeInstalled">
      <summary>
        Occurs when a new algorithm is installed.
      </summary>
      <signature>
        <code>public event Action&lt;AlgoTypeInstalledEventArgs&gt; AlgoTypeInstalled;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.AlgoRegistry.AlgoTypeDeleted">
      <summary>
        Occurs when an algorithm is deleted.
      </summary>
      <signature>
        <code>public event Action&lt;AlgoTypeDeletedEventArgs&gt; AlgoTypeDeleted;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.AlgoRegistry.AlgoTypeChanged">
      <summary>
        Occurs when an algorithm is changed.
      </summary>
      <signature>
        <code>public event Action&lt;AlgoTypeChangedEventArgs&gt; AlgoTypeChanged;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.AlgoType">
      <summary>
        Base type for representing an algorithm.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.AlgoRegistry" />
      <signature>
        <code>public interface AlgoType</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AlgoType.Name">
      <summary>
        Gets algorithm name.
      </summary>
      <signature>
        <code>public string Name { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AlgoType.AlgoKind">
      <summary>
        Gets algorithm kind.
      </summary>
      <signature>
        <code>public AlgoKind AlgoKind { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.IndicatorOutput">
      <summary>
        Represents an indicator output / line.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.AlgoRegistry" />
      <signature>
        <code>public interface IndicatorOutput</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorOutput.Name">
      <summary>
        Gets output name.
      </summary>
      <signature>
        <code>public string Name { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorOutput.DefaultLineStyle">
      <summary>
        Gets default line style of output.
      </summary>
      <signature>
        <code>public LineStyle DefaultLineStyle { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorOutput.DefaultColor">
      <summary>
        Gets default color of output.
      </summary>
      <signature>
        <code>public Color DefaultColor { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorOutput.DefaultThickness">
      <summary>
        Gets default thickness of output.
      </summary>
      <signature>
        <code>public float DefaultThickness { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorOutput.DefaultPlotType">
      <summary>
        Gets the <c>PlotType</c> of output.
      </summary>
      <signature>
        <code>public PlotType DefaultPlotType { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.IndicatorType">
      <summary>
        Represents an indicator algorithm type.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.AlgoRegistry" />
      <signature>
        <code>public interface IndicatorType</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorType.Outputs">
      <summary>
        Gets collection of indicator outputs.
      </summary>
      <signature>
        <code>public IReadonlyList&lt;IndicatorOutput&gt; Outputs { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorType.Parameters">
      <summary>
        Gets collection of indicator parameters.
      </summary>
      <signature>
        <code>public IReadonlyList&lt;AlgoParameter&gt; Parameters { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.PluginType">
      <summary>
        Represents a plugin algorithm type.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.AlgoRegistry" />
      <signature>
        <code>public interface PluginType</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PluginType.IsEnabled">
      <summary>
        Returns true if plugin is enabled otherwise false.
      </summary>
      <signature>
        <code>public bool IsEnabled { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.RobotType">
      <summary>
        Represents a robot / cBot algorithm type.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.AlgoRegistry" />
      <signature>
        <code>public interface RobotType</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.RobotType.Parameters">
      <summary>
        Gets collection of Robot parameters.
      </summary>
      <signature>
        <code>public IReadonlyList&lt;AlgoParameter&gt; Parameters { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Application">
      <summary>
        Represents the application.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to use the API Application object nad display its properties data inside a chart control
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ApplicationSample : Indicator
          {
          private TextBlock _userTimeOffsetTextBlock, _themeTextBlock;

          [Parameter("Horizontal Alignment", DefaultValue = HorizontalAlignment.Center)]
          public HorizontalAlignment HorizontalAlignment { get; set; }

          [Parameter("Vertical Alignment", DefaultValue = VerticalAlignment.Center)]
          public VerticalAlignment VerticalAlignment { get; set; }

          protected override void Initialize()
          {
          Application.ColorThemeChanged += Application_ColorThemeChanged;
          Application.UserTimeOffsetChanged += Application_UserTimeOffsetChanged;

          DrawApplicationInfo();
          }

          private void Application_UserTimeOffsetChanged(UserTimeOffsetChangedEventArgs obj)
          {
          _userTimeOffsetTextBlock.Text = obj.UserTimeOffset.ToString();
          }

          private void Application_ColorThemeChanged(ColorThemeChangeEventArgs obj)
          {
          _themeTextBlock.Text = obj.ColorTheme.ToString();
          }

          private void DrawApplicationInfo()
          {
          var grid = new Grid(3, 2)
          {
          BackgroundColor = Color.Goldenrod,
          HorizontalAlignment = HorizontalAlignment,
          VerticalAlignment = VerticalAlignment
          };

          grid.AddChild(new TextBlock
          {
          Text = "Version",
          Margin = 5
          }, 0, 0);
          grid.AddChild(new TextBlock
          {
          Text = Application.Version.ToString(),
          Margin = 5
          }, 0, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Theme",
          Margin = 5
          }, 1, 0);

          _themeTextBlock = new TextBlock
          {
          Text = Application.ColorTheme.ToString(),
          Margin = 5
          };

          grid.AddChild(_themeTextBlock, 1, 1);

          grid.AddChild(new TextBlock
          {
          Text = "User Time Offset",
          Margin = 5
          }, 2, 0);

          _userTimeOffsetTextBlock = new TextBlock
          {
          Text = Application.UserTimeOffset.ToString(),
          Margin = 5
          };

          grid.AddChild(_userTimeOffsetTextBlock, 2, 1);

          Chart.AddControl(grid);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Application" />
      <signature>
        <code>public interface Application</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Application.ColorTheme">
      <summary>
        Gets the color theme.
      </summary>
      <signature>
        <code>public ColorTheme ColorTheme { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Application.Version">
      <summary>
        Gets the version.
      </summary>
      <signature>
        <code>public Version Version { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Application.UserTimeOffset">
      <summary>
        Gets user time offset.
      </summary>
      <signature>
        <code>public TimeSpan UserTimeOffset { get; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Application.ColorThemeChanged">
      <summary>
        Occurs when color theme has changed.
      </summary>
      <signature>
        <code>public event Action&lt;ColorThemeChangeEventArgs&gt; ColorThemeChanged;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Application.UserTimeOffsetChanged">
      <summary>
        Occurs when user time offset has changed.
      </summary>
      <signature>
        <code>public event Action&lt;UserTimeOffsetChangedEventArgs&gt; UserTimeOffsetChanged;</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Application.DrawingColor">
      <summary>
        Gets current drawing color.
      </summary>
      <signature>
        <code>public Color DrawingColor { get; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Application.DrawingColorChanged">
      <summary>
        Occurs when DrawingColor has changed.
      </summary>
      <signature>
        <code>public event Action&lt;DrawingColorChangedEventArgs&gt; DrawingColorChanged;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Asset">
      <summary>
        The asset represents a currency.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataAssets" />
      <signature>
        <code>public interface Asset</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Asset.Name">
      <summary>
        The asset Name
      </summary>
      <signature>
        <code>public string Name { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Asset.Digits">
      <summary>
        Number of asset digits
      </summary>
      <signature>
        <code>public int Digits { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Asset.Convert(cAlgo.API.Asset,System.Double)">
      <summary>
        Converts value to another asset.
      </summary>
      <param name="to">Target asset</param>
      <param name="value">The value you want to convert from current Asset</param>
      <returns>Value in to / target asset</returns>
      <example>
        <code>
          using cAlgo.API;
          using System.Text;

          namespace cAlgo.Robots
          {
          [Robot(AccessRights = AccessRights.None)]
          public class AssetConversionTest : Robot
          {
          [Parameter(DefaultValue = "CAD")]
          public string ConvertToAssetName { get; set; }

          [Parameter(DefaultValue = 10)]
          public double AmountToConvert { get; set; }

          protected override void OnStart()
          {
          var convertToAsset = Assets.GetAsset(ConvertToAssetName);

          if (convertToAsset == null)
          {
          Print("Asset {0} not found", ConvertToAssetName);
          Stop();
          return;
          }

          var result = Account.Asset.Convert(convertToAsset, AmountToConvert);

          Print("Result : {0}", result);
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Internals.IAssetConverter" />
      <signature>
        <code>public double Convert(Asset to, double value)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Asset.Convert(System.String,System.Double)">
      <summary>
        Converts value to another asset.
      </summary>
      <param name="to">Target asset</param>
      <param name="value">The value you want to convert from current Asset</param>
      <returns>Value in to / target asset</returns>
      <seealso cref="T:cAlgo.API.Internals.IAssetConverter" />
      <example>
        <code>
          using cAlgo.API;
          using System.Text;

          namespace cAlgo.Robots
          {
          [Robot(AccessRights = AccessRights.None)]
          public class AssetConversionTest : Robot
          {
          [Parameter(DefaultValue = "CAD")]
          public string ConvertToAssetName { get; set; }

          [Parameter(DefaultValue = 10)]
          public double AmountToConvert { get; set; }

          protected override void OnStart()
          {
          var convertToAssetExist = Assets.Exists(ConvertToAssetName);

          if (!convertToAssetExist)
          {
          Print("Asset {0} not found", ConvertToAssetName);
          Stop();
          return;
          }

          var result = Account.Asset.Convert(ConvertToAssetName, AmountToConvert);

          Print("Result : {0}", result);
          }
          }
          }
        </code>
      </example>
      <signature>
        <code>public double Convert(string to, double value)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Assets">
      <summary>
        Represents the list of all the assets with the asset names as string values.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo.Robots
          {
          [Robot(AccessRights = AccessRights.None)]
          public class NewcBot2 : Robot
          {
          protected override void OnStart()
          {
          foreach (var assetName in Assets)
          {
          var asset = Assets.GetAsset(assetName);

          Print("Asset Name: {0} | Asset Digits: {1} | Is Deposit Asset: {2}", asset.Name, asset.Digits, asset.Name == Account.Asset.Name);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataAssets" />
      <signature>
        <code>public interface Assets</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Assets.Item(System.Int32)">
      <summary>
        Gets the desired asset.
      </summary>
      <param name="index">Asset index</param>
      <signature>
        <code>public string this[int index] { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Assets.Count">
      <summary>
        Gets the total number of the assets.
      </summary>
      <signature>
        <code>public int Count { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Assets.GetAsset(System.String)">
      <summary>
        Gets the asset.
      </summary>
      <param name="assetName">Name of the asset you want to get</param>
      <returns>Asset</returns>
      <signature>
        <code>public Asset GetAsset(string assetName)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Assets.GetAssets(System.String[])">
      <summary>
        Get multiple assets on a single call.
      </summary>
      <param name="assetNames">Names of the assets you want to get</param>
      <returns>Asset[]</returns>
      <signature>
        <code>public Asset[] GetAssets(string[] assetNames)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Assets.Exists(System.String)">
      <summary>
        Defines if the specific asset exists.
      </summary>
      <param name="assetName">Name of the asset you want to check</param>
      <returns>bool</returns>
      <signature>
        <code>public bool Exists(string assetName)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.CloudAttribute">
      <summary>
        Represents the cloud between the indicator lines.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;
          using System;

          namespace cAlgo
          {
          // This indicator shows how to use cloud attribute
          [Cloud("Top", "Bottom", Opacity = 0.2)]
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class BollingerBandsMTFCloudSample : Indicator
          {
          private BollingerBands _bollingerBands;

          private Bars _baseBars;

          [Parameter("Base TimeFrame", DefaultValue = "Daily")]
          public TimeFrame BaseTimeFrame { get; set; }

          [Parameter("Source", DefaultValue = DataSeriesType.Close)]
          public DataSeriesType DataSeriesType { get; set; }

          [Parameter("Periods", DefaultValue = 14, MinValue = 0)]
          public int Periods { get; set; }

          [Parameter("Standard Deviation", DefaultValue = 2, MinValue = 0)]
          public double StandardDeviation { get; set; }

          [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
          public MovingAverageType MaType { get; set; }

          [Output("Main", LineColor = "Yellow", PlotType = PlotType.Line, Thickness = 1)]
          public IndicatorDataSeries Main { get; set; }

          [Output("Top", LineColor = "Red", PlotType = PlotType.Line, Thickness = 1)]
          public IndicatorDataSeries Top { get; set; }

          [Output("Bottom", LineColor = "Red", PlotType = PlotType.Line, Thickness = 1)]
          public IndicatorDataSeries Bottom { get; set; }

          protected override void Initialize()
          {
          _baseBars = MarketData.GetBars(BaseTimeFrame);

          var baseSeries = GetBaseSeries();

          _bollingerBands = Indicators.BollingerBands(baseSeries, Periods, StandardDeviation, MaType);
          }

          public override void Calculate(int index)
          {
          var baseIndex = _baseBars.OpenTimes.GetIndexByTime(Bars.OpenTimes[index]);

          Main[index] = _bollingerBands.Main[baseIndex];
          Top[index] = _bollingerBands.Top[baseIndex];
          Bottom[index] = _bollingerBands.Bottom[baseIndex];
          }

          private DataSeries GetBaseSeries()
          {
          switch (DataSeriesType)
          {
          case DataSeriesType.Open:
          return _baseBars.OpenPrices;

          case DataSeriesType.High:
          return _baseBars.HighPrices;

          case DataSeriesType.Low:
          return _baseBars.LowPrices;

          case DataSeriesType.Close:
          return _baseBars.ClosePrices;
          default:

          throw new ArgumentOutOfRangeException("DataSeriesType");
          }
          }
          }

          public enum DataSeriesType
          {
          Open,
          High,
          Low,
          Close
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Attributes" />
      <signature>
        <code>public class CloudAttribute : Attribute</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.CloudAttribute.#ctor(System.String,System.String)">
      <summary>
        The cloud between the indicator lines.
      </summary>
      <param name="firstLineName">
      </param>
      <param name="secondLineName">
      </param>
      <signature>
        <code>public CloudAttribute(string firstLineName, string secondLineName)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.CloudAttribute.FirstLineName">
      <summary>
        The name of the first indicator line.
      </summary>
      <signature>
        <code>public string FirstLineName { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.CloudAttribute.SecondLineName">
      <summary>
        The name of the second indicator line.
      </summary>
      <signature>
        <code>public string SecondLineName { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.CloudAttribute.Opacity">
      <summary>
        The cloud opacity. Value can be set from 0 (transparent) to 1 (opaque). Values higher than 1 will be set to 1, values below 0 will be set to 0. Opacity is multiplied by the alpha channel of the active color (first or second color). Default opacity value is 0.2.
      </summary>
      <signature>
        <code>public double Opacity { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.CloudAttribute.FirstColor">
      <summary>
        Cloud color when the first line is above the second one. If not specified, the color of the first line is used.
      </summary>
      <signature>
        <code>public string FirstColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.CloudAttribute.SecondColor">
      <summary>
        Cloud color when the second line is above the first one. If not specified, color of the second line is used.
      </summary>
      <signature>
        <code>public string SecondColor { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.IndicatorAttribute">
      <summary>
        Indicator Attribute. Applies metadata to enable the indicator plot.
      </summary>
      <remarks>
        To make it effective apply enclosed in square brackets, e.g. [Indicator] before the indicator class declaration. Cannot be omitted.
      </remarks>
      <example>
        <code>
          namespace cAlgo.Indicators
          {
          [Indicator]
          public class SampleIndicator : Indicator
          {
          //...
          }
          }
        </code>
      </example>
      <example>
        <code>
          [Indicator(ScalePrecision = 5, IsOverlay = false, TimeZone = TimeZones.UTC)]
          public class SampleIndicator : Indicator
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Attributes" />
      <signature>
        <code>public sealed class IndicatorAttribute : Attribute</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.IndicatorAttribute.#ctor">
      <summary>
        Initializes a new instance of the IndicatorAttribute
      </summary>
      <remarks>
        To make it effective apply enclosed in square brackets, e.g. [Indicator] before the indicator class declaration.
        The name is displayed on the top left of the indicator panel.
      </remarks>
      <example>
        <code>

          namespace cAlgo.Indicators
          {
          [Indicator()]
          public class SampleIndicator : Indicator
          {
          //...
          }
          }

        </code>
      </example>
      <signature>
        <code>public IndicatorAttribute()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorAttribute.Name">
      <summary>
        The name of the Indicator.
      </summary>
      <remarks>
        The name is displayed to the left of the indicator panel.
      </remarks>
      <example>
        <code>

          namespace cAlgo.Indicators
          {
          [Indicator("IndicatorName")]
          public class SampleIndicator : Indicator
          {
          //...
          }
          }

        </code>
      </example>
      <signature>
        <code>public string Name { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorAttribute.ScalePrecision">
      <summary>
        The price scale precision.
      </summary>
      <remarks>
        The number of decimals displayed on the price scale of the indicator panel
      </remarks>
      <example>
        <code>

          namespace cAlgo.Indicators
          {
          [Indicator(ScalePrecision = 5)] // The scale precision is 5 decimals.
          public class SampleIndicator : Indicator
          {
          //...
          }
          }

        </code>
      </example>
      <signature>
        <code>public int ScalePrecision { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorAttribute.IsOverlay">
      <summary>
        Indicates whether this instance is overlayed on the chart or plotted on a separate indicator panel
      </summary>
      <value>
        The IsOverlay property sets the value true if this Indicator should be plotted on the chart panel; false if the indicator should be plotted on a separate Indicator Panel
      </value>
      <example>
        <code>

          [Indicator(IsOverlay = true)] // Plots the Indicator on the chart
          public class SampleIndicator : Indicator

        </code>
      </example>
      <example>
        <code>

          [Indicator(IsOverlay = false)] // Plots the Indicator on a separate indicator panel.
          public class SampleIndicator : Indicator

        </code>
      </example>
      <signature>
        <code>public bool IsOverlay { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorAttribute.AutoRescale">
      <summary>
        Indicates whether this instance automatically rescales the chart or not.
        Default value is true.
      </summary>
      <example>
        <code>

          [Indicator(AutoRescale = false)]
          public class SampleIndicator : Indicator

        </code>
      </example>
      <signature>
        <code>public bool AutoRescale { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorAttribute.TimeZone">
      <summary>
        Gets or sets the chart timezone of the displayed indicator.
      </summary>
      <example>
        <code>
          [Indicator(TimeZone = TimeZones.UTC)]
          public class SampleIndicator : Indicator
        </code>
      </example>
      <signature>
        <code>public string TimeZone { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorAttribute.AccessRights">
      <summary>
        Gets or sets the access rights required for Indicator.
      </summary>
      <signature>
        <code>public AccessRights AccessRights { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorAttribute.IsPercentage">
      <summary>
        Gets or sets whether the indicator is a percentage indicator. If one or more percentage indicators are added to the same panel, they will share the same scale.
        The default value is <c>false</c>.
      </summary>
      <example>
        <code>

          [Indicator(IsPercentage = true)]
          public class SamplePercentageIndicator : Indicator

        </code>
      </example>
      <signature>
        <code>public bool IsPercentage { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.LevelsAttribute">
      <summary>
        Levels Attribute. Applies metadata to enable the plot of level lines.
      </summary>
      <remarks>
        Represents level lines. It is commonly used in Oscillators, for instance to add a zero line. Must be added before the indicator class declaration.
      </remarks>
      <example>
        <code>
          namespace cAlgo.Indicators
          {
          [Levels(0, 50, 100)]
          [Indicator()]
          public class NewIndicator : Indicator
          //...
        </code>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo
          {
          // This sample indicator shows how to use the LevelsAttribute to set levels on your indicator outputs
          [Levels(30, 70)]
          [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class LevelsSample : Indicator
          {
          private RelativeStrengthIndex _rsi;

          [Parameter(DefaultValue = 0.0)]
          public double Parameter { get; set; }

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          protected override void Initialize()
          {
          _rsi = Indicators.RelativeStrengthIndex(Bars.ClosePrices, 20);
          }

          public override void Calculate(int index)
          {
          Result[index] = _rsi.Result[index];
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Attributes" />
      <signature>
        <code>public sealed class LevelsAttribute : Attribute</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.LevelsAttribute.#ctor(System.Double[])">
      <summary>
        Initializes a new LevelsAttribute instance
      </summary>
      <remarks>
        Draws level (horizontal) lines at a fixed position when the plot is on the indicator panel below the chart. To make it effective apply enclosed in square brackets, e.g. [Levels(0)], before the Indicator atribute declaration.
      </remarks>
      <param name="levels">The price values that the level lines are representing</param>
      <example>
        <code>
          namespace cAlgo.Indicators
          {
          // A zero line will be drawn
          [Levels(0)]
          [Indicator]
          public class NewIndicator : Indicator
        </code>
      </example>
      <signature>
        <code>public LevelsAttribute(double[] levels)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.LevelsAttribute.Levels">
      <summary>
        The array of price values that are ploted as level lines
      </summary>
      <example>
        <code>
          namespace cAlgo.Indicators
          {
          // two level lines will be drawn at prices 20.0 and 80.5
          [Levels(20.0, 80.5)]
          [Indicator]
          public class NewIndicator : Indicator
          //...
        </code>
      </example>
      <signature>
        <code>public double[] Levels { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.OutputAttribute">
      <summary>
        Sealed Class OutputAttribute
      </summary>
      <remarks>
        Marks a IndicatorDataSeries property as output to be displayed on the chart or panel below.
        To make it effective please apply this attribute in front of the declaration of the IndicatorDataSeries to be displayed.
      </remarks>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use indicators OuputAttribute
          [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class OutputAttributeSample : Indicator
          {
          [Output("Open", LineColor = "Red", IsHistogram = false, LineStyle = LineStyle.Dots, PlotType = PlotType.Line, Thickness = 2)]
          public IndicatorDataSeries OpenOutput { get; set; }

          [Output("High", LineColor = "Blue", IsHistogram = false, LineStyle = LineStyle.Solid, PlotType = PlotType.Line, Thickness = 2)]
          public IndicatorDataSeries HighOutput { get; set; }

          [Output("Low", LineColor = "Yellow", IsHistogram = false, LineStyle = LineStyle.Lines, PlotType = PlotType.Line, Thickness = 2)]
          public IndicatorDataSeries LowOutput { get; set; }

          [Output("Close", LineColor = "Green", IsHistogram = false, LineStyle = LineStyle.DotsRare, PlotType = PlotType.Line, Thickness = 2)]
          public IndicatorDataSeries CloseOutput { get; set; }

          protected override void Initialize()
          {
          }

          public override void Calculate(int index)
          {
          OpenOutput[index] = Bars.OpenPrices[index];
          HighOutput[index] = Bars.HighPrices[index];
          LowOutput[index] = Bars.LowPrices[index];
          CloseOutput[index] = Bars.ClosePrices[index];
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Attributes" />
      <signature>
        <code>public sealed class OutputAttribute : Attribute</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.OutputAttribute.#ctor(System.String)">
      <summary>
        Initializes a new instance of the OutputAttribute and sets the name.
      </summary>
      <param name="lineName">The name given to the output plot</param>
      <remarks>
        The members have the following default values:
        PlotType = PlotType.Line;
        LineStyle = LineStyle.Solid;
        Thickness = 1f;
        LineColor = "Green";
        Name = lineName;
      </remarks>
      <example>
        <code>
          // Simple plot that uses the default solid line plot in green color
          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

        </code>
      </example>
      <example>
        <code>

          //Plot a simple moving average with a set of lines (dashes)
          [Output("Simple Moving Average", LineStyle = LineStyle.Lines)]
          public IndicatorDataSeries SMA { get; set; }

        </code>
      </example>
      <example>
        <code>

          //...

          //Plot a Histogram.
          [Output("Commodity Channel Index", PlotType = PlotType.Histogram)]
          public IndicatorDataSeries Result { get; set; }

          //...

        </code>
      </example>
      <signature>
        <code>public OutputAttribute(string lineName)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.OutputAttribute.LineStyle">
      <summary>
        Gets or sets the Line Style for given Output property. By default it is set to Solid
      </summary>
      <remarks>
        If PlotType = PlotType.Line (default) the LineStyle can be added.
        Supported line styles are:
        Dots
        DotsRare
        DotsVeryRare
        Lines
        LinesDots
        Solid
      </remarks>
      <example>
        <code>
          //...

          //Simple moving average will be now plotted as Lines.
          [Output("Simple Moving Average", LineStyle = LineStyle.Lines)]
          public IndicatorDataSeries SMA { get; set; }


          //...
        </code>
      </example>
      <signature>
        <code>public LineStyle LineStyle { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.OutputAttribute.Name">
      <summary>
        The plot name
      </summary>
      <remarks>
        Displayed in the User Interface when adding an new instance of the Indicator.
      </remarks>
      <example>
        <code>
          //...

          //The plotted indicator name is Simple Moving Average.
          [Output("Simple Moving Average")]
          public IndicatorDataSeries SMA { get; set; }

          //...
        </code>
      </example>
      <signature>
        <code>public string Name { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.OutputAttribute.LineColor">
      <summary>
        Gets or sets the Color of the Output property. This Color will be used when the line for this Output is plotted.
      </summary>
      <example>
        <code>
          //...

          //The result is plotted in Turquoise.
          [Output("Main", LineColor = "#008000")]
          public IndicatorDataSeries SMA { get; set; }

          public override void Calculate(int index)
          {
          //...
          }



        </code>
      </example>
      <signature>
        <code>public string LineColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.OutputAttribute.Thickness">
      <summary>
        Sets the Width of the Output property.
      </summary>
      <remarks>
        This Width will be used when the line for this Output is plotted.
      </remarks>
      <example>
        <code>
          //...

          //The result is plotted as a line with thickness level five
          [Output("Simple Moving Average", Thickness = 5)]
          public IndicatorDataSeries SMA { get; set; }

          public override void Calculate(int index)
          {
          //...
          }

        </code>
      </example>
      <signature>
        <code>public float Thickness { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.OutputAttribute.PlotType">
      <summary>
        Plot type.
      </summary>
      <remarks>
        The type of the output plotted on the output panel. Default = Line
        Supported types are:
        Line
        Points
        Histogram
      </remarks>
      <example>
        <code>

          //...

          //The result is plotted as a Histogram.
          [Output("Commodity Channel Index", PlotType = PlotType.Histogram)]
          public IndicatorDataSeries SMA { get; set; }

          public override void Calculate(int index)
          {
          //...
          }

        </code>
      </example>
      <example>
        <code>

          //...

          //Plot the result as a set of yellow points.
          [Output("Main", LineColor = "Yellow", PlotType = PlotType.Points)]
          public IndicatorDataSeries Result { get; set; }

          //...

        </code>
      </example>
      <signature>
        <code>public PlotType PlotType { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.OutputAttribute.IsColorCustomizable">
      <summary>
        Sets if Output line color is customizable or not.
      </summary>
      <remarks>
        This property is useful when you are setting line color manually with code via SetLineAppearance method.
      </remarks>
      <signature>
        <code>public bool IsColorCustomizable { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ParameterAttribute">
      <summary>
        The Parameter Attribute class.
      </summary>
      <remarks>
        Marks a property as input parameter.
      </remarks>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to define different types of parameters for your indicators
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ParameterAttributreSample : Indicator
          {
          [Parameter("First Parameter Name", DefaultValue = 0.0, MinValue = 0, MaxValue = 10, Step = 1, Group = "Numeric Group")]
          public double FirstNumericParameter { get; set; }

          [Parameter("Second Parameter Name", DefaultValue = 0.0, MinValue = 0, MaxValue = 100, Step = 1, Group = "Numeric Group")]
          public int SecondNumericParameter { get; set; }

          [Parameter("First Parameter Name", DefaultValue = "Default value", Group = "String Group")]
          public string FirstStringParameter { get; set; }

          [Parameter("Second Parameter Name", DefaultValue = "Default value", Group = "String Group")]
          public string SecondStringParameter { get; set; }

          [Parameter("First Parameter Name", DefaultValue = TradeType.Buy, Group = "Enum Group")]
          public TradeType FirstEnumParameter { get; set; }

          [Parameter("Second Parameter Name", DefaultValue = TradeType.Sell, Group = "Enum Group")]
          public TradeType SecondEnumParameter { get; set; }

          protected override void Initialize()
          {
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Attributes" />
      <signature>
        <code>public class ParameterAttribute : Attribute</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ParameterAttribute.#ctor(System.String)">
      <summary>
        Initializes a new ParameterAttribute instance and sets the name.
      </summary>
      <remarks>
        Represents an input parameter to the program.
        To make it effective type in enclosed in square brackets, e.g. [Parameter], before the property declaration. Parameters are listed in the instance button of the robot/indicator.
      </remarks>
      <param name="name">The name of the parameter.</param>
      <example>
        <code>

          //...
          // parameter attribute
          [Parameter("Parameter Name")]
          public int ParameterName { get; set; }

          //...

        </code>
      </example>
      <example>
        <code>

          //...

          // parameter attribute
          [Parameter("ParameterName", DefaultValue = 14, MinValue = 2, MaxValue = 30)]
          public int ParameterName { get; set; } //  property declaration

          //...

        </code>
      </example>
      <signature>
        <code>public ParameterAttribute(string name)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ParameterAttribute.#ctor">
      <summary>
        Initializes a new instance of the ParameterAttribute class.
      </summary>
      <remarks>
        In this case the parameter name is the same as the property name.
      </remarks>
      <example>
        <code>

          //...

          // The Parameter name is MaPeriod
          [Parameter]
          public int MaPeriod { get; set; }

          //...

        </code>
      </example>
      <signature>
        <code>public ParameterAttribute()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ParameterAttribute.Name">
      <summary>
        The input parameter name.
      </summary>
      It is included in the input settings when a new instance is added.
      If omitted then the property name is assumed.
      <example>
        <code>
          //...

          //The input parameter name is MaPeriod
          [Parameter("MaPeriod")]
          public int Period { get; set; }

          //...
        </code>
      </example><signature>
        <code>public string Name { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ParameterAttribute.DefaultValue">
      <summary>
        Gets or sets the default value of this Parameter property.
      </summary>
      <example>
        <code>
          //...

          //The value for Periods is fourteen
          [Parameter(DefaultValue = 14)]
          public int Periods { get; set; }

          //...
        </code>
      </example>
      <signature>
        <code>public object DefaultValue { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ParameterAttribute.MinValue">
      <summary>
        Gets or sets the minimum value of this Parameter property. It is used for validating user input.
      </summary>
      <example>
        <code>
          //...

          //The minimum value the user can set Periods is five.
          [Parameter(DefaultValue = 14, MinValue = 5)]
          public int Periods { get; set; }

          //...
        </code>
      </example>
      <signature>
        <code>public object MinValue { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ParameterAttribute.MaxValue">
      <summary>
        Gets or sets the maximum value of this Parameter property. It is used for validating user input.
      </summary>
      <example>
        <code>
          //...

          //The maximum value the user can set Periods is twenty
          [Parameter(DefaultValue = 14, MaxValue = 20)]
          public int Periods { get; set; }

          //...
        </code>
      </example>
      <signature>
        <code>public object MaxValue { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ParameterAttribute.Step">
      <summary>
        Gets or sets the step of this Parameter. Step is used in NumericUpDown controls in parameter editors.
      </summary>
      <signature>
        <code>public double Step { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ParameterAttribute.Group">
      <summary>
        Groups parameters in UI.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public string Group { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.PluginAttribute">
      <summary>
        Sealed class PluginAttribute.
      </summary>
      <remarks>
        Marks a class as a Plugin. The Plugin attribute cannot be omitted.
      </remarks>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo.Plugins
          {
          // This sample plugin shows how to use the Plugin attribute and its properties
          // Every Plugin must be annotated with this attribute
          [Plugin(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PluginAttributeSample : Plugin
          {
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Attributes" />
      <signature>
        <code>public sealed class PluginAttribute : Attribute</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.PluginAttribute.#ctor">
      <summary>
        Initializes a new PluginAttribute instance.
      </summary>
      <remarks>
        To make it effective apply enclosed in square brackets,
        e.g. [Plugin], in front of the Plugin class declaration.
      </remarks>
      <example>
        <code>

          [Plugin] // PluginAttribute
          public class NewPlugin : Plugin
          {
          //...
          }

        </code>
      </example>
      <signature>
        <code>public PluginAttribute()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PluginAttribute.TimeZone">
      <summary>
        Sets the timezone for all the Plugin datetime references
      </summary>
      <remarks>
        All dates and times within the Plugin will be converted to this timezone
      </remarks>
      <example>
        <code>
          [Plugin(TimeZone = TimeZones.EasternStandardTime)]
          public class NewPlugin : Plugin
        </code>
      </example>
      <signature>
        <code>public string TimeZone { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PluginAttribute.AccessRights">
      <summary>
        Gets or sets the access rights required for the Plugin.
      </summary>
      <signature>
        <code>public AccessRights AccessRights { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.RobotAttribute">
      <summary>
        Sealed class RobotAttribute.
      </summary>
      <remarks>
        Marks a class as a Robot. The Robot attribute cannot be ommited.
      </remarks>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo.Robots
          {
          // This sample robot shows how to use the Robot attribute and its properties
          // Every cBot (Robot) must be annotated with this attribute
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class RobotAttributeSample : Robot
          {
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Attributes" />
      <signature>
        <code>public sealed class RobotAttribute : Attribute</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.RobotAttribute.#ctor">
      <summary>
        Initializes a new RobotAttribute instance.
      </summary>
      <remarks>
        To make it effective apply enclosed in square brackets,
        e.g. [Robot], in front of the robot class declaration.
      </remarks>
      <example>
        <code>

          [Robot] // RobotAttribute
          public class NewRobot : Robot
          {
          //...
          }

        </code>
      </example>
      <signature>
        <code>public RobotAttribute()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.RobotAttribute.Name">
      <summary>
        The name of a robot. Sets from constructor.
      </summary>
      <example>
        <code>

          [Robot("newRobot")]    //  newRobot is the name of the Robot
          public class myRobot : Robot
          {
          //...
          }

        </code>
      </example>
      <signature>
        <code>public string Name { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.RobotAttribute.TimeZone">
      <summary>
        Sets the timezone for all the robot or indicator datetime references
      </summary>
      <remarks>
        All dates and times within the robot or indicator will be converted to this timezone
      </remarks>
      <example>
        <code>
          [Robot(TimeZone = TimeZones.EasternStandardTime)]
          public class NewsRobot : Robot
        </code>
      </example>
      <signature>
        <code>public string TimeZone { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.RobotAttribute.AccessRights">
      <summary>
        Gets or sets the access rights required for the cBot.
      </summary>
      <signature>
        <code>public AccessRights AccessRights { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.RobotAttribute.DefaultSymbolName">
      <summary>
        Gets or sets the name of the default symbol for which new instances are created.
      </summary>
      <example>
        <code>

          [Robot(DefaultSymbolName = "GBPJPY")]
          public class DefaultSymbolExampleBot: Robot

        </code>
      </example>
      <signature>
        <code>public string DefaultSymbolName { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.RobotAttribute.DefaultTimeFrame">
      <summary>
        Gets or sets the default timeframe of the chart to which new instances are added.
      </summary>
      <example>
        <code>

          [Robot(DefaultTimeFrame = "M1")]
          public class DefaultTimeFrameExampleBot : Robot

        </code>
      </example>
      <signature>
        <code>public string DefaultTimeFrame { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.RobotAttribute.AddIndicators">
      <summary>
        Gets or sets whether indicators created by robot will be added to chart or not.
      </summary>
      <remarks>
        Default value is false.
      </remarks>
      <signature>
        <code>public bool AddIndicators { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TimeZones">
      <summary>
        Standard TimeZones class.
      </summary>
      <remarks>
        Sets the timezone for all the robot or indicator datetime references.
      </remarks>
      <example>
        <code>
          [Robot(TimeZone = TimeZones.EasternStandardTime)]
          public class NewsRobot : Robot
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using System;

          namespace cAlgo
          {
          // This sample indicator shows how to work with time zones
          // Every new cBot/Indicator default time zone is set to UTC via Indicator/Robot attributes TimeZone property
          // To change it you can set the attribute time zone property value to any of supported time zones
          // For example:
          // [Indicator(IsOverlay = true, TimeZone = TimeZones.EasternStandardTime, AccessRights = AccessRights.None)]
          // You can also work with different time zones programmatically by using .NET libraries\
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TimeZoneSample : Indicator
          {
          protected override void Initialize()
          {
          // You can get user platform time zone offset like this
          var platformUserSelectedTimeZoneOffset = Application.UserTimeOffset;

          var estTime = GetEasternStandardTime();

          Print(estTime.ToString("o"));
          }

          public override void Calculate(int index)
          {
          }

          private DateTime GetEasternStandardTime()
          {
          var easternTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");

          return TimeZoneInfo.ConvertTimeFromUtc(Server.TimeInUtc, easternTimeZone);
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Utility" />
      <signature>
        <code>public static class TimeZones</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.DatelineStandardTime">
      <summary>
        (GMT-12:00) International Date Line West
      </summary>
      <signature>
        <code>public static string DatelineStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.SamoaStandardTime">
      <summary>
        (GMT-11:00) Midway Island, Samoa
      </summary>
      <signature>
        <code>public static string SamoaStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.HawaiianStandardTime">
      <summary>
        (GMT-10:00) Hawaii
      </summary>
      <signature>
        <code>public static string HawaiianStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.AlaskanStandardTime">
      <summary>
        (GMT-09:00) Alaska
      </summary>
      <signature>
        <code>public static string AlaskanStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.PacificStandardTime">
      <summary>
        (GMT-08:00) Pacific Time (US and Canada); Tijuana
      </summary>
      <signature>
        <code>public static string PacificStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.MountainStandardTime">
      <summary>
        (GMT-07:00) Mountain Time (US and Canada)
      </summary>
      <signature>
        <code>public static string MountainStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.CentralStandardTime">
      <summary>
        (GMT-06:00) Central Time (US and Canada
      </summary>
      <signature>
        <code>public static string CentralStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.CanadaCentralStandardTime">
      <summary>
        (GMT-06:00) Saskatchewan
      </summary>
      <signature>
        <code>public static string CanadaCentralStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.CentralAmericaStandardTime">
      <summary>
        (GMT-06:00) Central America
      </summary>
      <signature>
        <code>public static string CentralAmericaStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.EasternStandardTime">
      <summary>
        (GMT-05:00) Eastern Time (US and Canada)
      </summary>
      <signature>
        <code>public static string EasternStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.AtlanticStandardTime">
      <summary>
        (GMT-04:00) Atlantic Time (Canada)
      </summary>
      <signature>
        <code>public static string AtlanticStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.ESouthAmericaStandardTime">
      <summary>
        (GMT-03:00) Brasilia
      </summary>
      <signature>
        <code>public static string ESouthAmericaStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.GreenlandStandardTime">
      <summary>
        (GMT-03:00) Greenland
      </summary>
      <signature>
        <code>public static string GreenlandStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.MidAtlanticStandardTime">
      <summary>
        (GMT-02:00) Mid-Atlantic
      </summary>
      <signature>
        <code>public static string MidAtlanticStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.AzoresStandardTime">
      <summary>
        (GMT-01:00) Azores
      </summary>
      <signature>
        <code>public static string AzoresStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.CapeVerdeStandardTime">
      <summary>
        (GMT-01:00) Cape Verde Islands
      </summary>
      <signature>
        <code>public static string CapeVerdeStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.GMTStandardTime">
      <summary>
        (GMT) Greenwich Mean Time: Dublin, Edinburgh, Lisbon, London
      </summary>
      <signature>
        <code>public static string GMTStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.GreenwichStandardTime">
      <summary>
        (GMT) Casablanca, Monrovia
      </summary>
      <signature>
        <code>public static string GreenwichStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.CentralEuropeStandardTime">
      <summary>
        (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague
      </summary>
      <signature>
        <code>public static string CentralEuropeStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.CentralEuropeanStandardTime">
      <summary>
        (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb
      </summary>
      <signature>
        <code>public static string CentralEuropeanStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.RomanceStandardTime">
      <summary>
        (GMT+01:00) Brussels, Copenhagen, Madrid, Paris
      </summary>
      <signature>
        <code>public static string RomanceStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.WEuropeStandardTime">
      <summary>
        (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna
      </summary>
      <signature>
        <code>public static string WEuropeStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.WCentralAfricaStandardTime">
      <summary>
        (GMT+01:00) West Central Africa
      </summary>
      <signature>
        <code>public static string WCentralAfricaStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.EEuropeStandardTime">
      <summary>
        (GMT+02:00) Bucharest
      </summary>
      <signature>
        <code>public static string EEuropeStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.EgyptStandardTime">
      <summary>
        (GMT+02:00) Cairo
      </summary>
      <signature>
        <code>public static string EgyptStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.FLEStandardTime">
      <summary>
        (GMT+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius
      </summary>
      <signature>
        <code>public static string FLEStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.GTBStandardTime">
      <summary>
        (GMT+02:00) Athens, Istanbul, Minsk
      </summary>
      <signature>
        <code>public static string GTBStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.IsraelStandardTime">
      <summary>
        (GMT+02:00) Jerusalem
      </summary>
      <signature>
        <code>public static string IsraelStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.SouthAfricaStandardTime">
      <summary>
        (GMT+02:00) Harare, Pretoria
      </summary>
      <signature>
        <code>public static string SouthAfricaStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.RussianStandardTime">
      <summary>
        (GMT+03:00) Moscow, St. Petersburg, Volgograd
      </summary>
      <signature>
        <code>public static string RussianStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.ArabStandardTime">
      <summary>
        (GMT+03:00) Kuwait, Riyadh
      </summary>
      <signature>
        <code>public static string ArabStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.EAfricaStandardTime">
      <summary>
        (GMT+03:00) Nairobi
      </summary>
      <signature>
        <code>public static string EAfricaStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.ArabicStandardTime">
      <summary>
        (GMT+03:00) Baghdad
      </summary>
      <signature>
        <code>public static string ArabicStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.IranStandardTime">
      <summary>
        (GMT+03:30) Tehran
      </summary>
      <signature>
        <code>public static string IranStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.ArabianStandardTime">
      <summary>
        (GMT+04:00) Abu Dhabi, Muscat
      </summary>
      <signature>
        <code>public static string ArabianStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.CaucasusStandardTime">
      <summary>
        (GMT+04:00) Baku, Tbilisi, Yerevan
      </summary>
      <signature>
        <code>public static string CaucasusStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.EkaterinburgStandardTime">
      <summary>
        (GMT+05:00) Ekaterinburg
      </summary>
      <signature>
        <code>public static string EkaterinburgStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.WestAsiaStandardTime">
      <summary>
        (GMT+05:00) Islamabad, Karachi, Tashkent
      </summary>
      <signature>
        <code>public static string WestAsiaStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.IndiaStandardTime">
      <summary>
        (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi
      </summary>
      <signature>
        <code>public static string IndiaStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.NepalStandardTime">
      <summary>
        (GMT+05:45) Kathmandu
      </summary>
      <signature>
        <code>public static string NepalStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.CentralAsiaStandardTime">
      <summary>
        (GMT+06:00) Astana, Dhaka
      </summary>
      <signature>
        <code>public static string CentralAsiaStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.SriLankaStandardTime">
      <summary>
        (GMT+06:00) Sri Jayawardenepura
      </summary>
      <signature>
        <code>public static string SriLankaStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.NCentralAsiaStandardTime">
      <summary>
        (GMT+06:00) Almaty, Novosibirsk
      </summary>
      <signature>
        <code>public static string NCentralAsiaStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.MyanmarStandardTime">
      <summary>
        (GMT+06:30) Yangon Rangoon
      </summary>
      <signature>
        <code>public static string MyanmarStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.NorthAsiaStandardTime">
      <summary>
        (GMT+07:00) Krasnoyarsk
      </summary>
      <signature>
        <code>public static string NorthAsiaStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.ChinaStandardTime">
      <summary>
        (GMT+08:00) Beijing, Chongqing, Hong Kong SAR, Urumqi
      </summary>
      <signature>
        <code>public static string ChinaStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.SingaporeStandardTime">
      <summary>
        (GMT+08:00) Kuala Lumpur, Singapore
      </summary>
      <signature>
        <code>public static string SingaporeStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.TaipeiStandardTime">
      <summary>
        (GMT+08:00) Taipei
      </summary>
      <signature>
        <code>public static string TaipeiStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.WAustraliaStandardTime">
      <summary>
        (GMT+08:00) Perth
      </summary>
      <signature>
        <code>public static string WAustraliaStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.NorthAsiaEastStandardTime">
      <summary>
        (GMT+08:00) Irkutsk, Ulaanbaatar
      </summary>
      <signature>
        <code>public static string NorthAsiaEastStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.KoreaStandardTime">
      <summary>
        (GMT+09:00) Seoul
      </summary>
      <signature>
        <code>public static string KoreaStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.TokyoStandardTime">
      <summary>
        (GMT+09:00) Osaka, Sapporo, Tokyo
      </summary>
      <signature>
        <code>public static string TokyoStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.YakutskStandardTime">
      <summary>
        (GMT+09:00) Yakutsk
      </summary>
      <signature>
        <code>public static string YakutskStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.CenAustraliaStandardTime">
      <summary>
        (GMT+09:30) Adelaide
      </summary>
      <signature>
        <code>public static string CenAustraliaStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.EAustraliaStandardTime">
      <summary>
        (GMT+10:00) Brisbane
      </summary>
      <signature>
        <code>public static string EAustraliaStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.TasmaniaStandardTime">
      <summary>
        (GMT+10:00) Hobart
      </summary>
      <signature>
        <code>public static string TasmaniaStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.VladivostokStandardTime">
      <summary>
        (GMT+10:00) Vladivostok
      </summary>
      <signature>
        <code>public static string VladivostokStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.WestPacificStandardTime">
      <summary>
        (GMT+10:00) Guam, Port Moresby
      </summary>
      <signature>
        <code>public static string WestPacificStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.CentralPacificStandardTime">
      <summary>
        (GMT+11:00) Magadan, Solomon Islands, New Caledonia
      </summary>
      <signature>
        <code>public static string CentralPacificStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.NewZealandStandardTime">
      <summary>
        (GMT+12:00) Auckland, Wellington
      </summary>
      <signature>
        <code>public static string NewZealandStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.TongaStandardTime">
      <summary>
        (GMT+13:00) Nuku'alofa
      </summary>
      <signature>
        <code>public static string TongaStandardTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeZones.UTC">
      <summary>
        Coordinated Universal Time
      </summary>
      <signature>
        <code>public static string UTC;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Chart">
      <summary>
        Represents the Chart Interface.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator display's the chart data by using the current Chart object
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartSample : Indicator
          {
          private Grid _grid;

          private TextBlock _mouseLocationTextBlock;

          private TextBlock _mouseWheelDeltaTextBlock;

          private TextBlock _objectsNumberTextBlock;

          protected override void Initialize()
          {
          Chart.ChartTypeChanged += args =&gt; CreateAndAddGridToChart();
          Chart.ColorsChanged += args =&gt; CreateAndAddGridToChart();
          Chart.DisplaySettingsChanged += args =&gt; CreateAndAddGridToChart();
          Chart.Drag += args =&gt; CreateAndAddGridToChart();
          Chart.DragEnd += args =&gt; CreateAndAddGridToChart();
          Chart.DragStart += args =&gt; CreateAndAddGridToChart();
          Chart.IndicatorAreaAdded += args =&gt; CreateAndAddGridToChart();
          Chart.IndicatorAreaRemoved += args =&gt; CreateAndAddGridToChart();
          Chart.MouseMove += args =&gt;
          {
          if (_mouseLocationTextBlock == null)
          return;

          _mouseLocationTextBlock.Text = string.Format("({0}, {1})", args.MouseX, args.MouseY);
          };
          Chart.MouseLeave += args =&gt;
          {
          if (_mouseLocationTextBlock == null)
          return;

          _mouseLocationTextBlock.Text = "(Null, Null)";
          _mouseWheelDeltaTextBlock.Text = "0";
          };
          Chart.MouseWheel += args =&gt;
          {
          if (_mouseWheelDeltaTextBlock == null)
          return;

          _mouseWheelDeltaTextBlock.Text = args.Delta.ToString();
          };
          Chart.ObjectsAdded += args =&gt; _objectsNumberTextBlock.Text = Chart.Objects.Count.ToString();
          Chart.ObjectsRemoved += args =&gt; _objectsNumberTextBlock.Text = Chart.Objects.Count.ToString();

          Chart.ZoomChanged += args =&gt; CreateAndAddGridToChart();

          CreateAndAddGridToChart();
          }

          public override void Calculate(int index)
          {
          }

          private void CreateAndAddGridToChart()
          {
          if (_grid != null)
          Chart.RemoveControl(_grid);

          _grid = new Grid(10, 2)
          {
          BackgroundColor = Color.Gold,
          Opacity = 0.6,
          HorizontalAlignment = HorizontalAlignment.Left,
          VerticalAlignment = VerticalAlignment.Bottom
          };

          var style = new Style();

          style.Set(ControlProperty.Margin, 5);
          style.Set(ControlProperty.FontWeight, FontWeight.ExtraBold);
          style.Set(ControlProperty.ForegroundColor, Color.Red);

          _grid.AddChild(new TextBlock
          {
          Text = "Height",
          Style = style
          }, 0, 0);
          _grid.AddChild(new TextBlock
          {
          Text = Chart.Height.ToString(),
          Style = style
          }, 0, 1);

          _grid.AddChild(new TextBlock
          {
          Text = "Width",
          Style = style
          }, 1, 0);
          _grid.AddChild(new TextBlock
          {
          Text = Chart.Width.ToString(),
          Style = style
          }, 1, 1);

          _grid.AddChild(new TextBlock
          {
          Text = "Zoom Level",
          Style = style
          }, 2, 0);
          _grid.AddChild(new TextBlock
          {
          Text = Chart.ZoomLevel.ToString(),
          Style = style
          }, 2, 1);

          _grid.AddChild(new TextBlock
          {
          Text = "Objects #",
          Style = style
          }, 3, 0);

          _objectsNumberTextBlock = new TextBlock
          {
          Style = style,
          Text = Chart.Objects.Count.ToString()
          };

          _grid.AddChild(_objectsNumberTextBlock, 3, 1);

          _grid.AddChild(new TextBlock
          {
          Text = "Top Y",
          Style = style
          }, 4, 0);
          _grid.AddChild(new TextBlock
          {
          Text = Chart.TopY.ToString(),
          Style = style
          }, 4, 1);

          _grid.AddChild(new TextBlock
          {
          Text = "Bottom Y",
          Style = style
          }, 5, 0);
          _grid.AddChild(new TextBlock
          {
          Text = Chart.BottomY.ToString(),
          Style = style
          }, 5, 1);

          _grid.AddChild(new TextBlock
          {
          Text = "Type",
          Style = style
          }, 6, 0);
          _grid.AddChild(new TextBlock
          {
          Text = Chart.ChartType.ToString(),
          Style = style
          }, 6, 1);

          _grid.AddChild(new TextBlock
          {
          Text = "Mouse Location",
          Style = style
          }, 7, 0);

          _mouseLocationTextBlock = new TextBlock
          {
          Style = style,
          Text = "(Null, Null)"
          };

          _grid.AddChild(_mouseLocationTextBlock, 7, 1);

          _grid.AddChild(new TextBlock
          {
          Text = "Indicator Areas #",
          Style = style
          }, 8, 0);
          _grid.AddChild(new TextBlock
          {
          Text = Chart.IndicatorAreas.Count.ToString(),
          Style = style
          }, 8, 1);

          _grid.AddChild(new TextBlock
          {
          Text = "Mouse Wheel Delta",
          Style = style
          }, 9, 0);

          _mouseWheelDeltaTextBlock = new TextBlock
          {
          Style = style,
          Text = "0"
          };

          _grid.AddChild(_mouseWheelDeltaTextBlock, 9, 1);

          Chart.AddControl(_grid);
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Chart" />
      <signature>
        <code>public interface Chart</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Chart.Id">
      <summary>
        Gets the unique Id of Chart.
      </summary>
      <signature>
        <code>public Guid Id { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Chart.IndicatorAreas">
      <summary>
        Gets the read only list of the indicator areas.
      </summary>
      <signature>
        <code>public IReadonlyList&lt;IndicatorArea&gt; IndicatorAreas { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Chart.DisplaySettings">
      <summary>
        Gets the chart display settings.
      </summary>
      <signature>
        <code>public ChartDisplaySettings DisplaySettings { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Chart.ColorSettings">
      <summary>
        Gets the chart color settings.
      </summary>
      <signature>
        <code>public ChartColorSettings ColorSettings { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Chart.ChartType">
      <summary>
        Gets or sets the type of the chart - Bar, Candlesticks, Line or Dots chart.
      </summary>
      <signature>
        <code>public ChartType ChartType { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Chart.ZoomLevel">
      <summary>
        Gets or sets the zoom percent values. Valid values are from 5 to 500 with a step of 5, as can be seen on UI in the
        charts Zoom control.
      </summary>
      <signature>
        <code>public int ZoomLevel { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Chart.FirstVisibleBarIndex">
      <summary>
        Gets the index of the first visible bar on the chart.
      </summary>
      <signature>
        <code>public int FirstVisibleBarIndex { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Chart.LastVisibleBarIndex">
      <summary>
        Gets the index of the last visible bar on the chart.
      </summary>
      <signature>
        <code>public int LastVisibleBarIndex { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Chart.MaxVisibleBars">
      <summary>
        Gets the maximum number of the visible bars on the chart.
      </summary>
      <signature>
        <code>public int MaxVisibleBars { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Chart.BarsTotal">
      <summary>
        Gets the total number of the bars on the chart.
      </summary>
      <signature>
        <code>public int BarsTotal { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Chart.Bars">
      <summary>
        Gets the chart Bar objects.
      </summary>
      <signature>
        <code>public Bars Bars { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Chart.TimeFrame">
      <summary>
        Gets the time frame of the chart from 1 minute to 1 month.
      </summary>
      <signature>
        <code>public TimeFrame TimeFrame { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Chart.Symbol">
      <summary>
        Gets the chart symbol.
      </summary>
      <signature>
        <code>public Symbol Symbol { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Chart.SymbolName">
      <summary>
        Gets the symbol name.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public string SymbolName { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Chart.IsScrollingEnabled">
      <summary>
        Gets or sets the value indicating whether the scrolling is enabled or disabled for the chart. If disabled, then the
        chart is not affected by scrolling, dragging, scaling, or pressing any keyboard keys, but is still affected by
        resizing, zooming, and API calls for changing X or Y-axis positions on the chart.
      </summary>
      <signature>
        <code>public bool IsScrollingEnabled { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Chart.IsActive">
      <summary>
        True if Chart is active otherwise False
      </summary>
      <signature>
        <code>public bool IsActive { get; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Chart.Activated">
      <summary>
        Occurs when chart is activated
      </summary>
      <seealso cref="T:cAlgo.API.ChartActivationChangedEventArgs" />
      <signature>
        <code>public event Action&lt;ChartActivationChangedEventArgs&gt; Activated;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Chart.Deactivated">
      <summary>
        Occurs when chart is deactivated
      </summary>
      <seealso cref="T:cAlgo.API.ChartActivationChangedEventArgs" />
      <signature>
        <code>public event Action&lt;ChartActivationChangedEventArgs&gt; Deactivated;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Chart.DisplaySettingsChanged">
      <summary>
        Occurs when one or several charts display settings change.
      </summary>
      <signature>
        <code>public event Action&lt;ChartDisplaySettingsEventArgs&gt; DisplaySettingsChanged;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Chart.ColorsChanged">
      <summary>
        Occurs when the chart color settings change.
      </summary>
      <signature>
        <code>public event Action&lt;ChartColorEventArgs&gt; ColorsChanged;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Chart.ChartTypeChanged">
      <summary>
        Occurs when the chart type changes.
      </summary>
      <signature>
        <code>public event Action&lt;ChartTypeEventArgs&gt; ChartTypeChanged;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Chart.ZoomChanged">
      <summary>
        Occurs when the chart zoom options change.
      </summary>
      <signature>
        <code>public event Action&lt;ChartZoomEventArgs&gt; ZoomChanged;</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Chart.ScrollXBy(System.Int32)">
      <summary>
        Scrolls the chart by the X-axis for the specified number of bars.
      </summary>
      <param name="bars">The number of bars</param>
      <signature>
        <code>public void ScrollXBy(int bars)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Chart.ScrollXTo(System.Int32)">
      <summary>
        Scrolls the chart by the X-axis to the bar with the specified index.
      </summary>
      <param name="barIndex">The index of the bar.</param>
      <signature>
        <code>public void ScrollXTo(int barIndex)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Chart.ScrollXTo(System.DateTime)">
      <summary>
        Scrolls the chart by the X-axis to the specified date time.
      </summary>
      <param name="time">The X-axis date time</param>
      <signature>
        <code>public void ScrollXTo(DateTime time)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Chart.SetBarColor(System.Int64,cAlgo.API.Color)">
      <summary>
        Sets the color of the bar at the specified bar index. It will change the bar fill color and the outline color.
      </summary>
      <param name="barIndex">The bar index number</param>
      <param name="color">The color for the bar</param>
      <signature>
        <code>public void SetBarColor(long barIndex, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Chart.SetBarFillColor(System.Int64,cAlgo.API.Color)">
      <summary>
        Sets the fill color of the bar at the specified bar index.
      </summary>
      <param name="barIndex">The bar index number</param>
      <param name="color">The color for filling the bar</param>
      <signature>
        <code>public void SetBarFillColor(long barIndex, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Chart.SetBarOutlineColor(System.Int64,cAlgo.API.Color)">
      <summary>
        Sets the outline color of the bar at the specified bar index.
      </summary>
      <param name="barIndex">The bar index number</param>
      <param name="color">The color for bar outline</param>
      <signature>
        <code>public void SetBarOutlineColor(long barIndex, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Chart.SetTickVolumeColor(System.Int64,cAlgo.API.Color)">
      <summary>
        Sets the color of tick volume line at the specified bar index.
      </summary>
      <param name="barIndex">The bar index number</param>
      <param name="color">The color for bar tick volume</param>
      <signature>
        <code>public void SetTickVolumeColor(long barIndex, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Chart.ResetBarColor(System.Int64)">
      <summary>
        Resets the color of the bar to the default.
      </summary>
      <param name="barIndex">The bar index number</param>
      <signature>
        <code>public void ResetBarColor(long barIndex)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Chart.ResetBarColors">
      <summary>
        Resets the colors of all the bars.
      </summary>
      <signature>
        <code>public void ResetBarColors()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Chart.ResetTickVolumeColor(System.Int64)">
      <summary>
        Resets the color of the tick volume line to the default at the specified bar index.
      </summary>
      <param name="barIndex">The bar index number</param>
      <signature>
        <code>public void ResetTickVolumeColor(long barIndex)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Chart.ResetTickVolumeColors">
      <summary>
        Resets the color of all the tick volume bars.
      </summary>
      <signature>
        <code>public void ResetTickVolumeColors()</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Chart.IndicatorAreaAdded">
      <summary>
        Occurs when the indicator area is added.
      </summary>
      <signature>
        <code>public event Action&lt;IndicatorAreaAddedEventArgs&gt; IndicatorAreaAdded;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Chart.IndicatorAreaRemoved">
      <summary>
        Occurs when the indicator area is removed.
      </summary>
      <signature>
        <code>public event Action&lt;IndicatorAreaRemovedEventArgs&gt; IndicatorAreaRemoved;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Chart.KeyDown">
      <summary>
        Occurs when a keyboard key pressed while the mouse cursor is over the chart
      </summary>
      <signature>
        <code>public event Action&lt;ChartKeyboardEventArgs&gt; KeyDown;</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Chart.AddHotkey(System.Action{cAlgo.API.ChartKeyboardEventArgs},cAlgo.API.Key,cAlgo.API.ModifierKeys)">
      <summary>
        Adds an hotkey to the chart that will call the handler when pressed
      </summary>
      <param name="hotkeyHandler">The action delegate handler that will be called with a ChartKeyboardEventArgs</param>
      <param name="key">The Hotkey main key</param>
      <param name="modifiers">The hotkey modifier key, default to None which means no modifer key</param>
      <returns>bool (True if Hotkey was added successfully otherwise False)</returns>
      <seealso cref="T:cAlgo.API.ChartKeyboardEventArgs" />
      <signature>
        <code>public bool AddHotkey(Action&lt;ChartKeyboardEventArgs&gt; hotkeyHandler, Key key, ModifierKeys modifiers)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Chart.AddHotkey(System.Action{cAlgo.API.ChartKeyboardEventArgs},System.String)">
      <summary>
        Adds an hotkey to the chart that will call the handler when pressed
      </summary>
      <param name="hotkeyHandler">The action delegate handler that will be called with a ChartKeyboardEventArgs</param>
      <param name="hotkey">The keyboard key for hotkey</param>
      <returns>bool (True if Hotkey was added successfully otherwise False)</returns>
      <seealso cref="T:cAlgo.API.ChartKeyboardEventArgs" />
      <signature>
        <code>public bool AddHotkey(Action&lt;ChartKeyboardEventArgs&gt; hotkeyHandler, string hotkey)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Chart.AddHotkey(System.Action,cAlgo.API.Key,cAlgo.API.ModifierKeys)">
      <summary>
        Adds an hotkey to the chart that will call the handler when pressed
      </summary>
      <param name="hotkeyHandler">The action delegate handler that will be called</param>
      <param name="key">The Hotkey main key</param>
      <param name="modifiers">The hotkey modifier key, default to None which means no modifer key</param>
      <returns>bool (True if Hotkey was added successfully otherwise False)</returns>
      <signature>
        <code>public bool AddHotkey(Action hotkeyHandler, Key key, ModifierKeys modifiers)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Chart.AddHotkey(System.Action,System.String)">
      <summary>
        Adds an hotkey to the chart that will call the handler when pressed
      </summary>
      <param name="hotkeyHandler">The action delegate handler that will be called</param>
      <param name="hotkey">The keyboard key for hotkey</param>
      <returns>bool (True if Hotkey was added successfully otherwise False)</returns>
      <signature>
        <code>public bool AddHotkey(Action hotkeyHandler, string hotkey)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Chart.TryChangeTimeFrame(cAlgo.API.TimeFrame)">
      <summary>
        Changes the time frame on the chart.
      </summary>
      <param name="timeFrame">The time frame to change the current chart time frame to</param>
      <returns>
      </returns>
      <remarks>
      </remarks>
      <signature>
        <code>public bool TryChangeTimeFrame(TimeFrame timeFrame)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Chart.TryChangeTimeFrameAndSymbol(cAlgo.API.TimeFrame,System.String)">
      <summary>
        Changes the time frame and the symbol on the chart.
      </summary>
      <param name="timeFrame">The time frame to change the current chart time frame to</param>
      <param name="symbolName">The symbol name to change the current chart symbol to</param>
      <returns>
      </returns>
      <remarks>
      </remarks>
      <signature>
        <code>public bool TryChangeTimeFrameAndSymbol(TimeFrame timeFrame, string symbolName)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Chart.IsVisible">
      <summary>
        True if Chart is visible otherwise False.
      </summary>
      <signature>
        <code>public bool IsVisible { get; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Chart.VisibilityChanged">
      <summary>
        Occurs when chart visibility changes.
      </summary>
      <seealso cref="T:cAlgo.API.ChartVisibilityChangedEventArgs" />
      <signature>
        <code>public event Action&lt;ChartVisibilityChangedEventArgs&gt; VisibilityChanged;</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Chart.TakeChartshot">
      <summary>
        Takes a chartshot from the chart that indicator / cBot runs on.
      </summary>
      <returns>If successful chartshot data inside a byte array in PNG format otherwise null.</returns>
      <remarks>TakeChartshot only works if chart is visible.</remarks>
      <seealso cref="E:cAlgo.API.Chart.VisibilityChanged" />
      <seealso cref="P:cAlgo.API.Chart.IsVisible" />
      <signature>
        <code>public byte[] TakeChartshot()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Chart.Indicators">
      <summary>
        Gets the <c>ChartIndicators</c> operating on a chart.
      </summary>
      <signature>
        <code>public ChartIndicators Indicators { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Chart.Robots">
      <summary>
        Gets the <c>ChartRobots</c> operating on a chart.
      </summary>
      <signature>
        <code>public ChartRobots Robots { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartArea">
      <summary>
        The Chart Area Interface.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Chart" />
      <signature>
        <code>public interface ChartArea</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartArea.IsAlive">
      <summary>
        Checks whether the instance is still on the chart area.
      </summary>
      <signature>
        <code>public bool IsAlive { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.AddControl(cAlgo.API.ControlBase)">
      <summary>
        Adds a chart control from the Control Base to the main chart area or to the indicator area.
      </summary>
      <param name="control">The control that will be added</param>
      <signature>
        <code>public void AddControl(ControlBase control)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.RemoveControl(cAlgo.API.ControlBase)">
      <summary>
        Remove a chart control from the chart area.
      </summary>
      <param name="control">An existing control that will be removed</param>
      <signature>
        <code>public void RemoveControl(ControlBase control)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.AddControl(cAlgo.API.ControlBase,System.Int32,System.Double)">
      <summary>
        Adds a chart control to chart / indicator area on absolute bar index and price (x,y) coordinates.
      </summary>
      <param name="control">The control that will be added</param>
      <param name="barIndex">Bar Index</param>
      <param name="y">Price</param>
      <signature>
        <code>public void AddControl(ControlBase control, int barIndex, double y)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.AddControl(cAlgo.API.ControlBase,System.DateTime,System.Double)">
      <summary>
        Adds a chart control to chart / indicator area on absolute time and price (x,y) coordinates.
      </summary>
      <param name="control">The control that will be added</param>
      <param name="time">Time</param>
      <param name="y">Price</param>
      <signature>
        <code>public void AddControl(ControlBase control, DateTime time, double y)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.AddControl(cAlgo.API.ControlBase,System.DateTime)">
      <summary>
        Adds a chart control to chart / indicator area on absolute time (x) coordinate.
      </summary>
      <param name="control">The control that will be added</param>
      <param name="time">Time</param>
      <signature>
        <code>public void AddControl(ControlBase control, DateTime time)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.AddControl(cAlgo.API.ControlBase,System.Int32)">
      <summary>
        Adds a chart control to chart / indicator area on absolute bar index (x) coordinate.
      </summary>
      <param name="control">The control that will be added</param>
      <param name="barIndex">Bar Index</param>
      <signature>
        <code>public void AddControl(ControlBase control, int barIndex)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.AddControl(cAlgo.API.ControlBase,System.Double)">
      <summary>
        Adds a chart control to chart / indicator area on absolute price (y) coordinate.
      </summary>
      <param name="control">The control that will be added</param>
      <param name="y">Price</param>
      <signature>
        <code>public void AddControl(ControlBase control, double y)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.MoveControl(cAlgo.API.ControlBase,System.Int32,System.Double)">
      <summary>
        Moves a chart control to chart / indicator area on absolute bar index and price (x,y) coordinates.
      </summary>
      <param name="control">The control that will be added</param>
      <param name="barIndex">Bar Index</param>
      <param name="y">Price</param>
      <signature>
        <code>public void MoveControl(ControlBase control, int barIndex, double y)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.MoveControl(cAlgo.API.ControlBase,System.DateTime,System.Double)">
      <summary>
        Moves a chart control to chart / indicator area on absolute time and price (x,y) coordinates.
      </summary>
      <param name="control">The control that will be added</param>
      <param name="time">Time</param>
      <param name="y">Price</param>
      <signature>
        <code>public void MoveControl(ControlBase control, DateTime time, double y)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.MoveControl(cAlgo.API.ControlBase,System.DateTime)">
      <summary>
        Moves a chart control to chart / indicator area on absolute time (x) coordinate.
      </summary>
      <param name="control">The control that will be added</param>
      <param name="time">Time</param>
      <signature>
        <code>public void MoveControl(ControlBase control, DateTime time)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.MoveControl(cAlgo.API.ControlBase,System.Int32)">
      <summary>
        Moves a chart control to chart / indicator area on absolute bar index (x) coordinate.
      </summary>
      <param name="control">The control that will be added</param>
      <param name="barIndex">Bar Index</param>
      <signature>
        <code>public void MoveControl(ControlBase control, int barIndex)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.MoveControl(cAlgo.API.ControlBase,System.Double)">
      <summary>
        Moves a chart control to chart / indicator area on absolute price (y) coordinate.
      </summary>
      <param name="control">The control that will be added</param>
      <param name="y">Price</param>
      <signature>
        <code>public void MoveControl(ControlBase control, double y)</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartArea.MouseEnter">
      <summary>
        Occurs when the cursor hover over the chart area.
      </summary>
      <signature>
        <code>public event Action&lt;ChartMouseEventArgs&gt; MouseEnter;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartArea.MouseLeave">
      <summary>
        Occurs when the cursor leaves the chart area
      </summary>
      <signature>
        <code>public event Action&lt;ChartMouseEventArgs&gt; MouseLeave;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartArea.MouseMove">
      <summary>
        Occurs when the cursor moves over the chart area.
      </summary>
      <signature>
        <code>public event Action&lt;ChartMouseEventArgs&gt; MouseMove;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartArea.MouseDown">
      <summary>
        Occurs when the left mouse button is pressed down.
      </summary>
      <signature>
        <code>public event Action&lt;ChartMouseEventArgs&gt; MouseDown;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartArea.MouseUp">
      <summary>
        Occurs when the left mouse button is released.
      </summary>
      <signature>
        <code>public event Action&lt;ChartMouseEventArgs&gt; MouseUp;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartArea.MouseWheel">
      <summary>
        Occurs when the mouse wheel button is rotated.
      </summary>
      <remarks>
      </remarks>
      <signature>
        <code>public event Action&lt;ChartMouseWheelEventArgs&gt; MouseWheel;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartArea.DragStart">
      <summary>
        Occurs when MouseDown event is happening on a chart area and a mouse is captured for dragging.
      </summary>
      <remarks>
      </remarks>
      <signature>
        <code>public event Action&lt;ChartDragEventArgs&gt; DragStart;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartArea.DragEnd">
      <summary>
        Occurs when mouse button is released while dragging a chart area or a chart area loses mouse capture.
      </summary>
      <remarks>
      </remarks>
      <signature>
        <code>public event Action&lt;ChartDragEventArgs&gt; DragEnd;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartArea.Drag">
      <summary>
        Occurs when dragging a chart area.
      </summary>
      <remarks>
      </remarks>
      <signature>
        <code>public event Action&lt;ChartDragEventArgs&gt; Drag;</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartArea.Width">
      <summary>
        Gets the width of the chart area.
      </summary>
      <signature>
        <code>public double Width { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartArea.Height">
      <summary>
        Gets the hight of the chart area.
      </summary>
      <signature>
        <code>public double Height { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartArea.BottomY">
      <summary>
        Gets the lowest visible Y-axis value.
      </summary>
      <signature>
        <code>public double BottomY { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartArea.TopY">
      <summary>
        Gets the highest visible Y-axis value.
      </summary>
      <signature>
        <code>public double TopY { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.SetYRange(System.Double,System.Double)">
      <summary>
        Sets the Y-axis lowest and highest values range. Allows scrolling the chart by the Y-axis. If only one of the
        values is set, then the chart will be expanded regarding the lowest or highest value respectively.
      </summary>
      <param name="bottomY">The lowest visible Y-axis value.</param>
      <param name="topY">The highest visible Y-axis value.</param>
      <signature>
        <code>public void SetYRange(double bottomY, double topY)</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartArea.SizeChanged">
      <summary>
        Occurs when the chart area size has changed.
      </summary>
      <signature>
        <code>public event Action&lt;ChartSizeEventArgs&gt; SizeChanged;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartArea.ScrollChanged">
      <summary>
        Occurs when the X-axis position value or the Y-axis position value changes while scrolling.
      </summary>
      <signature>
        <code>public event Action&lt;ChartScrollEventArgs&gt; ScrollChanged;</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartArea.Objects">
      <summary>
        Gets the chart objects collection.
      </summary>
      <signature>
        <code>public IReadonlyList&lt;ChartObject&gt; Objects { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartArea.SelectedObjects">
      <summary>
        Gets the list of currently selected objects if any.
      </summary>
      <signature>
        <code>public IReadonlyList&lt;ChartObject&gt; SelectedObjects { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.FindAllObjects``1">
      <summary>
        Finds all the chart objects of the specified type.
      </summary>
      <typeparam name="T">
      </typeparam>
      <returns>T[].</returns>
      <signature>
        <code>public T[] FindAllObjects()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.FindAllObjects(cAlgo.API.ChartObjectType)">
      <summary>
        Finds all the chart objects of the specified type.
      </summary>
      <param name="objectType">Type of the object.</param>
      <returns>ChartObject[].</returns>
      <signature>
        <code>public ChartObject[] FindAllObjects(ChartObjectType objectType)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.FindObject(System.String)">
      <summary>
        Finds the chart object of the specified name.
      </summary>
      <param name="objectName">The name of the object.</param>
      <returns>
        ChartObject.
      </returns>
      <example>
        <code>
          // Draw a horizontal line.
          Chart.DrawHorizontalLine("hLine", Symbol.Ask, Color.Red);

          // Find the line that was drawn.
          var obj = Chart.FindObject("hLine");
          Print("Found object with name {0}", obj.Name);
        </code>
      </example>
      <signature>
        <code>public ChartObject FindObject(string objectName)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.RemoveObject(System.String)">
      <summary>
        Removes the chart object of the specified name.
      </summary>
      <param name="objectName">The name of the object.</param>
      <signature>
        <code>public void RemoveObject(string objectName)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.RemoveAllObjects">
      <summary>
        Removes all interactive and non-interactive objects available for the cBot or Indicator.
      </summary>
      <signature>
        <code>public void RemoveAllObjects()</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartArea.ObjectsAdded">
      <summary>
        Occurs when one or several chart objects are added to the chart area.
      </summary>
      <signature>
        <code>public event Action&lt;ChartObjectsAddedEventArgs&gt; ObjectsAdded;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartArea.ObjectsUpdated">
      <summary>
        Occurs when one or several chart objects are updated.
      </summary>
      <signature>
        <code>public event Action&lt;ChartObjectsUpdatedEventArgs&gt; ObjectsUpdated;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartArea.ObjectsRemoved">
      <summary>
        Occurs when one or several chart object are removed from the chart area.
      </summary>
      <signature>
        <code>public event Action&lt;ChartObjectsRemovedEventArgs&gt; ObjectsRemoved;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartArea.ObjectsSelectionChanged">
      <summary>
        Occurs when chart objects are selected or deselected.
      </summary>
      <signature>
        <code>public event Action&lt;ChartObjectsSelectionChangedEventArgs&gt; ObjectsSelectionChanged;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartArea.ObjectHoverChanged">
      <summary>
        Occurs when the cursor hovers over or leaves the object.
      </summary>
      <signature>
        <code>public event Action&lt;ChartObjectHoverChangedEventArgs&gt; ObjectHoverChanged;</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawHorizontalLine(System.String,System.Double,cAlgo.API.Color)">
      <summary>
        Draws a horizontal line.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once on a chart area. If duplicated, the chart object
        will be replaced with a new one of the
        same name.
      </param>
      <param name="y">The Y-axis value of the line location.</param>
      <param name="color">The line color.</param>
      <returns>ChartHorizontalLine.</returns>
      <signature>
        <code>public ChartHorizontalLine DrawHorizontalLine(string name, double y, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawHorizontalLine(System.String,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws a horizontal line.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="y">The Y-axis value of the line location.</param>
      <param name="color">The line color.</param>
      <param name="thickness">The line thickness.</param>
      <returns>ChartHorizontalLine.</returns>
      <signature>
        <code>public ChartHorizontalLine DrawHorizontalLine(string name, double y, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawHorizontalLine(System.String,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws a horizontal line.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="y">The Y-axis value of the line location.</param>
      <param name="color">The line color.</param>
      <param name="thickness">The line thickness.</param>
      <param name="lineStyle">The line style.</param>
      <returns>ChartHorizontalLine.</returns>
      <signature>
        <code>public ChartHorizontalLine DrawHorizontalLine(string name, double y, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawVerticalLine(System.String,System.DateTime,cAlgo.API.Color)">
      <summary>
        Draws a vertical line.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time">The time value on the X-axis.</param>
      <param name="color">The line color.</param>
      <returns>ChartVerticalLine.</returns>
      <signature>
        <code>public ChartVerticalLine DrawVerticalLine(string name, DateTime time, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawVerticalLine(System.String,System.DateTime,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws a vertical line.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time">The time value of the line location on the X-axis.</param>
      <param name="color">The line color.</param>
      <param name="thickness">The line thickness.</param>
      <returns>ChartVerticalLine.</returns>
      <signature>
        <code>public ChartVerticalLine DrawVerticalLine(string name, DateTime time, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawVerticalLine(System.String,System.DateTime,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws a vertical line.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time">The time value of the line location on the X-axis.</param>
      <param name="color">The line color.</param>
      <param name="thickness">The line thickness.</param>
      <param name="lineStyle">The line style.</param>
      <returns>ChartVerticalLine.</returns>
      <signature>
        <code>public ChartVerticalLine DrawVerticalLine(string name, DateTime time, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawVerticalLine(System.String,System.Int32,cAlgo.API.Color)">
      <summary>
        Draws a vertical line.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex">The bar index of the line location on the X-axis.</param>
      <param name="color">The line color.</param>
      <returns>ChartVerticalLine.</returns>
      <signature>
        <code>public ChartVerticalLine DrawVerticalLine(string name, int barIndex, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawVerticalLine(System.String,System.Int32,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws a vertical line.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex">The bar index of the line location on the X-axis.</param>
      <param name="color">The line color.</param>
      <param name="thickness">The line thickness.</param>
      <returns>ChartVerticalLine.</returns>
      <signature>
        <code>public ChartVerticalLine DrawVerticalLine(string name, int barIndex, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawVerticalLine(System.String,System.Int32,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws a vertical line.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex">The bar index of the line location on the X-axis.</param>
      <param name="color">The line color.</param>
      <param name="thickness">The line thickness.</param>
      <param name="lineStyle">The line style.</param>
      <signature>
        <code>public ChartVerticalLine DrawVerticalLine(string name, int barIndex, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawTrendLine(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
      <summary>
        Draws a trend line.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the trend line start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the trend line start location.</param>
      <param name="time2">The time value of the trend line end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the trend line end location.</param>
      <param name="color">The color of the trend line.</param>
      <signature>
        <code>public ChartTrendLine DrawTrendLine(string name, DateTime time1, double y1, DateTime time2, double y2, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawTrendLine(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws a trend line.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the trend line start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the trend line start location.</param>
      <param name="time2">The time value of the trend line end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the trend line end location.</param>
      <param name="color">The color of the trend line.</param>
      <param name="thickness">The thickness of the trend line.</param>
      <signature>
        <code>public ChartTrendLine DrawTrendLine(string name, DateTime time1, double y1, DateTime time2, double y2, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawTrendLine(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws a trend line.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the trend line start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the trend line start location.</param>
      <param name="time2">The time value of the trend line end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the trend line end location.</param>
      <param name="color">The color of the trend line.</param>
      <param name="thickness">The thickness of the trend line.</param>
      <param name="lineStyle">The trend line style.</param>
      <signature>
        <code>public ChartTrendLine DrawTrendLine(string name, DateTime time1, double y1, DateTime time2, double y2, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawTrendLine(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
      <summary>
        Draws a trend line.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the trend line start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the trend line start location.</param>
      <param name="barIndex2">The bar index of the trend line end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the trend line end location.</param>
      <param name="color">The color of the trend line.</param>
      <signature>
        <code>public ChartTrendLine DrawTrendLine(string name, int barIndex1, double y1, int barIndex2, double y2, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawTrendLine(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws a trend line.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the trend line start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the trend line start location.</param>
      <param name="barIndex2">The bar index of the trend line end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the trend line end location.</param>
      <param name="color">The color of the trend line.</param>
      <param name="thickness">The thickness of the trend line.</param>
      <signature>
        <code>public ChartTrendLine DrawTrendLine(string name, int barIndex1, double y1, int barIndex2, double y2, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawTrendLine(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws a trend line.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the trend line start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the trend line start location.</param>
      <param name="barIndex2">The bar index of the trend line end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the trend line end location.</param>
      <param name="color">The color of the trend line.</param>
      <param name="thickness">The thickness of the trend line.</param>
      <param name="lineStyle">The trend line style.</param>
      <signature>
        <code>public ChartTrendLine DrawTrendLine(string name, int barIndex1, double y1, int barIndex2, double y2, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawEquidistantChannel(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.Double,cAlgo.API.Color)">
      <summary>
        Draws an equidistant channel.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the equidistant channel start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the equidistant channel start location.</param>
      <param name="time2">The time value of the equidistant channel end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the equidistant channel end location.</param>
      <param name="channelHeight">The equidistant channel hight in pips.</param>
      <param name="color">The color of the equidistant channel lines.</param>
      <returns>
      </returns>
      <signature>
        <code>public ChartEquidistantChannel DrawEquidistantChannel(string name, DateTime time1, double y1, DateTime time2, double y2, double channelHeight, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawEquidistantChannel(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws an equidistant channel.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the equidistant channel start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the equidistant channel start location.</param>
      <param name="time2">The time value of the equidistant channel end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the equidistant channel end location.</param>
      <param name="channelHeight">The equidistant channel hight in pips.</param>
      <param name="color">The color of the equidistant channel lines.</param>
      <param name="thickness">The thickness of the equidistant channel lines.</param>
      <returns>
      </returns>
      <signature>
        <code>public ChartEquidistantChannel DrawEquidistantChannel(string name, DateTime time1, double y1, DateTime time2, double y2, double channelHeight, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawEquidistantChannel(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws an equidistant channel.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the equidistant channel start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the equidistant channel start location.</param>
      <param name="time2">The time value of the equidistant channel end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the equidistant channel end location.</param>
      <param name="channelHeight">The equidistant channel hight in pips.</param>
      <param name="color">The color of the equidistant channel lines.</param>
      <param name="thickness">The thickness of the equidistant channel lines.</param>
      <param name="lineStyle">The equidistant channel lines style.</param>
      <returns>
      </returns>
      <signature>
        <code>public ChartEquidistantChannel DrawEquidistantChannel(string name, DateTime time1, double y1, DateTime time2, double y2, double channelHeight, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawEquidistantChannel(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Double,cAlgo.API.Color)">
      <summary>
        Draws an equidistant channel.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the equidistant channel start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the equidistant channel start location.</param>
      <param name="barIndex2">The bar index of the equidistant channel end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the equidistant channel end location.</param>
      <param name="channelHeight">The equidistant channel hight in pips.</param>
      <param name="color">The color of the equidistant channel lines.</param>
      <returns>
      </returns>
      <signature>
        <code>public ChartEquidistantChannel DrawEquidistantChannel(string name, int barIndex1, double y1, int barIndex2, double y2, double channelHeight, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawEquidistantChannel(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws an equidistant channel.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the equidistant channel start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the equidistant channel start location.</param>
      <param name="barIndex2">The bar index of the equidistant channel end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the equidistant channel end location.</param>
      <param name="channelHeight">The equidistant channel hight in pips.</param>
      <param name="color">The color of the equidistant channel lines.</param>
      <param name="thickness">The thickness of the equidistant channel lines.</param>
      <returns>
      </returns>
      <signature>
        <code>public ChartEquidistantChannel DrawEquidistantChannel(string name, int barIndex1, double y1, int barIndex2, double y2, double channelHeight, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawEquidistantChannel(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws an equidistant channel.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the equidistant channel start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the equidistant channel start location.</param>
      <param name="barIndex2">The bar index of the equidistant channel end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the equidistant channel end location.</param>
      <param name="channelHeight">The equidistant channel hight in pips.</param>
      <param name="color">The color of the equidistant channel lines.</param>
      <param name="thickness">The thickness of the equidistant channel lines.</param>
      <param name="lineStyle">The equidistant channel lines style.</param>
      <returns>ChartEquidistantChannel.</returns>
      <signature>
        <code>public ChartEquidistantChannel DrawEquidistantChannel(string name, int barIndex1, double y1, int barIndex2, double y2, double channelHeight, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawText(System.String,System.String,System.DateTime,System.Double,cAlgo.API.Color)">
      <summary>
        Draws the text.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used
        once for a chart area. If duplicated, the chart object will be replaced with a
        new one of the same name.
      </param>
      <param name="text">The text content.</param>
      <param name="time">
        The time value of the text object location on the
        X-axis.
      </param>
      <param name="y">The Y-axis value of the text object location.</param>
      <param name="color">The color of the text.</param>
      <returns>
        ChartText.
      </returns>
      <example>
        <code>
          // Draw the text on the last bar high.
          var highPrice = MarketSeries.High.LastValue;
          var openTime = MarketSeries.OpenTime.LastValue;
          var text = Chart.DrawText("text1", "High is here", openTime, highPrice, Color.Red);
          text.VerticalAlignment = VerticalAlignment.Bottom;
          text.HorizontalAlignment = HorizontalAlignment.Center;
        </code>
      </example>
      <signature>
        <code>public ChartText DrawText(string name, string text, DateTime time, double y, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawText(System.String,System.String,System.Int32,System.Double,cAlgo.API.Color)">
      <summary>
        Draws the text.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="text">The text content.</param>
      <param name="barIndex">The bar index of the text object location on the X-axis.</param>
      <param name="y">The Y-axis value of the text object location.</param>
      <param name="color">The color of the text.</param>
      <returns>ChartText.</returns>
      <signature>
        <code>public ChartText DrawText(string name, string text, int barIndex, double y, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawStaticText(System.String,System.String,cAlgo.API.VerticalAlignment,cAlgo.API.HorizontalAlignment,cAlgo.API.Color)">
      <summary>
        Draws the static text.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="text">The text content.</param>
      <param name="verticalAlignment">The vertical alignment.</param>
      <param name="horizontalAlignment">The horizontal alignment.</param>
      <param name="color">The color of the text.</param>
      <returns>
      </returns>
      <signature>
        <code>public ChartStaticText DrawStaticText(string name, string text, VerticalAlignment verticalAlignment, HorizontalAlignment horizontalAlignment, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawIcon(System.String,cAlgo.API.ChartIconType,System.DateTime,System.Double,cAlgo.API.Color)">
      <summary>
        Draws an icon.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="iconType">The type of the icon.</param>
      <param name="time">The time value of the icon location on the X-axis.</param>
      <param name="y">The Y-axis value of the icon location.</param>
      <param name="color">The color of the icon.</param>
      <returns>ChartIcon.</returns>
      <signature>
        <code>public ChartIcon DrawIcon(string name, ChartIconType iconType, DateTime time, double y, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawIcon(System.String,cAlgo.API.ChartIconType,System.Int32,System.Double,cAlgo.API.Color)">
      <summary>
        Draws an icon.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used
        once for a chart area. If duplicated, the chart object will be replaced with a
        new one of the same name.
      </param>
      <param name="iconType">Type of the icon.</param>
      <param name="barIndex">The bar index of the icon location on the X-axis.</param>
      <param name="y">The Y-axis value of the icon location.</param>
      <param name="color">The color of the icon.</param>
      <returns>
        ChartIcon.
      </returns>
      <example>
        <code>
          <![CDATA[
            // Draw an icon on the last bar high.
            
            ]]>
        </code>
      </example>
      <signature>
        <code>public ChartIcon DrawIcon(string name, ChartIconType iconType, int barIndex, double y, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciRetracement(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
      <summary>
        Draws a Fibonacci retracement.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the Fibonacci retracement start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci retracement start point location.</param>
      <param name="time2">The time value of the Fibonacci retracement end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Fibonacci retracement end point location.</param>
      <param name="color">The Fibonacci retracement lines color.</param>
      <returns>ChartFibonacciRetracement.</returns>
      <signature>
        <code>public ChartFibonacciRetracement DrawFibonacciRetracement(string name, DateTime time1, double y1, DateTime time2, double y2, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciRetracement(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws a Fibonacci retracement.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the Fibonacci retracement start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci retracement start point location.</param>
      <param name="time2">The time value of the Fibonacci retracement end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Fibonacci retracement end point location.</param>
      <param name="color">The Fibonacci retracement lines color.</param>
      <param name="thickness">The Fibonacci retracement lines thickness.</param>
      <returns>ChartFibonacciRetracement.</returns>
      <signature>
        <code>public ChartFibonacciRetracement DrawFibonacciRetracement(string name, DateTime time1, double y1, DateTime time2, double y2, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciRetracement(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws a Fibonacci retracement.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the Fibonacci retracement start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci retracement start point location.</param>
      <param name="time2">The time value of the Fibonacci retracement end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Fibonacci retracement end point location.</param>
      <param name="color">The Fibonacci retracement lines color.</param>
      <param name="thickness">The Fibonacci retracement lines thickness.</param>
      <param name="lineStyle">The Fibonacci retracement lines style.</param>
      <returns>ChartFibonacciRetracement.</returns>
      <signature>
        <code>public ChartFibonacciRetracement DrawFibonacciRetracement(string name, DateTime time1, double y1, DateTime time2, double y2, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciRetracement(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
      <summary>
        Draws a Fibonacci retracement.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the Fibonacci retracement start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci retracement start point location.</param>
      <param name="barIndex2">The bar index of the Fibonacci retracement end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Fibonacci retracement end point location.</param>
      <param name="color">The Fibonacci retracement lines color.</param>
      <returns>ChartFibonacciRetracement.</returns>
      <signature>
        <code>public ChartFibonacciRetracement DrawFibonacciRetracement(string name, int barIndex1, double y1, int barIndex2, double y2, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciRetracement(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws a Fibonacci retracement.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the Fibonacci retracement start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci retracement start point location.</param>
      <param name="barIndex2">The bar index of the Fibonacci retracement end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Fibonacci retracement end point location.</param>
      <param name="color">The Fibonacci retracement lines color.</param>
      <param name="thickness">The Fibonacci retracement lines thickness.</param>
      <returns>ChartFibonacciRetracement.</returns>
      <signature>
        <code>public ChartFibonacciRetracement DrawFibonacciRetracement(string name, int barIndex1, double y1, int barIndex2, double y2, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciRetracement(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws a Fibonacci retracement.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the Fibonacci retracement start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci retracement start point location.</param>
      <param name="barIndex2">The bar index of the Fibonacci retracement end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Fibonacci retracement end point location.</param>
      <param name="color">The Fibonacci retracement lines color.</param>
      <param name="thickness">The Fibonacci retracement lines thickness.</param>
      <param name="lineStyle">The Fibonacci retracement lines style.</param>
      <returns>ChartFibonacciRetracement.</returns>
      <signature>
        <code>public ChartFibonacciRetracement DrawFibonacciRetracement(string name, int barIndex1, double y1, int barIndex2, double y2, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciExpansion(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
      <summary>
        Draws a Fibonacci expansion.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the Fibonacci expansion start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci expansion start point location.</param>
      <param name="time2">The time value of the Fibonacci expansion central point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Fibonacci expansion central point location.</param>
      <param name="time3">The time value of the Fibonacci expansion end point location on the X-axis.</param>
      <param name="y3">The Y-axis value of the Fibonacci expansion end point location.</param>
      <param name="color">The Fibonacci expansion lines color.</param>
      <returns>ChartFibonacciExpansion.</returns>
      <signature>
        <code>public ChartFibonacciExpansion DrawFibonacciExpansion(string name, DateTime time1, double y1, DateTime time2, double y2, DateTime time3, double y3, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciExpansion(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws a Fibonacci expansion.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the Fibonacci expansion start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci expansion start point location.</param>
      <param name="time2">The time value of the Fibonacci expansion central point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Fibonacci expansion central point location.</param>
      <param name="time3">The time value of the Fibonacci expansion end point location on the X-axis.</param>
      <param name="y3">The Y-axis value of the Fibonacci expansion end point location.</param>
      <param name="color">The Fibonacci expansion lines color.</param>
      <param name="thickness">The Fibonacci expansion lines thickness.</param>
      <returns>ChartFibonacciExpansion.</returns>
      <signature>
        <code>public ChartFibonacciExpansion DrawFibonacciExpansion(string name, DateTime time1, double y1, DateTime time2, double y2, DateTime time3, double y3, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciExpansion(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws a Fibonacci expansion.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the Fibonacci expansion start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci expansion start point location.</param>
      <param name="time2">The time value of the Fibonacci expansion central point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Fibonacci expansion central point location.</param>
      <param name="time3">The time value of the Fibonacci expansion end point location on the X-axis.</param>
      <param name="y3">The Y-axis value of the Fibonacci expansion end point location.</param>
      <param name="color">The Fibonacci expansion lines color.</param>
      <param name="thickness">The Fibonacci expansion lines thickness.</param>
      <param name="lineStyle">The Fibonacci expansion lines style.</param>
      <returns>ChartFibonacciExpansion.</returns>
      <signature>
        <code>public ChartFibonacciExpansion DrawFibonacciExpansion(string name, DateTime time1, double y1, DateTime time2, double y2, DateTime time3, double y3, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciExpansion(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
      <summary>
        Draws a Fibonacci expansion.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the Fibonacci expansion start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci expansion start point location.</param>
      <param name="barIndex2">The bar index of the Fibonacci expansion central point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Fibonacci expansion central point location.</param>
      <param name="barIndex3">The bar index of the Fibonacci expansion end point location on the X-axis.</param>
      <param name="y3">The Y-axis value of the Fibonacci expansion end point location.</param>
      <param name="color">The Fibonacci expansion lines color.</param>
      <returns>ChartFibonacciExpansion.</returns>
      <signature>
        <code>public ChartFibonacciExpansion DrawFibonacciExpansion(string name, int barIndex1, double y1, int barIndex2, double y2, int barIndex3, double y3, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciExpansion(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws a Fibonacci expansion.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the Fibonacci expansion start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci expansion start point location.</param>
      <param name="barIndex2">The bar index of the Fibonacci expansion central point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Fibonacci expansion central point location.</param>
      <param name="barIndex3">The bar index of the Fibonacci expansion end point location on the X-axis.</param>
      <param name="y3">The Y-axis value of the Fibonacci expansion end point location.</param>
      <param name="color">The Fibonacci expansion lines color.</param>
      <param name="thickness">The Fibonacci expansion lines thickness.</param>
      <returns>ChartFibonacciExpansion.</returns>
      <signature>
        <code>public ChartFibonacciExpansion DrawFibonacciExpansion(string name, int barIndex1, double y1, int barIndex2, double y2, int barIndex3, double y3, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciExpansion(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws a Fibonacci expansion.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the Fibonacci expansion start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci expansion start point location.</param>
      <param name="barIndex2">The bar index of the Fibonacci expansion central point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Fibonacci expansion central point location.</param>
      <param name="barIndex3">The bar index of the Fibonacci expansion end point location on the X-axis.</param>
      <param name="y3">The Y-axis value of the Fibonacci expansion end point location.</param>
      <param name="color">The Fibonacci expansion lines color.</param>
      <param name="thickness">The Fibonacci expansion lines thickness.</param>
      <param name="lineStyle">The Fibonacci expansion lines style.</param>
      <returns>ChartFibonacciExpansion.</returns>
      <signature>
        <code>public ChartFibonacciExpansion DrawFibonacciExpansion(string name, int barIndex1, double y1, int barIndex2, double y2, int barIndex3, double y3, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciFan(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
      <summary>
        Draws a Fibonacci fan.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the Fibonacci fan start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci fan start point location.</param>
      <param name="time2">The time value of the Fibonacci fan end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Fibonacci fan end point location.</param>
      <param name="color">The Fibonacci fan lines color.</param>
      <returns>ChartFibonacciFan.</returns>
      <signature>
        <code>public ChartFibonacciFan DrawFibonacciFan(string name, DateTime time1, double y1, DateTime time2, double y2, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciFan(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws a Fibonacci fan.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the Fibonacci fan start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci fan start point location.</param>
      <param name="time2">The time value of the Fibonacci fan end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Fibonacci fan end point location.</param>
      <param name="color">The Fibonacci fan lines color.</param>
      <param name="thickness">The Fibonacci fan lines thickness.</param>
      <returns>ChartFibonacciFan.</returns>
      <signature>
        <code>public ChartFibonacciFan DrawFibonacciFan(string name, DateTime time1, double y1, DateTime time2, double y2, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciFan(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws a Fibonacci fan.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the Fibonacci fan start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci fan start point location.</param>
      <param name="time2">The time value of the Fibonacci fan end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Fibonacci fan end point location.</param>
      <param name="color">The Fibonacci fan lines color.</param>
      <param name="thickness">The Fibonacci fan lines thickness.</param>
      <param name="lineStyle">The Fibonacci fan lines style.</param>
      <returns>ChartFibonacciFan.</returns>
      <signature>
        <code>public ChartFibonacciFan DrawFibonacciFan(string name, DateTime time1, double y1, DateTime time2, double y2, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciFan(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
      <summary>
        Draws a Fibonacci fan.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the Fibonacci fan start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci fan start point location.</param>
      <param name="barIndex2">The Y-axis value of the Fibonacci fan end point location.</param>
      <param name="y2">The Y-axis value of the Fibonacci fan end point location.</param>
      <param name="color">The Fibonacci fan lines color.</param>
      <returns>ChartFibonacciFan.</returns>
      <signature>
        <code>public ChartFibonacciFan DrawFibonacciFan(string name, int barIndex1, double y1, int barIndex2, double y2, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciFan(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws a Fibonacci fan.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the Fibonacci fan start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci fan start point location.</param>
      <param name="barIndex2">The Y-axis value of the Fibonacci fan end point location.</param>
      <param name="y2">The Y-axis value of the Fibonacci fan end point location.</param>
      <param name="color">The Fibonacci fan lines color.</param>
      <param name="thickness">The Fibonacci fan lines thickness.</param>
      <returns>ChartFibonacciFan.</returns>
      <signature>
        <code>public ChartFibonacciFan DrawFibonacciFan(string name, int barIndex1, double y1, int barIndex2, double y2, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciFan(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws a Fibonacci fan.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the Fibonacci fan start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci fan start point location.</param>
      <param name="barIndex2">The Y-axis value of the Fibonacci fan end point location.</param>
      <param name="y2">The Y-axis value of the Fibonacci fan end point location.</param>
      <param name="color">The Fibonacci fan lines color.</param>
      <param name="thickness">The Fibonacci fan lines thickness.</param>
      <param name="lineStyle">The Fibonacci fan lines style.</param>
      <returns>ChartFibonacciFan.</returns>
      <signature>
        <code>public ChartFibonacciFan DrawFibonacciFan(string name, int barIndex1, double y1, int barIndex2, double y2, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciTimezones(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
      <summary>
        Draws a Fibonacci timezones.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the Fibonacci timezones start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci timezones start point location.</param>
      <param name="time2">The time value of the Fibonacci timezones end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Fibonacci timezones end point location.</param>
      <param name="color">The Fibonacci timezones lines color.</param>
      <returns>ChartFibonacciTimezones.</returns>
      <signature>
        <code>public ChartFibonacciTimezones DrawFibonacciTimezones(string name, DateTime time1, double y1, DateTime time2, double y2, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciTimezones(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws a Fibonacci timezones.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the Fibonacci timezones start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci timezones start point location.</param>
      <param name="time2">The time value of the Fibonacci timezones end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Fibonacci timezones end point location.</param>
      <param name="color">The Fibonacci timezones lines color.</param>
      <param name="thickness">The Fibonacci timezones lines thickness.</param>
      <returns>ChartFibonacciTimezones.</returns>
      <signature>
        <code>public ChartFibonacciTimezones DrawFibonacciTimezones(string name, DateTime time1, double y1, DateTime time2, double y2, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciTimezones(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws a Fibonacci timezones.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the Fibonacci timezones start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci timezones start point location.</param>
      <param name="time2">The time value of the Fibonacci timezones end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Fibonacci timezones end point location.</param>
      <param name="color">The Fibonacci timezones lines color.</param>
      <param name="thickness">The Fibonacci timezones lines thickness.</param>
      <param name="lineStyle">The Fibonacci timezones lines style.</param>
      <returns>ChartFibonacciTimezones.</returns>
      <signature>
        <code>public ChartFibonacciTimezones DrawFibonacciTimezones(string name, DateTime time1, double y1, DateTime time2, double y2, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciTimezones(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
      <summary>
        Draws a Fibonacci timezones.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the Fibonacci timezones start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci timezones start point location.</param>
      <param name="barIndex2">The Y-axis value of the Fibonacci timezones end point location.</param>
      <param name="y2">The Y-axis value of the Fibonacci timezones end point location.</param>
      <param name="color">The Fibonacci timezones lines color.</param>
      <returns>ChartFibonacciTimezones.</returns>
      <signature>
        <code>public ChartFibonacciTimezones DrawFibonacciTimezones(string name, int barIndex1, double y1, int barIndex2, double y2, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciTimezones(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws a Fibonacci timezones.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the Fibonacci timezones start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci timezones start point location.</param>
      <param name="barIndex2">The Y-axis value of the Fibonacci timezones end point location.</param>
      <param name="y2">The Y-axis value of the Fibonacci timezones end point location.</param>
      <param name="color">The Fibonacci timezones lines color.</param>
      <param name="thickness">The Fibonacci timezones lines thickness.</param>
      <returns>ChartFibonacciTimezones.</returns>
      <signature>
        <code>public ChartFibonacciTimezones DrawFibonacciTimezones(string name, int barIndex1, double y1, int barIndex2, double y2, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawFibonacciTimezones(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws a Fibonacci timezones.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the Fibonacci timezones start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Fibonacci timezones start point location.</param>
      <param name="barIndex2">The Y-axis value of the Fibonacci timezones end point location.</param>
      <param name="y2">The Y-axis value of the Fibonacci timezones end point location.</param>
      <param name="color">The Fibonacci timezones lines color.</param>
      <param name="thickness">The Fibonacci timezones lines thickness.</param>
      <param name="lineStyle">The Fibonacci timezones lines style.</param>
      <returns>ChartFibonacciTimezones.</returns>
      <signature>
        <code>public ChartFibonacciTimezones DrawFibonacciTimezones(string name, int barIndex1, double y1, int barIndex2, double y2, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawAndrewsPitchfork(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
      <summary>
        Draws an Andrew's pitchfork.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the Andrew's pitchfork point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Andrew's pitchfork point 1 location.</param>
      <param name="time2">The time value of the Andrew's pitchfork point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Andrew's pitchfork point 2 location.</param>
      <param name="time3">The time value of the Andrew's pitchfork point 3 location on the X-axis.</param>
      <param name="y3">The Y-axis value of the Andrew's pitchfork point 3 location.</param>
      <param name="color">The Andrew's pitchfork lines color.</param>
      <returns>ChartAndrewsPitchfork.</returns>
      <signature>
        <code>public ChartAndrewsPitchfork DrawAndrewsPitchfork(string name, DateTime time1, double y1, DateTime time2, double y2, DateTime time3, double y3, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawAndrewsPitchfork(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws an Andrew's pitchfork.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the Andrew's pitchfork point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Andrew's pitchfork point 1 location.</param>
      <param name="time2">The time value of the Andrew's pitchfork point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Andrew's pitchfork point 2 location.</param>
      <param name="time3">The time value of the Andrew's pitchfork point 3 location on the X-axis.</param>
      <param name="y3">The Y-axis value of the Andrew's pitchfork point 3 location.</param>
      <param name="color">The Andrew's pitchfork lines color.</param>
      <param name="thickness">The Andrew's pitchfork lines thickness.</param>
      <returns>ChartAndrewsPitchfork.</returns>
      <signature>
        <code>public ChartAndrewsPitchfork DrawAndrewsPitchfork(string name, DateTime time1, double y1, DateTime time2, double y2, DateTime time3, double y3, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawAndrewsPitchfork(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws an Andrew's pitchfork.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the Andrew's pitchfork point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Andrew's pitchfork point 1 location.</param>
      <param name="time2">The time value of the Andrew's pitchfork point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Andrew's pitchfork point 2 location.</param>
      <param name="time3">The time value of the Andrew's pitchfork point 3 location on the X-axis.</param>
      <param name="y3">The Y-axis value of the Andrew's pitchfork point 3 location.</param>
      <param name="color">The Andrew's pitchfork lines color.</param>
      <param name="thickness">The Andrew's pitchfork lines thickness.</param>
      <param name="lineStyle">The Andrew's pitchfork lines style.</param>
      <returns>ChartAndrewsPitchfork.</returns>
      <signature>
        <code>public ChartAndrewsPitchfork DrawAndrewsPitchfork(string name, DateTime time1, double y1, DateTime time2, double y2, DateTime time3, double y3, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawAndrewsPitchfork(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
      <summary>
        Draws an Andrew's pitchfork.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the Andrew's pitchfork point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Andrew's pitchfork point 1 location.</param>
      <param name="barIndex2">The bar index of the Andrew's pitchfork point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Andrew's pitchfork point 2 location.</param>
      <param name="barIndex3">The bar index of the Andrew's pitchfork point 3 location on the X-axis.</param>
      <param name="y3">The Y-axis value of the Andrew's pitchfork point 3 location.</param>
      <param name="color">The Andrew's pitchfork lines color.</param>
      <returns>ChartAndrewsPitchfork.</returns>
      <signature>
        <code>public ChartAndrewsPitchfork DrawAndrewsPitchfork(string name, int barIndex1, double y1, int barIndex2, double y2, int barIndex3, double y3, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawAndrewsPitchfork(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws an Andrews pitchfork.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the Andrew's pitchfork point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Andrew's pitchfork point 1 location.</param>
      <param name="barIndex2">The bar index of the Andrew's pitchfork point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Andrew's pitchfork point 2 location.</param>
      <param name="barIndex3">The bar index of the Andrew's pitchfork point 3 location on the X-axis.</param>
      <param name="y3">The Y-axis value of the Andrew's pitchfork point 3 location.</param>
      <param name="color">The Andrew's pitchfork lines color.</param>
      <param name="thickness">The Andrew's pitchfork lines thickness.</param>
      <returns>ChartAndrewsPitchfork.</returns>
      <signature>
        <code>public ChartAndrewsPitchfork DrawAndrewsPitchfork(string name, int barIndex1, double y1, int barIndex2, double y2, int barIndex3, double y3, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawAndrewsPitchfork(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws an Andrew's pitchfork.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the Andrew's pitchfork point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the Andrew's pitchfork point 1 location.</param>
      <param name="barIndex2">The bar index of the Andrew's pitchfork point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the Andrew's pitchfork point 2 location.</param>
      <param name="barIndex3">The bar index of the Andrew's pitchfork point 3 location on the X-axis.</param>
      <param name="y3">The Y-axis value of the Andrew's pitchfork point 3 location.</param>
      <param name="color">The Andrew's pitchfork lines color.</param>
      <param name="thickness">The Andrew's pitchfork lines thickness.</param>
      <param name="lineStyle">The Andrew's pitchfork lines style.</param>
      <returns>ChartAndrewsPitchfork.</returns>
      <signature>
        <code>public ChartAndrewsPitchfork DrawAndrewsPitchfork(string name, int barIndex1, double y1, int barIndex2, double y2, int barIndex3, double y3, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawRectangle(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
      <summary>
        Draws a rectangle.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the rectangle point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the rectangle point 1 location.</param>
      <param name="time2">The time value of the rectangle point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the rectangle point 2 location.</param>
      <param name="color">The rectangle lines color.</param>
      <returns>ChartRectangle.</returns>
      <signature>
        <code>public ChartRectangle DrawRectangle(string name, DateTime time1, double y1, DateTime time2, double y2, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawRectangle(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws a rectangle.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the rectangle point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the rectangle point 1 location.</param>
      <param name="time2">The time value of the rectangle point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the rectangle point 2 location.</param>
      <param name="color">The rectangle lines color.</param>
      <param name="thickness">The rectangle lines thickness.</param>
      <returns>ChartRectangle.</returns>
      <signature>
        <code>public ChartRectangle DrawRectangle(string name, DateTime time1, double y1, DateTime time2, double y2, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawRectangle(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws a rectangle.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the rectangle point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the rectangle point 1 location.</param>
      <param name="time2">The time value of the rectangle point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the rectangle point 2 location.</param>
      <param name="color">The rectangle lines color.</param>
      <param name="thickness">The rectangle lines thickness.</param>
      <param name="lineStyle">The rectangle lines style.</param>
      <returns>ChartRectangle.</returns>
      <signature>
        <code>public ChartRectangle DrawRectangle(string name, DateTime time1, double y1, DateTime time2, double y2, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawRectangle(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
      <summary>
        Draws a rectangle.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the rectangle point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the rectangle point 1 location.</param>
      <param name="barIndex2">The bar index of the rectangle point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the rectangle point 2 location.</param>
      <param name="color">The rectangle lines color.</param>
      <returns>ChartRectangle.</returns>
      <signature>
        <code>public ChartRectangle DrawRectangle(string name, int barIndex1, double y1, int barIndex2, double y2, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawRectangle(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws a rectangle.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the rectangle point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the rectangle point 1 location.</param>
      <param name="barIndex2">The bar index of the rectangle point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the rectangle point 2 location.</param>
      <param name="color">The rectangle lines color.</param>
      <param name="thickness">The rectangle lines thickness.</param>
      <returns>ChartRectangle.</returns>
      <signature>
        <code>public ChartRectangle DrawRectangle(string name, int barIndex1, double y1, int barIndex2, double y2, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawRectangle(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws a rectangle.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the rectangle point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the rectangle point 1 location.</param>
      <param name="barIndex2">The bar index of the rectangle point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the rectangle point 2 location.</param>
      <param name="color">The rectangle lines color.</param>
      <param name="thickness">The rectangle lines thickness.</param>
      <param name="lineStyle">The rectangle lines style.</param>
      <returns>ChartRectangle.</returns>
      <signature>
        <code>public ChartRectangle DrawRectangle(string name, int barIndex1, double y1, int barIndex2, double y2, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawEllipse(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
      <summary>
        Draws an ellipse.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the ellipse point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the ellipse point 1 location.</param>
      <param name="time2">The time value of the ellipse point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the ellipse point 2 location.</param>
      <param name="color">The ellipse line color.</param>
      <returns>ChartEllipse.</returns>
      <signature>
        <code>public ChartEllipse DrawEllipse(string name, DateTime time1, double y1, DateTime time2, double y2, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawEllipse(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws an ellipse.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the ellipse point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the ellipse point 1 location.</param>
      <param name="time2">The time value of the ellipse point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the ellipse point 2 location.</param>
      <param name="color">The ellipse line color.</param>
      <param name="thickness">The ellipse line thickness.</param>
      <returns>ChartEllipse.</returns>
      <signature>
        <code>public ChartEllipse DrawEllipse(string name, DateTime time1, double y1, DateTime time2, double y2, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawEllipse(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws an ellipse.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the ellipse point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the ellipse point 1 location.</param>
      <param name="time2">The time value of the ellipse point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the ellipse point 2 location.</param>
      <param name="color">The ellipse line color.</param>
      <param name="thickness">The ellipse line thickness.</param>
      <param name="lineStyle">The ellipse line style.</param>
      <returns>ChartEllipse.</returns>
      <signature>
        <code>public ChartEllipse DrawEllipse(string name, DateTime time1, double y1, DateTime time2, double y2, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawEllipse(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
      <summary>
        Draws an ellipse.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the ellipse point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the ellipse point 1 location.</param>
      <param name="barIndex2">The bar index of the ellipse point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the ellipse point 2 location.</param>
      <param name="color">The ellipse line color.</param>
      <returns>ChartEllipse.</returns>
      <signature>
        <code>public ChartEllipse DrawEllipse(string name, int barIndex1, double y1, int barIndex2, double y2, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawEllipse(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws an ellipse.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the ellipse point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the ellipse point 1 location.</param>
      <param name="barIndex2">The bar index of the ellipse point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the ellipse point 2 location.</param>
      <param name="color">The ellipse line color.</param>
      <param name="thickness">The ellipse line thickness.</param>
      <returns>ChartEllipse.</returns>
      <signature>
        <code>public ChartEllipse DrawEllipse(string name, int barIndex1, double y1, int barIndex2, double y2, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawEllipse(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws an ellipse.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the ellipse point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the ellipse point 1 location.</param>
      <param name="barIndex2">The bar index of the ellipse point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the ellipse point 2 location.</param>
      <param name="color">The ellipse line color.</param>
      <param name="thickness">The ellipse line thickness.</param>
      <param name="lineStyle">The ellipse line style.</param>
      <returns>ChartEllipse.</returns>
      <signature>
        <code>public ChartEllipse DrawEllipse(string name, int barIndex1, double y1, int barIndex2, double y2, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawTriangle(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
      <summary>
        Draws a triangle.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the triangle point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the triangle point 1 location.</param>
      <param name="time2">The time value of the triangle point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the triangle point 2 location.</param>
      <param name="time3">The time value of the triangle point 3 location on the X-axis.</param>
      <param name="y3">The Y-axis value of the triangle point 3 location.</param>
      <param name="color">The triangle line color.</param>
      <returns>ChartTriangle.</returns>
      <signature>
        <code>public ChartTriangle DrawTriangle(string name, DateTime time1, double y1, DateTime time2, double y2, DateTime time3, double y3, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawTriangle(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws a triangle.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the triangle point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the triangle point 1 location.</param>
      <param name="time2">The time value of the triangle point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the triangle point 2 location.</param>
      <param name="time3">The time value of the triangle point 3 location on the X-axis.</param>
      <param name="y3">The Y-axis value of the triangle point 3 location.</param>
      <param name="color">The triangle line color.</param>
      <param name="thickness">The triangle line thickness.</param>
      <returns>ChartTriangle.</returns>
      <signature>
        <code>public ChartTriangle DrawTriangle(string name, DateTime time1, double y1, DateTime time2, double y2, DateTime time3, double y3, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawTriangle(System.String,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws a triangle.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the triangle point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the triangle point 1 location.</param>
      <param name="time2">The time value of the triangle point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the triangle point 2 location.</param>
      <param name="time3">The time value of the triangle point 3 location on the X-axis.</param>
      <param name="y3">The Y-axis value of the triangle point 3 location.</param>
      <param name="color">The triangle line color.</param>
      <param name="thickness">The triangle line thickness.</param>
      <param name="lineStyle">The triangle line style.</param>
      <returns>ChartTriangle.</returns>
      <signature>
        <code>public ChartTriangle DrawTriangle(string name, DateTime time1, double y1, DateTime time2, double y2, DateTime time3, double y3, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawTriangle(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
      <summary>
        Draws a triangle.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the triangle point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the triangle point 1 location.</param>
      <param name="barIndex2">The bar index of the triangle point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the triangle point 2 location.</param>
      <param name="barIndex3">The bar index of the triangle point 3 location on the X-axis.</param>
      <param name="y3">The Y-axis value of the triangle point 3 location.</param>
      <param name="color">The triangle line color.</param>
      <returns>ChartTriangle.</returns>
      <signature>
        <code>public ChartTriangle DrawTriangle(string name, int barIndex1, double y1, int barIndex2, double y2, int barIndex3, double y3, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawTriangle(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws a triangle.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the triangle point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the triangle point 1 location.</param>
      <param name="barIndex2">The bar index of the triangle point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the triangle point 2 location.</param>
      <param name="barIndex3">The bar index of the triangle point 3 location on the X-axis.</param>
      <param name="y3">The Y-axis value of the triangle point 3 location.</param>
      <param name="color">The triangle line color.</param>
      <param name="thickness">The triangle line thickness.</param>
      <returns>ChartTriangle.</returns>
      <signature>
        <code>public ChartTriangle DrawTriangle(string name, int barIndex1, double y1, int barIndex2, double y2, int barIndex3, double y3, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawTriangle(System.String,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws a triangle.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the triangle point 1 location on the X-axis.</param>
      <param name="y1">The Y-axis value of the triangle point 1 location.</param>
      <param name="barIndex2">The bar index of the triangle point 2 location on the X-axis.</param>
      <param name="y2">The Y-axis value of the triangle point 2 location.</param>
      <param name="barIndex3">The bar index of the triangle point 3 location on the X-axis.</param>
      <param name="y3">The Y-axis value of the triangle point 3 location.</param>
      <param name="color">The triangle line color.</param>
      <param name="thickness">The triangle line thickness.</param>
      <param name="lineStyle">The triangle line style.</param>
      <returns>ChartTriangle.</returns>
      <signature>
        <code>public ChartTriangle DrawTriangle(string name, int barIndex1, double y1, int barIndex2, double y2, int barIndex3, double y3, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawArrow(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color)">
      <summary>
        Draws an arrow.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the trend line start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the trend line start location.</param>
      <param name="time2">The time value of the trend line end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the trend line end location.</param>
      <param name="color">The color of the trend line.</param>
      <signature>
        <code>public ChartArrow DrawArrow(string name, DateTime time1, double y1, DateTime time2, double y2, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawArrow(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws an arrow.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the trend line start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the trend line start location.</param>
      <param name="time2">The time value of the trend line end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the trend line end location.</param>
      <param name="color">The color of the trend line.</param>
      <param name="thickness">The thickness of the trend line.</param>
      <signature>
        <code>public ChartArrow DrawArrow(string name, DateTime time1, double y1, DateTime time2, double y2, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawArrow(System.String,System.DateTime,System.Double,System.DateTime,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws an arrow.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="time1">The time value of the trend line start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the trend line start location.</param>
      <param name="time2">The time value of the trend line end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the trend line end location.</param>
      <param name="color">The color of the trend line.</param>
      <param name="thickness">The thickness of the trend line.</param>
      <param name="lineStyle">The trend line style.</param>
      <signature>
        <code>public ChartArrow DrawArrow(string name, DateTime time1, double y1, DateTime time2, double y2, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawArrow(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color)">
      <summary>
        Draws an arrow.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the trend line start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the trend line start location.</param>
      <param name="barIndex2">The bar index of the trend line end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the trend line end location.</param>
      <param name="color">The color of the trend line.</param>
      <signature>
        <code>public ChartArrow DrawArrow(string name, int barIndex1, double y1, int barIndex2, double y2, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawArrow(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32)">
      <summary>
        Draws an arrow.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the trend line start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the trend line start location.</param>
      <param name="barIndex2">The bar index of the trend line end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the trend line end location.</param>
      <param name="color">The color of the trend line.</param>
      <param name="thickness">The thickness of the trend line.</param>
      <signature>
        <code>public ChartArrow DrawArrow(string name, int barIndex1, double y1, int barIndex2, double y2, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.DrawArrow(System.String,System.Int32,System.Double,System.Int32,System.Double,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Draws an arrow.
      </summary>
      <param name="name">
        The chart object name - a unique name that can be only used once for a chart area. If duplicated,
        the chart object will be replaced with a new one of the same name.
      </param>
      <param name="barIndex1">The bar index of the trend line start point location on the X-axis.</param>
      <param name="y1">The Y-axis value of the trend line start location.</param>
      <param name="barIndex2">The bar index of the trend line end point location on the X-axis.</param>
      <param name="y2">The Y-axis value of the trend line end location.</param>
      <param name="color">The color of the trend line.</param>
      <param name="thickness">The thickness of the trend line.</param>
      <param name="lineStyle">The trend line style.</param>
      <signature>
        <code>public ChartArrow DrawArrow(string name, int barIndex1, double y1, int barIndex2, double y2, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.XToTime(System.Double)">
      <summary>
        Converts Mouse X coordinate to area Time coordinate value.
      </summary>
      <param name="x">Mouse X</param>
      <returns>Time</returns>
      <signature>
        <code>public DateTime XToTime(double x)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.TimeToX(System.DateTime)">
      <summary>
        Converts area Time coordinate to Mouse X coordinate value.
      </summary>
      <param name="time">Time</param>
      <returns>Mouse X coordinate</returns>
      <signature>
        <code>public double TimeToX(DateTime time)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.YToYValue(System.Double)">
      <summary>
        Converts Mouse Y coordinate to area Y axis coordinate value.
      </summary>
      <param name="y">Mouse Y coordinate</param>
      <returns>Area Y axis coordinate value</returns>
      <signature>
        <code>public double YToYValue(double y)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.YValueToY(System.Double)">
      <summary>
        Converts Area Y axis coordinate value to mouse Y coordinate.
      </summary>
      <param name="yValue">Y value</param>
      <returns>Mouse Y coordinate</returns>
      <signature>
        <code>public double YValueToY(double yValue)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.XToBarIndex(System.Double)">
      <summary>
        Converts X coordinate to bar index.
      </summary>
      <param name="x">X coordinate</param>
      <returns>Bar Index</returns>
      <signature>
        <code>public double XToBarIndex(double x)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArea.BarIndexToX(System.Double)">
      <summary>
        Converts Bar Index to X coordinate.
      </summary>
      <param name="barIndex">Bar Index</param>
      <returns>X Coordinate</returns>
      <signature>
        <code>public double BarIndexToX(double barIndex)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartColorSettings">
      <summary>
        Represents the charts Color Settings.
      </summary>
      <remarks>
        Use the Color classes to set the chart Color Settings.
      </remarks>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This indicator allows you to change chart colors via chart controls
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartColorSettingsSample : Indicator
          {
          private TextBox _askPriceLineColorTextBox;

          private TextBox _bidPriceLineColorTextBox;

          private TextBox _backgroundColorTextBox;

          protected override void Initialize()
          {
          var grid = new Grid(10, 2)
          {
          BackgroundColor = Color.Gold,
          Opacity = 0.6,
          HorizontalAlignment = HorizontalAlignment.Left,
          VerticalAlignment = VerticalAlignment.Bottom
          };

          var style = new Style();

          style.Set(ControlProperty.Margin, 5);
          style.Set(ControlProperty.FontWeight, FontWeight.ExtraBold);
          style.Set(ControlProperty.ForegroundColor, Color.Red);
          style.Set(ControlProperty.MinWidth, 100);

          grid.AddChild(new TextBlock
          {
          Text = "Ask Price Line Color",
          Style = style
          }, 0, 0);

          _askPriceLineColorTextBox = new TextBox
          {
          Text = Chart.ColorSettings.AskPriceLineColor.ToString(),
          Style = style
          };

          grid.AddChild(_askPriceLineColorTextBox, 0, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Bid Price Line Color",
          Style = style
          }, 1, 0);

          _bidPriceLineColorTextBox = new TextBox
          {
          Text = Chart.ColorSettings.BidPriceLineColor.ToString(),
          Style = style
          };

          grid.AddChild(_bidPriceLineColorTextBox, 1, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Background Color",
          Style = style
          }, 2, 0);

          _backgroundColorTextBox = new TextBox
          {
          Text = Chart.ColorSettings.BackgroundColor.ToString(),
          Style = style
          };

          grid.AddChild(_backgroundColorTextBox, 2, 1);

          var changeButton = new Button
          {
          Text = "Change",
          Style = style
          };

          changeButton.Click += ChangeButton_Click;

          grid.AddChild(changeButton, 9, 0);

          Chart.AddControl(grid);
          }

          private void ChangeButton_Click(ButtonClickEventArgs obj)
          {
          Chart.ColorSettings.AskPriceLineColor = GetColor(_askPriceLineColorTextBox.Text);
          Chart.ColorSettings.BidPriceLineColor = GetColor(_bidPriceLineColorTextBox.Text);
          Chart.ColorSettings.BackgroundColor = GetColor(_backgroundColorTextBox.Text);
          }

          private Color GetColor(string colorString, int alpha = 255)
          {
          var color = colorString[0] == '#' ? Color.FromHex(colorString) : Color.FromName(colorString);

          return Color.FromArgb(alpha, color);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Chart" />
      <signature>
        <code>public interface ChartColorSettings</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartColorSettings.BackgroundColor">
      <summary>
        Gets or sets the color of the chart background.
      </summary>
      <signature>
        <code>public Color BackgroundColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartColorSettings.ForegroundColor">
      <summary>
        Gets or sets the color of the chart foreground.
      </summary>
      <signature>
        <code>public Color ForegroundColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartColorSettings.GridLinesColor">
      <summary>
        Gets or sets the color of the grid lines.
      </summary>
      <signature>
        <code>public Color GridLinesColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartColorSettings.PeriodSeparatorColor">
      <summary>
        Gets or sets the color of the period separator.
      </summary>
      <signature>
        <code>public Color PeriodSeparatorColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartColorSettings.BullOutlineColor">
      <summary>
        Gets or sets the color of the bull candle or bar outline.
      </summary>
      <signature>
        <code>public Color BullOutlineColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartColorSettings.BearOutlineColor">
      <summary>
        Gets or sets the color of the bear candle or bar outline.
      </summary>
      <signature>
        <code>public Color BearOutlineColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartColorSettings.BullFillColor">
      <summary>
        Gets or sets the color of the bull candle fill.
      </summary>
      <signature>
        <code>public Color BullFillColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartColorSettings.BearFillColor">
      <summary>
        Gets or sets the color of the bear candle fill.
      </summary>
      <signature>
        <code>public Color BearFillColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartColorSettings.TickVolumeColor">
      <summary>
        Gets or sets the color of the tick volume.
      </summary>
      <signature>
        <code>public Color TickVolumeColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartColorSettings.WinningDealColor">
      <summary>
        Gets or sets the color of the winning deal.
      </summary>
      <signature>
        <code>public Color WinningDealColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartColorSettings.LosingDealColor">
      <summary>
        Gets or sets the color of the losing deal.
      </summary>
      <signature>
        <code>public Color LosingDealColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartColorSettings.AskPriceLineColor">
      <summary>
        Gets or sets the color of the ask price line.
      </summary>
      <signature>
        <code>public Color AskPriceLineColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartColorSettings.BidPriceLineColor">
      <summary>
        Gets or sets the color of the bid price line.
      </summary>
      <signature>
        <code>public Color BidPriceLineColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartColorSettings.BuyColor">
      <summary>
        Gets or sets the color of Buy positions and orders.
      </summary>
      <signature>
        <code>public Color BuyColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartColorSettings.SellColor">
      <summary>
        Gets or sets the color of Sell order positions and orders.
      </summary>
      <signature>
        <code>public Color SellColor { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartDisplaySettings">
      <summary>
        Represents the chart display settings.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // You can use this sample indicator to change some of the chart display settings via chart controls
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartDisplaySettingsSample : Indicator
          {
          protected override void Initialize()
          {
          var stackPanel = new StackPanel
          {
          HorizontalAlignment = HorizontalAlignment.Left,
          VerticalAlignment = VerticalAlignment.Bottom,
          BackgroundColor = Color.Gold,
          Opacity = 0.7,
          Margin = 5,
          Orientation = Orientation.Vertical
          };

          var askPriceLineCheckBox = new CheckBox
          {
          Text = "Ask Price Line",
          Margin = 5,
          IsChecked = Chart.DisplaySettings.AskPriceLine
          };

          askPriceLineCheckBox.Click += args =&gt; Chart.DisplaySettings.AskPriceLine = args.CheckBox.IsChecked.Value;

          stackPanel.AddChild(askPriceLineCheckBox);

          var bidPriceLineCheckBox = new CheckBox
          {
          Text = "Bid Price Line",
          Margin = 5,
          IsChecked = Chart.DisplaySettings.BidPriceLine
          };

          bidPriceLineCheckBox.Click += args =&gt; Chart.DisplaySettings.BidPriceLine = args.CheckBox.IsChecked.Value;

          stackPanel.AddChild(bidPriceLineCheckBox);

          var chartScaleCheckBox = new CheckBox
          {
          Text = "Chart Scale",
          Margin = 5,
          IsChecked = Chart.DisplaySettings.ChartScale
          };

          chartScaleCheckBox.Click += args =&gt; Chart.DisplaySettings.ChartScale = args.CheckBox.IsChecked.Value;

          stackPanel.AddChild(chartScaleCheckBox);

          var dealMapCheckBox = new CheckBox
          {
          Text = "Deal Map",
          Margin = 5,
          IsChecked = Chart.DisplaySettings.DealMap
          };

          dealMapCheckBox.Click += args =&gt; Chart.DisplaySettings.DealMap = args.CheckBox.IsChecked.Value;

          stackPanel.AddChild(dealMapCheckBox);

          var gridCheckBox = new CheckBox
          {
          Text = "Grid",
          Margin = 5,
          IsChecked = Chart.DisplaySettings.Grid
          };

          gridCheckBox.Click += args =&gt; Chart.DisplaySettings.Grid = args.CheckBox.IsChecked.Value;

          stackPanel.AddChild(gridCheckBox);

          var volumeCheckBox = new CheckBox
          {
          Text = "Volume",
          Margin = 5,
          IsChecked = Chart.DisplaySettings.TickVolume
          };

          volumeCheckBox.Click += args =&gt; Chart.DisplaySettings.TickVolume = args.CheckBox.IsChecked.Value;

          stackPanel.AddChild(volumeCheckBox);

          Chart.AddControl(stackPanel);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Chart" />
      <signature>
        <code>public interface ChartDisplaySettings</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartDisplaySettings.Positions">
      <summary>
        Defines if the Positions are displayed on the chart.
      </summary>
      <signature>
        <code>public bool Positions { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartDisplaySettings.Orders">
      <summary>
        Defines if the Orders are displayed on the chart.
      </summary>
      <signature>
        <code>public bool Orders { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartDisplaySettings.BidPriceLine">
      <summary>
        Defines if the Bid Price Line is displayed on the chart.
      </summary>
      <signature>
        <code>public bool BidPriceLine { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartDisplaySettings.AskPriceLine">
      <summary>
        Defines if the Ask Price Line is displayed on the chart.
      </summary>
      <signature>
        <code>public bool AskPriceLine { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartDisplaySettings.Grid">
      <summary>
        Defines if the Grid is displayed on the chart background.
      </summary>
      <signature>
        <code>public bool Grid { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartDisplaySettings.PeriodSeparators">
      <summary>
        Defines if the Period Separators are displayed on the chart.
      </summary>
      <signature>
        <code>public bool PeriodSeparators { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartDisplaySettings.TickVolume">
      <summary>
        Defines if the Tick Volume is displayed on the chart.
      </summary>
      <signature>
        <code>public bool TickVolume { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartDisplaySettings.DealMap">
      <summary>
        Defines if the Deal Map is displayed on the chart.
      </summary>
      <signature>
        <code>public bool DealMap { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartDisplaySettings.ChartScale">
      <summary>
        Defines if the Chart Scale is displayed on the chart.
      </summary>
      <signature>
        <code>public bool ChartScale { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartDisplaySettings.PriceAxisOverlayButtons">
      <summary>
        Defines if the price axis overlays buttons are visible on the chart.
      </summary>
      <signature>
        <code>public bool PriceAxisOverlayButtons { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartDisplaySettings.PriceAlerts">
      <summary>
        Defines if the Price Alerts are visible on the chart.
      </summary>
      <signature>
        <code>public bool PriceAlerts { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartDisplaySettings.MarketSentiment">
      <summary>
        Defines if the Market Sentiment is visible on the chart.
      </summary>
      <signature>
        <code>public bool MarketSentiment { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartDisplaySettings.Targets">
      <summary>
        Defines if the Target is visible on the chart.
      </summary>
      <signature>
        <code>public bool Targets { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartDisplaySettings.QuickTradeButtons">
      <summary>
        Defines if the QuickTrade buttons are visible on the chart.
      </summary>
      <signature>
        <code>public bool QuickTradeButtons { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartDisplaySettings.IndicatorTitles">
      <summary>
        Defines if the Indicator Titles are displayed on the chart.
      </summary>
      <signature>
        <code>public bool IndicatorTitles { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartAndrewsPitchfork">
      <summary>
        Represents the Andrew's Pitchfork chart object. A tool that helps to identify possible support and resistance levels with the three parallel lines.
      </summary>
      <seealso cref="T:cAlgo.API.ChartObject" />
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This indicator shows how to draw an Andrews Pitchfork by using Chart.DrawAndrewsPitchfork method
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class AndrewsPitchforkSample : Indicator
          {
          protected override void Initialize()
          {
          var barIndex1 = Chart.FirstVisibleBarIndex;
          var barIndex2 = Chart.FirstVisibleBarIndex + ((Chart.LastVisibleBarIndex - Chart.FirstVisibleBarIndex) / 5);
          var barIndex3 = Chart.FirstVisibleBarIndex + ((Chart.LastVisibleBarIndex - Chart.FirstVisibleBarIndex) / 2);

          var y1 = Bars.ClosePrices[barIndex1];
          var y2 = Bars.ClosePrices[barIndex2];
          var y3 = Bars.ClosePrices[barIndex3];

          var andrewsPitchfork = Chart.DrawAndrewsPitchfork("AndrewsPitchfork", barIndex1, y1, barIndex2, y2, barIndex3, y3, Color.Red);

          andrewsPitchfork.IsInteractive = true;
          }

          public override void Calculate(int index)
          {
          }
          }
          }

        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawings" />
      <signature>
        <code>public interface ChartAndrewsPitchfork</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartAndrewsPitchfork.Time1">
      <summary>
        Gets or sets the time value for the Andrew's Pitchfork point 1.
      </summary>
      <signature>
        <code>public DateTime Time1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartAndrewsPitchfork.Time2">
      <summary>
        Gets or sets the time value for the Andrew's Pitchfork point 2.
      </summary>
      <signature>
        <code>public DateTime Time2 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartAndrewsPitchfork.Time3">
      <summary>
        Gets or sets the time value for the Andrew's Pitchfork point 3.
      </summary>
      <signature>
        <code>public DateTime Time3 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartAndrewsPitchfork.Y1">
      <summary>
        Gets or sets the Y-axis value for the Andrew's Pitchfork point 1.
      </summary>
      <signature>
        <code>public double Y1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartAndrewsPitchfork.Y2">
      <summary>
        Gets or sets the Y-axis value for the Andrew's Pitchfork point 2.
      </summary>
      <signature>
        <code>public double Y2 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartAndrewsPitchfork.Y3">
      <summary>
        Gets or sets the Y-axis value for the Andrew's Pitchfork point 3.
      </summary>
      <signature>
        <code>public double Y3 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartAndrewsPitchfork.Thickness">
      <summary>
        Gets or sets the chart object lines thickness.
      </summary>
      <signature>
        <code>public int Thickness { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartAndrewsPitchfork.Color">
      <summary>
        Gets or sets the chart object lines color.
      </summary>
      <signature>
        <code>public Color Color { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartAndrewsPitchfork.LineStyle">
      <summary>
        Gets or sets the chart object lines style.
      </summary>
      <signature>
        <code>public LineStyle LineStyle { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartArrow">
      <summary>
        Represents the arrow chart object.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawings" />
      <signature>
        <code>public interface ChartArrow</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartArrow.Time1">
      <summary>
        Gets or sets the value 1 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartArrow.Time2">
      <summary>
        Gets or sets the value 2 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time2 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartArrow.Y1">
      <summary>
        Gets or sets the value 1 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartArrow.Y2">
      <summary>
        Gets or sets the value 2 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y2 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartArrow.Color">
      <summary>
        Gets or sets the color of the Trend Line.
      </summary>
      <signature>
        <code>public Color Color { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartArrow.Thickness">
      <summary>
        Gets or sets the thickness of the Arrow.
      </summary>
      <signature>
        <code>public int Thickness { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartArrow.LineStyle">
      <summary>
        Gets or sets the Arrow style.
      </summary>
      <signature>
        <code>public LineStyle LineStyle { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartArrow.ShowAngle">
      <summary>
        Defines the arrow angle.
      </summary>
      <signature>
        <code>public bool ShowAngle { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartArrow.ExtendToInfinity">
      <summary>
        Defines if the Arrow extends to infinity.
      </summary>
      <signature>
        <code>public bool ExtendToInfinity { get; set; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArrow.CalculateY(System.Int32)">
      <summary>
        Calculates Y-axis value corresponding the specified bar index.
      </summary>
      <param name="barIndex">Index of the bar.</param>
      <returns>System.Double.</returns>
      <signature>
        <code>public double CalculateY(int barIndex)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartArrow.CalculateY(System.DateTime)">
      <summary>
        Calculates Y-axis value corresponding the specified time value.
      </summary>
      <param name="time">The time.</param>
      <returns>System.Double.</returns>
      <signature>
        <code>public double CalculateY(DateTime time)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartDrawing">
      <summary>
        Represents the Drawing chart object.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawings" />
      <signature>
        <code>public interface ChartDrawing</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartEllipse">
      <summary>
        Represent the Ellipse chart object.
      </summary>
      <seealso cref="T:cAlgo.API.ChartShape" />
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator draw an ellipse on chart
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartEllipseSample : Indicator
          {
          protected override void Initialize()
          {
          Draw();
          }

          public override void Calculate(int index)
          {
          Draw();
          }

          private void Draw()
          {
          var y1 = Bars.HighPrices[Chart.FirstVisibleBarIndex] &gt; Bars.HighPrices[Chart.LastVisibleBarIndex] ? Bars.HighPrices[Chart.FirstVisibleBarIndex] : Bars.HighPrices[Chart.LastVisibleBarIndex];

          var y2 = Bars.LowPrices[Chart.FirstVisibleBarIndex] &lt; Bars.LowPrices[Chart.LastVisibleBarIndex] ? Bars.LowPrices[Chart.FirstVisibleBarIndex] : Bars.LowPrices[Chart.LastVisibleBarIndex];

          var ellipse = Chart.DrawEllipse("ellipse", Chart.FirstVisibleBarIndex, y1, Chart.LastVisibleBarIndex, y2, Color.FromArgb(50, Color.Red.R, Color.Red.G, Color.Red.B));

          ellipse.IsFilled = true;
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawingsShapes" />
      <signature>
        <code>public interface ChartEllipse</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartEllipse.Time1">
      <summary>
        Gets or sets the value 1 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartEllipse.Time2">
      <summary>
        Gets or sets the value 2 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time2 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartEllipse.Y1">
      <summary>
        Gets or sets the value 1 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartEllipse.Y2">
      <summary>
        Gets or sets the value 2 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y2 { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartEquidistantChannel">
      <summary>
        Represents the Equidistant Channel chart object. The tool that allows drawing two precisely parallel lines in any direction on the chart.
      </summary>
      <seealso cref="T:cAlgo.API.ChartObject" />
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // A sample indicator for showing how to use Chart.DrawEquidistantChannel method
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class EquidistantChannelSample : Indicator
          {
          protected override void Initialize()
          {
          var channel = Chart.DrawEquidistantChannel("EquidistantChannel", Chart.FirstVisibleBarIndex, Bars.LowPrices[Chart.FirstVisibleBarIndex], Chart.LastVisibleBarIndex, Bars.HighPrices[Chart.LastVisibleBarIndex], 20 * Symbol.PipSize, Color.Red);

          channel.IsInteractive = true;
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawings" />
      <signature>
        <code>public interface ChartEquidistantChannel</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartEquidistantChannel.Time1">
      <summary>
        Gets or sets the value 1 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartEquidistantChannel.Time2">
      <summary>
        Gets or sets the value 2 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time2 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartEquidistantChannel.Y1">
      <summary>
        Gets or sets the value 1 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartEquidistantChannel.Y2">
      <summary>
        Gets or sets the value 2 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y2 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartEquidistantChannel.ChannelHeight">
      <summary>
        Gets or sets the height of the Equidistant Channel.
      </summary>
      <signature>
        <code>public double ChannelHeight { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartEquidistantChannel.Thickness">
      <summary>
        Gets or sets the Equidistant Channel line thickness.
      </summary>
      <signature>
        <code>public int Thickness { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartEquidistantChannel.LineStyle">
      <summary>
        Gets or sets the Equidistant channel line style.
      </summary>
      <signature>
        <code>public LineStyle LineStyle { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartEquidistantChannel.Color">
      <summary>
        Gets or sets the Equidistant Channel line color.
      </summary>
      <signature>
        <code>public Color Color { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartEquidistantChannel.ShowAngle">
      <summary>
        Gets or sets the Equidistant Channel angle.
      </summary>
      <signature>
        <code>public bool ShowAngle { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartEquidistantChannel.ExtendToInfinity">
      <summary>
        Defines if the Equidistant channel extends to infinity.
      </summary>
      <signature>
        <code>public bool ExtendToInfinity { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartFibonacciBase">
      <summary>
        Represents the Fibonacci tools options.
      </summary>
      <seealso cref="T:cAlgo.API.ChartObject" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawingsFibonacci" />
      <signature>
        <code>public interface ChartFibonacciBase</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciBase.FibonacciLevels">
      <summary>
        Gets the Fibonacci levels.
      </summary>
      <signature>
        <code>public IReadonlyList&lt;FibonacciLevel&gt; FibonacciLevels { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciBase.DisplayPrices">
      <summary>
        Defines if the Fibonacci levels display the prices
      </summary>
      <signature>
        <code>public bool DisplayPrices { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciBase.Thickness">
      <summary>
        Gets or sets the lines thickness.
      </summary>
      <signature>
        <code>public int Thickness { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciBase.Color">
      <summary>
        Gets or sets the lines color.
      </summary>
      <signature>
        <code>public Color Color { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciBase.LineStyle">
      <summary>
        Gets or sets the lines style.
      </summary>
      <signature>
        <code>public LineStyle LineStyle { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartFibonacciExpansion">
      <summary>
        Represents the Fibonacci Expansion chart object.
      </summary>
      <seealso cref="T:cAlgo.API.ChartFibonacciBase" />
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // A sample indicator for showing how to use the Chart.DrawFibonacciExpansion method
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class FibonacciExpansionSample : Indicator
          {
          protected override void Initialize()
          {
          var period = Chart.LastVisibleBarIndex - Chart.FirstVisibleBarIndex;

          var fibonacciExpansion = Chart.DrawFibonacciExpansion("fibonacciExpansion", Chart.FirstVisibleBarIndex, Bars.LowPrices[Chart.FirstVisibleBarIndex], Chart.FirstVisibleBarIndex, Bars.LowPrices.Minimum(period), Chart.LastVisibleBarIndex, Bars.HighPrices.Maximum(period), Color.Red);

          fibonacciExpansion.IsInteractive = true;
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawingsFibonacci" />
      <signature>
        <code>public interface ChartFibonacciExpansion</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciExpansion.Time1">
      <summary>
        Gets or sets the value 1 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciExpansion.Time2">
      <summary>
        Gets or sets the value 2 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time2 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciExpansion.Time3">
      <summary>
        Gets or sets the value 3 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time3 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciExpansion.Y1">
      <summary>
        Gets or sets the value 1 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciExpansion.Y2">
      <summary>
        Gets or sets the value 2 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y2 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciExpansion.Y3">
      <summary>
        Gets or sets the value 3 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y3 { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartFibonacciFan">
      <summary>
        Represents the Fibonacci Fan chart object.
      </summary>
      <seealso cref="T:cAlgo.API.ChartFibonacciBase" />
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use Chart.DrawFibonacciFan method to draw a Fibonacci Fan
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class FibonacciFanSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.DrawFibonacciFan("Fan", Chart.FirstVisibleBarIndex, Bars.ClosePrices[Chart.FirstVisibleBarIndex], Chart.LastVisibleBarIndex, Bars.ClosePrices[Chart.LastVisibleBarIndex], Color.Red);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawingsFibonacci" />
      <signature>
        <code>public interface ChartFibonacciFan</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciFan.Time1">
      <summary>
        Gets or sets the value 1 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciFan.Time2">
      <summary>
        Gets or sets the value 2 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time2 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciFan.Y1">
      <summary>
        Gets or sets the value 1 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciFan.Y2">
      <summary>
        Gets or sets the value 2 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y2 { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartFibonacciRetracement">
      <summary>
        Represents the Fibonacci Retracement chart object.
      </summary>
      <seealso cref="T:cAlgo.API.ChartFibonacciBase" />
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This indicator shows how to use the Chart.DrawFibonacciRetracement method to draw a Fibonacci Retracement
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class FibonacciRetracementSample : Indicator
          {
          protected override void Initialize()
          {
          var period = Chart.LastVisibleBarIndex - Chart.FirstVisibleBarIndex;

          var max = Bars.HighPrices.Maximum(period);
          var min = Bars.LowPrices.Minimum(period);

          Chart.DrawFibonacciRetracement("FibonacciRetracement", Chart.FirstVisibleBarIndex, max, Chart.LastVisibleBarIndex, min, Color.Red);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawingsFibonacci" />
      <signature>
        <code>public interface ChartFibonacciRetracement</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciRetracement.Time1">
      <summary>
        Gets or sets the value 1 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciRetracement.Time2">
      <summary>
        Gets or sets the value 2 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time2 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciRetracement.Y1">
      <summary>
        Gets or sets the value 1 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciRetracement.Y2">
      <summary>
        Gets or sets the value 2 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y2 { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartFibonacciTimezones">
      <summary>
        Represents the Fibonacci Timezones chart object.
      </summary>
      <seealso cref="T:cAlgo.API.ChartFibonacciBase" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawingsFibonacci" />
      <signature>
        <code>public interface ChartFibonacciTimezones</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciTimezones.Time1">
      <summary>
        Gets or sets the value 1 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciTimezones.Time2">
      <summary>
        Gets or sets the value 2 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time2 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciTimezones.Y1">
      <summary>
        Gets or sets the value 1 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFibonacciTimezones.Y2">
      <summary>
        Gets or sets the value 2 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y2 { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartHorizontalLine">
      <summary>
        Represents the Horizontal Line chart object. Used to mark a certain value on the Y-axis throughout the whole chart.
      </summary>
      <seealso cref="T:cAlgo.API.ChartObject" />
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to use Chart.DrawHorizontalLine method to draw an horizontal line
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class HorizontalLineSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.DrawHorizontalLine("horizontalLine", Bars.ClosePrices.LastValue, Color.Red);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawings" />
      <signature>
        <code>public interface ChartHorizontalLine</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartHorizontalLine.Y">
      <summary>
        Gets or sets the Y-axis value of the line location.
      </summary>
      <signature>
        <code>public double Y { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartHorizontalLine.Thickness">
      <summary>
        Gets or sets the line thickness.
      </summary>
      <signature>
        <code>public int Thickness { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartHorizontalLine.Color">
      <summary>
        Gets or sets the line color.
      </summary>
      <signature>
        <code>public Color Color { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartHorizontalLine.LineStyle">
      <summary>
        Gets or sets the line style.
      </summary>
      <signature>
        <code>public LineStyle LineStyle { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartIcon">
      <summary>
        Represents the Icon chart object.
      </summary>
      <seealso cref="T:cAlgo.API.ChartObject" />
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to use Chart.DrawIcon method to draw icons
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartIconSample : Indicator
          {
          protected override void Initialize()
          {
          for (int i = Chart.FirstVisibleBarIndex; i &lt;= Chart.LastVisibleBarIndex; i++)
          {
          var iconName = string.Format("Icon_{0}", i);

          if (Bars.ClosePrices[i] &gt; Bars.OpenPrices[i])
          {
          Chart.DrawIcon(iconName, ChartIconType.UpArrow, i, Bars.LowPrices[i], Color.Green);
          }
          else
          {
          Chart.DrawIcon(iconName, ChartIconType.DownArrow, i, Bars.HighPrices[i], Color.Red);
          }
          }
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawings" />
      <signature>
        <code>public interface ChartIcon</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartIcon.IconType">
      <summary>
        Gets or sets the type of the icon.
      </summary>
      <signature>
        <code>public ChartIconType IconType { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartIcon.Time">
      <summary>
        Gets or sets the Time value of the icon location.
      </summary>
      <signature>
        <code>public DateTime Time { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartIcon.Y">
      <summary>
        Gets or sets the Y-axis value of the icon location.
      </summary>
      <signature>
        <code>public double Y { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartIcon.Color">
      <summary>
        Gets or sets the color of the icon.
      </summary>
      <signature>
        <code>public Color Color { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartIconType">
      <summary>
        Represents the type of the Icon.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the Chart ChartIconType
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartIconTypeSample : Indicator
          {
          [Parameter("Icon Type", DefaultValue = ChartIconType.DownArrow)]
          public ChartIconType IconType { get; set; }

          protected override void Initialize()
          {
          Chart.DrawIcon("Icon", IconType, Chart.LastVisibleBarIndex, Chart.Bars.LastBar.Low, Color.Red);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.ChartIcon" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawings" />
      <signature>
        <code>public enum ChartIconType</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartIconType.UpArrow">
      <summary>
        The Up Arrow icon.
      </summary>
      <signature>
        <code>public static ChartIconType UpArrow;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartIconType.DownArrow">
      <summary>
        The Down Arrow icon.
      </summary>
      <signature>
        <code>public static ChartIconType DownArrow;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartIconType.Circle">
      <summary>
        The Circle icon.
      </summary>
      <signature>
        <code>public static ChartIconType Circle;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartIconType.Square">
      <summary>
        The Square icon.
      </summary>
      <signature>
        <code>public static ChartIconType Square;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartIconType.Diamond">
      <summary>
        The Diamond icon.
      </summary>
      <signature>
        <code>public static ChartIconType Diamond;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartIconType.Star">
      <summary>
        The Star icon.
      </summary>
      <signature>
        <code>public static ChartIconType Star;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartIconType.UpTriangle">
      <summary>
        The Up Triangle icon.
      </summary>
      <signature>
        <code>public static ChartIconType UpTriangle;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartIconType.DownTriangle">
      <summary>
        The Down Triangle icon.
      </summary>
      <signature>
        <code>public static ChartIconType DownTriangle;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartObject">
      <summary>
        Represents the chart object.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawings" />
      <signature>
        <code>public interface ChartObject</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartObject.Name">
      <summary>
        Gets the chart object name - the unique identifier for the object in the current chart area.
      </summary>
      <signature>
        <code>public string Name { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartObject.Comment">
      <summary>
        Gets or sets the comment for the chart object.
      </summary>
      <value>The comment.</value>
      <signature>
        <code>public string Comment { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartObject.ObjectType">
      <summary>
        Gets the chart object type.
      </summary>
      <signature>
        <code>public ChartObjectType ObjectType { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartObject.IsInteractive">
      <summary>
        Defines whether the instance is interactive. The non-interactive chart objects cannot be selected, have no hover effect and cannot be searched. Available only for the current cBot or Indicator and will be removed when the cBot/Indicator stops.
      </summary>
      <signature>
        <code>public bool IsInteractive { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartObject.IsLocked">
      <summary>
        Gets or sets if the object is loacked or not, user can't move locked objects unless unlocked
      </summary>
      <signature>
        <code>public bool IsLocked { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartObject.IsHidden">
      <summary>
        Gets or sets if object is hidden and not visible to user or not
      </summary>
      <signature>
        <code>public bool IsHidden { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartObject.ZIndex">
      <summary>
        Gets or sets the location of a chart object on the Z-axis in respect to the other chart objects.
      </summary>
      <signature>
        <code>public int ZIndex { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartObject.IsAlive">
      <summary>
        Defines if the chart object still exists on the chart.
      </summary>
      <signature>
        <code>public bool IsAlive { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartObjectType">
      <summary>
        The chart object types.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawings" />
      <signature>
        <code>public enum ChartObjectType</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartObjectType.HorizontalLine">
      <summary>
        The horizontal line. The line parallel to the X-axis that can be set on any Y-axis value.
      </summary>
      <signature>
        <code>public static ChartObjectType HorizontalLine;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartObjectType.VerticalLine">
      <summary>
        The vertical line. The line parallel to the Y-axis that can be set on any X-axis value. used to mark certain time event or chart bar on the chart.TBD
      </summary>
      <signature>
        <code>public static ChartObjectType VerticalLine;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartObjectType.TrendLine">
      <summary>
        The trend line. The line with the start and end points that can be drawn in any direction on the chart.
      </summary>
      <signature>
        <code>public static ChartObjectType TrendLine;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartObjectType.Text">
      <summary>
        The text that can be placed directly in the chart, bound to X-Y axises.
      </summary>
      <signature>
        <code>public static ChartObjectType Text;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartObjectType.StaticText">
      <summary>
        The static positioned text that can be placed on fixed locations in the chart
      </summary>
      <signature>
        <code>public static ChartObjectType StaticText;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartObjectType.Icon">
      <summary>
        The icon. The collection of icons that can be placed directly in the chart, bound to X-Y axises.
      </summary>
      <signature>
        <code>public static ChartObjectType Icon;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartObjectType.FibonacciRetracement">
      <summary>
        The Fibonacci Retracement that can be placed directly in the chart, bound to X-Y axises. - a charting technique that uses the Fibonacci ratios to indicate the areas of support or resistance.
      </summary>
      <signature>
        <code>public static ChartObjectType FibonacciRetracement;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartObjectType.FibonacciExpansion">
      <summary>
        The Fibonacci Expansion that can be placed directly in the chart, bound to X-Y axises. - a charting technique used to plot possible levels of support and resistance by tracking not only the primary trend but also the retracement.
      </summary>
      <signature>
        <code>public static ChartObjectType FibonacciExpansion;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartObjectType.FibonacciFan">
      <summary>
        The Fibonacci Fan that can be placed directly in the chart, bound to X-Y axises. a charting technique used to estimate support and resistance levels by drawing the new trend lines based on the Fibonacci Retracement levels.
      </summary>
      <signature>
        <code>public static ChartObjectType FibonacciFan;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartObjectType.AndrewsPitchfork">
      <summary>
        The Andrews Pitchfork that can be placed directly in the chart, bound to X-Y axises.
      </summary>
      <signature>
        <code>public static ChartObjectType AndrewsPitchfork;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartObjectType.Rectangle">
      <summary>
        The rectangle of any preferable size and rotation that can be drawn directly in the chart, bound to X-Y axises.
      </summary>
      <signature>
        <code>public static ChartObjectType Rectangle;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartObjectType.Ellipse">
      <summary>
        The ellipse of any preferable size and rotation that can be drawn directly in the chart, bound to X-Y axises.
      </summary>
      <signature>
        <code>public static ChartObjectType Ellipse;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartObjectType.Triangle">
      <summary>
        The triangle of any preferable size and rotation that can be drawn directly in the chart, bound to X-Y axises.
      </summary>
      <signature>
        <code>public static ChartObjectType Triangle;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartObjectType.EquidistantChannel">
      <summary>
        The equidistant channel that can be placed directly in the chart, bound to X-Y axises.
      </summary>
      <signature>
        <code>public static ChartObjectType EquidistantChannel;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartObjectType.Drawing">
      <summary>
        The user drawings in the chart with Pencil
      </summary>
      <signature>
        <code>public static ChartObjectType Drawing;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartObjectType.ArrowLine">
      <summary>
        The arrow line.
      </summary>
      <signature>
        <code>public static ChartObjectType ArrowLine;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartObjectType.FibonacciTimezones">
      <summary>
        The Fibonacci Timezones
      </summary>
      <signature>
        <code>public static ChartObjectType FibonacciTimezones;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartRectangle">
      <summary>
        Represents the Rectangle chart object. A rectangle of any preferable size and rotation that can be drawn directly in the chart, bound to X-Y axises.
      </summary>
      <seealso cref="T:cAlgo.API.ChartShape" />
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use Chart.DrawRectangle method to draw a rectangle
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartRectangleSample : Indicator
          {
          protected override void Initialize()
          {
          var period = Chart.LastVisibleBarIndex - Chart.FirstVisibleBarIndex;

          var rectangle = Chart.DrawRectangle("rectangle_sample", Chart.FirstVisibleBarIndex, Bars.LowPrices.Minimum(period), Chart.LastVisibleBarIndex, Bars.HighPrices.Maximum(period), Color.FromArgb(100, Color.Red));

          rectangle.IsFilled = true;
          rectangle.IsInteractive = true;
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawingsShapes" />
      <signature>
        <code>public interface ChartRectangle</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartRectangle.Time1">
      <summary>
        Gets or sets the value 1 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartRectangle.Time2">
      <summary>
        Gets or sets the value 2 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time2 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartRectangle.Y1">
      <summary>
        Gets or sets the value 1 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartRectangle.Y2">
      <summary>
        Gets or sets the value 2 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y2 { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartShape">
      <summary>
        Represents the Shape chart object. Allows drawing a Rectangle, a Triangle, and an Ellipse on the chart.
      </summary>
      <seealso cref="T:cAlgo.API.ChartObject" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawingsShapes" />
      <signature>
        <code>public interface ChartShape</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartShape.Thickness">
      <summary>
        Gets or sets the line thickness.
      </summary>
      <signature>
        <code>public int Thickness { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartShape.LineStyle">
      <summary>
        Gets or sets the line style.
      </summary>
      <signature>
        <code>public LineStyle LineStyle { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartShape.Color">
      <summary>
        Gets or sets the line color.
      </summary>
      <signature>
        <code>public Color Color { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartShape.IsFilled">
      <summary>
        Defines if the shape is filled.
      </summary>
      <signature>
        <code>public bool IsFilled { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartStaticText">
      <summary>
        Represents the chart static text.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using System.Text;

          namespace cAlgo
          {
          // This sample shows how to use Chart.DrawStaticText method to draw static locked text on chart
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartStaticTextSample : Indicator
          {
          protected override void Initialize()
          {
          var stringBuilder = new StringBuilder();

          stringBuilder.AppendLine("Symbol: " + SymbolName);
          stringBuilder.AppendLine("TimeFrame: " + TimeFrame);
          stringBuilder.AppendLine("Chart Type: " + Chart.ChartType);

          Chart.DrawStaticText("Static_Sample", stringBuilder.ToString(), VerticalAlignment.Bottom, HorizontalAlignment.Left, Color.Red);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawings" />
      <signature>
        <code>public interface ChartStaticText</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartStaticText.Color">
      <summary>
        Gets or sets the chart static text color.
      </summary>
      <signature>
        <code>public Color Color { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartStaticText.Text">
      <summary>
        Gets or sets the chart static text content.
      </summary>
      <signature>
        <code>public string Text { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartStaticText.VerticalAlignment">
      <summary>
        Gets or sets the chart static text vertical alignment.
      </summary>
      <signature>
        <code>public VerticalAlignment VerticalAlignment { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartStaticText.HorizontalAlignment">
      <summary>
        Gets or sets the chart static text horizontal alignment.
      </summary>
      <signature>
        <code>public HorizontalAlignment HorizontalAlignment { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartText">
      <summary>
        Represents the Text chart object. Allows place the text anywhere on the chart, bound to the chart.
      </summary>
      <seealso cref="T:cAlgo.API.ChartObject" />
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use Chart.DrawText method to draw text
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartTextSample : Indicator
          {
          protected override void Initialize()
          {
          for (int iBarIndex = Chart.FirstVisibleBarIndex; iBarIndex &lt;= Chart.LastVisibleBarIndex; iBarIndex++)
          {
          string text;

          double y;

          Color color;

          if (Bars.ClosePrices[iBarIndex] &gt; Bars.OpenPrices[iBarIndex])
          {
          text = "U";
          y = Bars.LowPrices[iBarIndex];
          color = Color.Green;
          }
          else
          {
          text = "D";
          y = Bars.HighPrices[iBarIndex];
          color = Color.Red;
          }

          Chart.DrawText("Text_" + iBarIndex, text, iBarIndex, y, color);
          }
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawings" />
      <signature>
        <code>public interface ChartText</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartText.Time">
      <summary>
        Gets or sets the Time line value.
      </summary>
      <signature>
        <code>public DateTime Time { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartText.Y">
      <summary>
        Gets or sets the Y-axis value.
      </summary>
      <signature>
        <code>public double Y { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartText.Color">
      <summary>
        Gets or sets the text color.
      </summary>
      <signature>
        <code>public Color Color { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartText.Text">
      <summary>
        Gets or sets the text content.
      </summary>
      <signature>
        <code>public string Text { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartText.FontSize">
      <summary>
        Gets or sets the font size of text
      </summary>
      <signature>
        <code>public double FontSize { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartText.IsBold">
      <summary>
        Gets or sets if the text is Bold or not
      </summary>
      <signature>
        <code>public bool IsBold { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartText.IsItalic">
      <summary>
        Gets or sets if the text is Italic or not
      </summary>
      <signature>
        <code>public bool IsItalic { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartText.IsUnderlined">
      <summary>
        Gets or sets if the text is Underlined or not
      </summary>
      <signature>
        <code>public bool IsUnderlined { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartText.VerticalAlignment">
      <summary>
        Gets or sets the vertical alignment of the text regarding the anchor point.
      </summary>
      <signature>
        <code>public VerticalAlignment VerticalAlignment { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartText.HorizontalAlignment">
      <summary>
        Gets or sets the horizontal alignment of the text regarding the anchor point.
      </summary>
      <signature>
        <code>public HorizontalAlignment HorizontalAlignment { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartTrendLine">
      <summary>
        Represents the Trend Line chart object. A straight line that can be drawn from point 1 to the point 2 in any direction to mark the trends on the chart.
      </summary>
      <seealso cref="T:cAlgo.API.ChartObject" />
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use Chart.DrawTrendLine to draw a trend line on chart
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartTrendLineSample : Indicator
          {
          protected override void Initialize()
          {
          var trendLine = Chart.DrawTrendLine("trendLine", Chart.FirstVisibleBarIndex, Bars.LowPrices[Chart.FirstVisibleBarIndex], Chart.LastVisibleBarIndex, Bars.HighPrices[Chart.LastVisibleBarIndex], Color.Red, 2, LineStyle.Dots);

          trendLine.IsInteractive = true;
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawings" />
      <signature>
        <code>public interface ChartTrendLine</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartTrendLine.Time1">
      <summary>
        Gets or sets the value 1 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartTrendLine.Time2">
      <summary>
        Gets or sets the value 2 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time2 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartTrendLine.Y1">
      <summary>
        Gets or sets the value 1 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartTrendLine.Y2">
      <summary>
        Gets or sets the value 2 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y2 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartTrendLine.Color">
      <summary>
        Gets or sets the color of the Trend Line.
      </summary>
      <signature>
        <code>public Color Color { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartTrendLine.Thickness">
      <summary>
        Gets or sets the thickness of the Trend Line.
      </summary>
      <signature>
        <code>public int Thickness { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartTrendLine.LineStyle">
      <summary>
        Gets or sets the Trend Line style.
      </summary>
      <signature>
        <code>public LineStyle LineStyle { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartTrendLine.ShowAngle">
      <summary>
        Defines the trend line angle.
      </summary>
      <signature>
        <code>public bool ShowAngle { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartTrendLine.ExtendToInfinity">
      <summary>
        Defines if the Trend Line extends to infinity.
      </summary>
      <signature>
        <code>public bool ExtendToInfinity { get; set; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartTrendLine.CalculateY(System.Int32)">
      <summary>
        Calculates Y-axis value corresponding the specified bar index.
      </summary>
      <param name="barIndex">Index of the bar.</param>
      <returns>System.Double.</returns>
      <signature>
        <code>public double CalculateY(int barIndex)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartTrendLine.CalculateY(System.DateTime)">
      <summary>
        Calculates Y-axis value corresponding the specified time value.
      </summary>
      <param name="time">The time.</param>
      <returns>System.Double.</returns>
      <signature>
        <code>public double CalculateY(DateTime time)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartTriangle">
      <summary>
        Represents the Triangle chart object.
      </summary>
      <seealso cref="T:cAlgo.API.ChartShape" />
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to draw a triangle on chart with Chart.DrawTriangle method
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartTriangleSample : Indicator
          {
          protected override void Initialize()
          {
          var x1 = Chart.FirstVisibleBarIndex;
          var x2 = Chart.FirstVisibleBarIndex + ((Chart.LastVisibleBarIndex - Chart.FirstVisibleBarIndex) / 2);
          var x3 = Chart.LastVisibleBarIndex;

          var y1 = Bars.LowPrices[x1];
          var y2 = Bars.LowPrices.Minimum(Chart.LastVisibleBarIndex - Chart.FirstVisibleBarIndex);
          var y3 = Bars.HighPrices[x3];

          var triangle = Chart.DrawTriangle("triangle_sample", x1, y1, x2, y2, x3, y3, Color.FromArgb(100, Color.Red), 2, LineStyle.Dots);

          triangle.IsInteractive = true;
          triangle.IsFilled = true;
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawingsShapes" />
      <signature>
        <code>public interface ChartTriangle</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartTriangle.Time1">
      <summary>
        Gets or sets the value 1 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartTriangle.Time2">
      <summary>
        Gets or sets the value 2 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time2 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartTriangle.Time3">
      <summary>
        Gets or sets the value 3 on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time3 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartTriangle.Y1">
      <summary>
        Gets or sets the value 1 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartTriangle.Y2">
      <summary>
        Gets or sets the value 2 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y2 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartTriangle.Y3">
      <summary>
        Gets or sets the value 3 on the Y-axis.
      </summary>
      <signature>
        <code>public double Y3 { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartVerticalLine">
      <summary>
        Represents the Vertical Line chart object. The line parallel to the Y-axis that can be set on a certain time value on the X-axis.
      </summary>
      <seealso cref="T:cAlgo.API.ChartObject" />
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to draw a vertical line on chart by using Chart.DrawVertical line method
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartVerticalLineSample : Indicator
          {
          protected override void Initialize()
          {
          var verticalLine = Chart.DrawVerticalLine("vertical_line", Chart.LastVisibleBarIndex, Color.Red, 2, LineStyle.DotsRare);

          verticalLine.IsInteractive = true;
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawings" />
      <signature>
        <code>public interface ChartVerticalLine</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartVerticalLine.Time">
      <summary>
        Gets or sets the value on the Time line.
      </summary>
      <signature>
        <code>public DateTime Time { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartVerticalLine.Color">
      <summary>
        Gets or sets the line color.
      </summary>
      <signature>
        <code>public Color Color { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartVerticalLine.Thickness">
      <summary>
        Gets or sets the line thickness.
      </summary>
      <signature>
        <code>public int Thickness { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartVerticalLine.LineStyle">
      <summary>
        Gets or sets the line style.
      </summary>
      <signature>
        <code>public LineStyle LineStyle { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.FibonacciLevel">
      <summary>
        Represents the Fibonacci Level.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use a chart Fibonacci Retracement levels property to modify the fibonacci levels
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class FibonacciLevelSample : Indicator
          {
          protected override void Initialize()
          {
          var period = Chart.LastVisibleBarIndex - Chart.FirstVisibleBarIndex;

          var max = Bars.HighPrices.Maximum(period);
          var min = Bars.LowPrices.Minimum(period);

          var fibonacciRetracement = Chart.DrawFibonacciRetracement("FibonacciRetracement", Chart.FirstVisibleBarIndex, max, Chart.LastVisibleBarIndex, min, Color.Red);

          foreach (var level in fibonacciRetracement.FibonacciLevels)
          {
          Print(level.PercentLevel);

          if (level.PercentLevel &gt; 62) level.IsVisible = false;
          }
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawingsFibonacci" />
      <signature>
        <code>public interface FibonacciLevel</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.FibonacciLevel.PercentLevel">
      <summary>
        Gets or sets the percent level.
      </summary>
      <signature>
        <code>public double PercentLevel { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.FibonacciLevel.IsVisible">
      <summary>
        Defines if the level is visible.
      </summary>
      <signature>
        <code>public bool IsVisible { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartType">
      <summary>
        Represents the predefined chart types.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the Chart ChartIconType
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartTypeSample : Indicator
          {
          protected override void Initialize()
          {
          ShowChartType();

          Chart.ChartTypeChanged += Chart_ChartTypeChanged;
          }

          private void Chart_ChartTypeChanged(ChartTypeEventArgs obj)
          {
          ShowChartType();
          }

          private void ShowChartType()
          {
          Chart.DrawStaticText("type", string.Format("Type: {0}", Chart.ChartType), VerticalAlignment.Top, HorizontalAlignment.Right, Color.Red);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Chart" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Chart" />
      <signature>
        <code>public enum ChartType</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartType.Bars">
      <summary>
        The Bar chart.
      </summary>
      <signature>
        <code>public static ChartType Bars;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartType.Candlesticks">
      <summary>
        The Candlestick chart.
      </summary>
      <signature>
        <code>public static ChartType Candlesticks;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartType.Line">
      <summary>
        The Line chart.
      </summary>
      <signature>
        <code>public static ChartType Line;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartType.Dots">
      <summary>
        The Dots chart.
      </summary>
      <signature>
        <code>public static ChartType Dots;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartType.Area">
      <summary>
        The Area chart.
      </summary>
      <signature>
        <code>public static ChartType Area;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartType.Hlc">
      <summary>
        The HLC chart.
      </summary>
      <signature>
        <code>public static ChartType Hlc;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Color">
      <summary>
        Represents an ARGB (alpha, red, green, blue) color.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to parse a string to color and use it in your code
          // You can use both Hex color codes and color names for Color Code parameter
          [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ColorSample : Indicator
          {
          [Parameter("Color Code", DefaultValue = "#168565")]
          public string ColorCodeParameter { get; set; }

          [Parameter("Color Alpha", DefaultValue = 100, MinValue = 0, MaxValue = 255)]
          public int ColorAlphaParameter { get; set; }

          protected override void Initialize()
          {
          Chart.ColorSettings.BackgroundColor = ParseColor(ColorCodeParameter, ColorAlphaParameter);
          }

          public override void Calculate(int index)
          {
          }

          private Color ParseColor(string colorString, int alpha = 255)
          {
          var color = colorString[0] == '#' ? Color.FromHex(colorString) : Color.FromName(colorString);

          return Color.FromArgb(alpha, color);
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Utility" />
      <signature>
        <code>public sealed class Color</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.A">
      <summary>
        Gets the alpha component value of the color.
      </summary>
      <signature>
        <code>public byte A { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.R">
      <summary>
        Gets the red component value of the color.
      </summary>
      <signature>
        <code>public byte R { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.G">
      <summary>
        Gets the green component value of the color.
      </summary>
      <signature>
        <code>public byte G { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.B">
      <summary>
        Gets the blue component value of the color.
      </summary>
      <signature>
        <code>public byte B { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Color.ToArgb">
      <summary>
        Get the 32-bit ARGB color value.
      </summary>
      <signature>
        <code>public int ToArgb()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Color.ToHexString">
      <summary>
        Get the hex string representation of the color.
      </summary>
      <returns>The hex string representation of the color.</returns>
      <signature>
        <code>public string ToHexString()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Color.ToString">
      <summary>
        Returns a <c>System.String</c> that represents this instance.
      </summary>
      <returns>
        A <c>System.String</c> that represents this instance.
      </returns>
      <signature>
        <code>public string ToString()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Color.Equals(cAlgo.API.Color)">
      <summary>
        Defines whether the specified object is equal to this instance.
      </summary>
      <param name="other">The object to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified <c>System.Object</c> is equal to this instance; otherwise, <c>false</c>.
      </returns>
      <signature>
        <code>public bool Equals(Color other)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Color.Equals(System.Object)">
      <summary>
        Defines whether the specified object is equal to this instance.
      </summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <c>true</c> if the specified <c>System.Object</c> is equal to this instance; otherwise, <c>false</c>.
      </returns>
      <signature>
        <code>public bool Equals(object obj)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Color.GetHashCode">
      <summary>
        Returns the hash code for this instance.
      </summary>
      <signature>
        <code>public int GetHashCode()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Color.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        Creates a color from alpha, red, green and blue components.
      </summary>
      <param name="alpha">Alpha value from 0 to 255</param>
      <param name="red">Red value from 0 to 255</param>
      <param name="green">Green value from 0 to 255</param>
      <param name="blue">Blue value from 0 to 255</param>
      <example>
        <code>
          var greenColor = Color.FromArgb(255, 0, 255, 0);
        </code>
      </example>
      <returns>The Color for specified parameters.</returns>
      <signature>
        <code>public static Color FromArgb(int alpha, int red, int green, int blue)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Color.FromArgb(System.Int32,cAlgo.API.Color)">
      <summary>
        Creates a color from existing color, but with new specified alpha value.
      </summary>
      <param name="alpha">New alpha value from 0 to 255</param>
      <param name="baseColor">Base color from which red, green and blue values will be copied to a new color</param>
      <example>
        <code>
          var transparentBlue = Color.FromArgb(128, Color.Blue);
        </code>
      </example>
      <returns>The Color for specified parameters.</returns>
      <signature>
        <code>public static Color FromArgb(int alpha, Color baseColor)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Color.FromArgb(System.Int32)">
      <summary>
        Creates a color from a 32-bit ARGB value.
      </summary>
      <param name="argb">Color ARGB 32-bit integer value</param>
      <returns>The Color for specified parameter.</returns>
      <signature>
        <code>public static Color FromArgb(int argb)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Color.FromArgb(System.Int32,System.Int32,System.Int32)">
      <summary>
        Creates a color from red, green and blue values. The alpha value is implicitly 255 (fully opaque).
      </summary>
      <param name="red">Red value from 0 to 255</param>
      <param name="green">Green value from 0 to 255</param>
      <param name="blue">Blue value from 0 to 255</param>
      <example>
        <code>
          var greenColor = Color.FromArgb(0, 255, 0);
        </code>
      </example>
      <returns>The Color for specified parameters.</returns>
      <signature>
        <code>public static Color FromArgb(int red, int green, int blue)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Color.FromHex(System.String)">
      <summary>
        Attempts to convert a hex string to a Color.
      </summary>
      <param name="hex">Hex string to convert to a Color</param>
      <example>
        <code>
          var color = Color.FromHex("#808080");
        </code>
      </example>
      <returns>A Color that represents the converted hex string.</returns>
      <signature>
        <code>public static Color FromHex(string hex)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Color.FromName(System.String)">
      <summary>
        Creates a color from the specified name of a predefined color.
      </summary>
      <param name="name">Name of predefined color</param>
      <example>
        <code>
          var greenColor = Color.FromName("Green");
        </code>
      </example>
      <returns>A Color for specified name or color with value #00000000 if the name was not found.</returns>
      <signature>
        <code>public static Color FromName(string name)</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Color.Empty">
      <summary>
        Represents empty color.
      </summary>
      <signature>
        <code>public static Color Empty;</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Transparent">
      <summary>
        Gets a system-defined color that has an ARGB value of #00FFFFFF.
      </summary>
      <signature>
        <code>public static Color Transparent { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.AliceBlue">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFF0F8FF.
      </summary>
      <signature>
        <code>public static Color AliceBlue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.AntiqueWhite">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFAEBD7.
      </summary>
      <signature>
        <code>public static Color AntiqueWhite { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Aqua">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF00FFFF.
      </summary>
      <signature>
        <code>public static Color Aqua { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Aquamarine">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF7FFFD4.
      </summary>
      <signature>
        <code>public static Color Aquamarine { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Azure">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFF0FFFF.
      </summary>
      <signature>
        <code>public static Color Azure { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Beige">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFF5F5DC.
      </summary>
      <signature>
        <code>public static Color Beige { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Bisque">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFE4C4.
      </summary>
      <signature>
        <code>public static Color Bisque { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Black">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF000000.
      </summary>
      <signature>
        <code>public static Color Black { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.BlanchedAlmond">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFEBCD.
      </summary>
      <signature>
        <code>public static Color BlanchedAlmond { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Blue">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF0000FF.
      </summary>
      <signature>
        <code>public static Color Blue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.BlueViolet">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF8A2BE2.
      </summary>
      <signature>
        <code>public static Color BlueViolet { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Brown">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFA52A2A.
      </summary>
      <signature>
        <code>public static Color Brown { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.BurlyWood">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFDEB887.
      </summary>
      <signature>
        <code>public static Color BurlyWood { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.CadetBlue">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF5F9EA0.
      </summary>
      <signature>
        <code>public static Color CadetBlue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Chartreuse">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF7FFF00.
      </summary>
      <signature>
        <code>public static Color Chartreuse { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Chocolate">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFD2691E.
      </summary>
      <signature>
        <code>public static Color Chocolate { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Coral">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFF7F50.
      </summary>
      <signature>
        <code>public static Color Coral { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.CornflowerBlue">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF6495ED.
      </summary>
      <signature>
        <code>public static Color CornflowerBlue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Cornsilk">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFF8DC.
      </summary>
      <signature>
        <code>public static Color Cornsilk { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Crimson">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFDC143C.
      </summary>
      <signature>
        <code>public static Color Crimson { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Cyan">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF00FFFF.
      </summary>
      <signature>
        <code>public static Color Cyan { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DarkBlue">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF00008B.
      </summary>
      <signature>
        <code>public static Color DarkBlue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DarkCyan">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF008B8B.
      </summary>
      <signature>
        <code>public static Color DarkCyan { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DarkGoldenrod">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFB8860B.
      </summary>
      <signature>
        <code>public static Color DarkGoldenrod { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DarkGray">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFA9A9A9.
      </summary>
      <signature>
        <code>public static Color DarkGray { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DarkGreen">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF006400.
      </summary>
      <signature>
        <code>public static Color DarkGreen { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DarkKhaki">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFBDB76B.
      </summary>
      <signature>
        <code>public static Color DarkKhaki { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DarkMagenta">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF8B008B.
      </summary>
      <signature>
        <code>public static Color DarkMagenta { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DarkOliveGreen">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF556B2F.
      </summary>
      <signature>
        <code>public static Color DarkOliveGreen { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DarkOrange">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFF8C00.
      </summary>
      <signature>
        <code>public static Color DarkOrange { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DarkOrchid">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF9932CC.
      </summary>
      <signature>
        <code>public static Color DarkOrchid { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DarkRed">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF8B0000.
      </summary>
      <signature>
        <code>public static Color DarkRed { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DarkSalmon">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFE9967A.
      </summary>
      <signature>
        <code>public static Color DarkSalmon { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DarkSeaGreen">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF8FBC8F.
      </summary>
      <signature>
        <code>public static Color DarkSeaGreen { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DarkSlateBlue">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF483D8B.
      </summary>
      <signature>
        <code>public static Color DarkSlateBlue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DarkSlateGray">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF2F4F4F.
      </summary>
      <signature>
        <code>public static Color DarkSlateGray { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DarkTurquoise">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF00CED1.
      </summary>
      <signature>
        <code>public static Color DarkTurquoise { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DarkViolet">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF9400D3.
      </summary>
      <signature>
        <code>public static Color DarkViolet { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DeepPink">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFF1493.
      </summary>
      <signature>
        <code>public static Color DeepPink { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DeepSkyBlue">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF00BFFF.
      </summary>
      <signature>
        <code>public static Color DeepSkyBlue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DimGray">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF696969.
      </summary>
      <signature>
        <code>public static Color DimGray { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.DodgerBlue">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF1E90FF.
      </summary>
      <signature>
        <code>public static Color DodgerBlue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Firebrick">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFB22222.
      </summary>
      <signature>
        <code>public static Color Firebrick { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.FloralWhite">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFFAF0.
      </summary>
      <signature>
        <code>public static Color FloralWhite { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.ForestGreen">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF228B22.
      </summary>
      <signature>
        <code>public static Color ForestGreen { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Fuchsia">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFF00FF.
      </summary>
      <signature>
        <code>public static Color Fuchsia { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Gainsboro">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFDCDCDC.
      </summary>
      <signature>
        <code>public static Color Gainsboro { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.GhostWhite">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFF8F8FF.
      </summary>
      <signature>
        <code>public static Color GhostWhite { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Gold">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFD700.
      </summary>
      <signature>
        <code>public static Color Gold { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Goldenrod">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFDAA520.
      </summary>
      <signature>
        <code>public static Color Goldenrod { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Gray">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF808080.
      </summary>
      <signature>
        <code>public static Color Gray { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Green">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF008000.
      </summary>
      <signature>
        <code>public static Color Green { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.GreenYellow">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFADFF2F.
      </summary>
      <signature>
        <code>public static Color GreenYellow { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Honeydew">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFF0FFF0.
      </summary>
      <signature>
        <code>public static Color Honeydew { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.HotPink">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFF69B4.
      </summary>
      <signature>
        <code>public static Color HotPink { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.IndianRed">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFCD5C5C.
      </summary>
      <signature>
        <code>public static Color IndianRed { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Indigo">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF4B0082.
      </summary>
      <signature>
        <code>public static Color Indigo { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Ivory">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFFFF0.
      </summary>
      <signature>
        <code>public static Color Ivory { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Khaki">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFF0E68C.
      </summary>
      <signature>
        <code>public static Color Khaki { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Lavender">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFE6E6FA.
      </summary>
      <signature>
        <code>public static Color Lavender { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.LavenderBlush">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFF0F5.
      </summary>
      <signature>
        <code>public static Color LavenderBlush { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.LawnGreen">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF7CFC00.
      </summary>
      <signature>
        <code>public static Color LawnGreen { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.LemonChiffon">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFFACD.
      </summary>
      <signature>
        <code>public static Color LemonChiffon { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.LightBlue">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFADD8E6.
      </summary>
      <signature>
        <code>public static Color LightBlue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.LightCoral">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFF08080.
      </summary>
      <signature>
        <code>public static Color LightCoral { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.LightCyan">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFE0FFFF.
      </summary>
      <signature>
        <code>public static Color LightCyan { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.LightGoldenrodYellow">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFAFAD2.
      </summary>
      <signature>
        <code>public static Color LightGoldenrodYellow { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.LightGray">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFD3D3D3.
      </summary>
      <signature>
        <code>public static Color LightGray { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.LightGreen">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF90EE90.
      </summary>
      <signature>
        <code>public static Color LightGreen { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.LightPink">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFB6C1.
      </summary>
      <signature>
        <code>public static Color LightPink { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.LightSalmon">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFA07A.
      </summary>
      <signature>
        <code>public static Color LightSalmon { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.LightSeaGreen">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF20B2AA.
      </summary>
      <signature>
        <code>public static Color LightSeaGreen { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.LightSkyBlue">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF87CEFA.
      </summary>
      <signature>
        <code>public static Color LightSkyBlue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.LightSlateGray">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF778899.
      </summary>
      <signature>
        <code>public static Color LightSlateGray { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.LightSteelBlue">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFB0C4DE.
      </summary>
      <signature>
        <code>public static Color LightSteelBlue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.LightYellow">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFFFE0.
      </summary>
      <signature>
        <code>public static Color LightYellow { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Lime">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF00FF00.
      </summary>
      <signature>
        <code>public static Color Lime { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.LimeGreen">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF32CD32.
      </summary>
      <signature>
        <code>public static Color LimeGreen { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Linen">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFAF0E6.
      </summary>
      <signature>
        <code>public static Color Linen { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Magenta">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFF00FF.
      </summary>
      <signature>
        <code>public static Color Magenta { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Maroon">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF800000.
      </summary>
      <signature>
        <code>public static Color Maroon { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.MediumAquamarine">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF66CDAA.
      </summary>
      <signature>
        <code>public static Color MediumAquamarine { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.MediumBlue">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF0000CD.
      </summary>
      <signature>
        <code>public static Color MediumBlue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.MediumOrchid">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFBA55D3.
      </summary>
      <signature>
        <code>public static Color MediumOrchid { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.MediumPurple">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF9370DB.
      </summary>
      <signature>
        <code>public static Color MediumPurple { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.MediumSeaGreen">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF3CB371.
      </summary>
      <signature>
        <code>public static Color MediumSeaGreen { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.MediumSlateBlue">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF7B68EE.
      </summary>
      <signature>
        <code>public static Color MediumSlateBlue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.MediumSpringGreen">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF00FA9A.
      </summary>
      <signature>
        <code>public static Color MediumSpringGreen { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.MediumTurquoise">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF48D1CC.
      </summary>
      <signature>
        <code>public static Color MediumTurquoise { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.MediumVioletRed">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFC71585
      </summary>
      <signature>
        <code>public static Color MediumVioletRed { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.MidnightBlue">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF191970.
      </summary>
      <signature>
        <code>public static Color MidnightBlue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.MintCream">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFF5FFFA.
      </summary>
      <signature>
        <code>public static Color MintCream { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.MistyRose">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFE4E1.
      </summary>
      <signature>
        <code>public static Color MistyRose { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Moccasin">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFE4B5.
      </summary>
      <signature>
        <code>public static Color Moccasin { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.NavajoWhite">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFDEAD.
      </summary>
      <signature>
        <code>public static Color NavajoWhite { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Navy">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF000080.
      </summary>
      <signature>
        <code>public static Color Navy { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.OldLace">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFDF5E6.
      </summary>
      <signature>
        <code>public static Color OldLace { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Olive">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF808000.
      </summary>
      <signature>
        <code>public static Color Olive { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.OliveDrab">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF6B8E23.
      </summary>
      <signature>
        <code>public static Color OliveDrab { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Orange">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFA500.
      </summary>
      <signature>
        <code>public static Color Orange { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.OrangeRed">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFF4500.
      </summary>
      <signature>
        <code>public static Color OrangeRed { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Orchid">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFDA70D6.
      </summary>
      <signature>
        <code>public static Color Orchid { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.PaleGoldenrod">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFEEE8AA.
      </summary>
      <signature>
        <code>public static Color PaleGoldenrod { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.PaleGreen">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF98FB98.
      </summary>
      <signature>
        <code>public static Color PaleGreen { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.PaleTurquoise">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFAFEEEE.
      </summary>
      <signature>
        <code>public static Color PaleTurquoise { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.PaleVioletRed">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFDB7093.
      </summary>
      <signature>
        <code>public static Color PaleVioletRed { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.PapayaWhip">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFEFD5.
      </summary>
      <signature>
        <code>public static Color PapayaWhip { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.PeachPuff">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFDAB9.
      </summary>
      <signature>
        <code>public static Color PeachPuff { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Peru">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFCD853F.
      </summary>
      <signature>
        <code>public static Color Peru { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Pink">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFC0CB.
      </summary>
      <signature>
        <code>public static Color Pink { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Plum">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFDDA0DD.
      </summary>
      <signature>
        <code>public static Color Plum { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.PowderBlue">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFB0E0E6.
      </summary>
      <signature>
        <code>public static Color PowderBlue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Purple">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF800080.
      </summary>
      <signature>
        <code>public static Color Purple { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Red">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFF0000.
      </summary>
      <signature>
        <code>public static Color Red { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.RosyBrown">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFBC8F8F.
      </summary>
      <signature>
        <code>public static Color RosyBrown { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.RoyalBlue">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF4169E1.
      </summary>
      <signature>
        <code>public static Color RoyalBlue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.SaddleBrown">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF8B4513.
      </summary>
      <signature>
        <code>public static Color SaddleBrown { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Salmon">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFA8072.
      </summary>
      <signature>
        <code>public static Color Salmon { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.SandyBrown">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFF4A460.
      </summary>
      <signature>
        <code>public static Color SandyBrown { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.SeaGreen">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF2E8B57.
      </summary>
      <signature>
        <code>public static Color SeaGreen { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.SeaShell">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFF5EE.
      </summary>
      <signature>
        <code>public static Color SeaShell { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Sienna">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFA0522D.
      </summary>
      <signature>
        <code>public static Color Sienna { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Silver">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFC0C0C0.
      </summary>
      <signature>
        <code>public static Color Silver { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.SkyBlue">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF87CEEB.
      </summary>
      <signature>
        <code>public static Color SkyBlue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.SlateBlue">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF6A5ACD.
      </summary>
      <signature>
        <code>public static Color SlateBlue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.SlateGray">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF708090.
      </summary>
      <signature>
        <code>public static Color SlateGray { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Snow">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFFAFA.
      </summary>
      <signature>
        <code>public static Color Snow { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.SpringGreen">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF00FF7F.
      </summary>
      <signature>
        <code>public static Color SpringGreen { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.SteelBlue">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF4682B4.
      </summary>
      <signature>
        <code>public static Color SteelBlue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Tan">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFD2B48C.
      </summary>
      <signature>
        <code>public static Color Tan { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Teal">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF008080.
      </summary>
      <signature>
        <code>public static Color Teal { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Thistle">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFD8BFD8.
      </summary>
      <signature>
        <code>public static Color Thistle { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Tomato">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFF6347.
      </summary>
      <signature>
        <code>public static Color Tomato { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Turquoise">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF40E0D0.
      </summary>
      <signature>
        <code>public static Color Turquoise { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Violet">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFEE82EE.
      </summary>
      <signature>
        <code>public static Color Violet { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Wheat">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFF5DEB3.
      </summary>
      <signature>
        <code>public static Color Wheat { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.White">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFFFFF.
      </summary>
      <signature>
        <code>public static Color White { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.WhiteSmoke">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFF5F5F5.
      </summary>
      <signature>
        <code>public static Color WhiteSmoke { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.Yellow">
      <summary>
        Gets a system-defined color that has an ARGB value of #FFFFFF00.
      </summary>
      <signature>
        <code>public static Color Yellow { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Color.YellowGreen">
      <summary>
        Gets a system-defined color that has an ARGB value of #FF9ACD32.
      </summary>
      <signature>
        <code>public static Color YellowGreen { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.IndicatorArea">
      <summary>
        Represents the area where the Indicator is placed.
      </summary>
      <seealso cref="T:cAlgo.API.ChartArea" />
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to use IndicatorArea
          [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class IndicatorAreaSample : Indicator
          {
          private TextBlock _indicatorAreaNumberTextBlock;

          protected override void Initialize()
          {
          var grid = new Grid(1, 2)
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          BackgroundColor = Color.Gold,
          Opacity = 0.7,
          Width = 200
          };

          grid.AddChild(new TextBlock { Text = "Indicator Area #", Margin = 5, FontWeight = FontWeight.ExtraBold, ForegroundColor = Color.Black }, 0, 0);

          _indicatorAreaNumberTextBlock = new TextBlock
          {
          Margin = 5,
          Text = Chart.IndicatorAreas.Count.ToString(),
          FontWeight = FontWeight.ExtraBold,
          ForegroundColor = Color.Black
          };

          grid.AddChild(_indicatorAreaNumberTextBlock, 0, 1);

          IndicatorArea.AddControl(grid);

          Chart.IndicatorAreaAdded += Chart_IndicatorAreaAdded;
          Chart.IndicatorAreaRemoved += Chart_IndicatorAreaRemoved;
          }

          private void Chart_IndicatorAreaRemoved(IndicatorAreaRemovedEventArgs obj)
          {
          _indicatorAreaNumberTextBlock.Text = Chart.IndicatorAreas.Count.ToString();
          }

          private void Chart_IndicatorAreaAdded(IndicatorAreaAddedEventArgs obj)
          {
          _indicatorAreaNumberTextBlock.Text = Chart.IndicatorAreas.Count.ToString();
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Chart" />
      <signature>
        <code>public interface IndicatorArea</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartIndicator">
      <summary>
        The interface representing an indicator attached to a chart.
        Provides properties that allow for accessing various information about an indicator.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartIndicators" />
      <signature>
        <code>public interface ChartIndicator</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartIndicator.Name">
      <summary>
        Gets the name of an indicator.
      </summary>
      <signature>
        <code>public string Name { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartIndicator.InstanceId">
      <summary>
        Gets the ID of a specific indicator instance.
      </summary>
      <signature>
        <code>public string InstanceId { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartIndicator.PanelIndex">
      <summary>
        Gets or sets the index of the panel on which an indicator is displayed.
      </summary>
      <signature>
        <code>public int PanelIndex { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartIndicator.Type">
      <summary>
        Gets the <c>IndicatorType</c> of an indicator.
      </summary>
      <signature>
        <code>public IndicatorType Type { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartIndicator.Parameters">
      <summary>
        Gets the collection of indicator parameters.
      </summary>
      <signature>
        <code>public AlgoInstanceParameters Parameters { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartIndicator.Lines">
      <summary>
        Gets the <c>IReadonlyList</c> of indicator output lines.
      </summary>
      <signature>
        <code>public IReadonlyList&lt;IndicatorLine&gt; Lines { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartIndicators">
      <summary>
        The interface representing a chart indicator instances collection.
        Provides properties and events that allow for accessing various information about indicators attached to a chart.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartIndicators" />
      <signature>
        <code>public interface ChartIndicators</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartIndicators.Item(System.String)">
      <summary>
        Gets an indicator attached to a chart by its instance ID.
      </summary>
      <param name="instanceId">The instance ID of an indicator attached to a chart.</param>
      <signature>
        <code>public ChartIndicator this[string instanceId] { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartIndicators.Count">
      <summary>
        Gets the number of all indicators attached to a chart.
      </summary>
      <signature>
        <code>public int Count { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartIndicators.Add(System.String,System.Object[])">
      <summary>
        Adds a new indicator to a chart.
      </summary>
      <param name="name">The name of an indicator.</param>
      <param name="parameterValues">The indicator parameter values.</param>
      <returns>
        An <c>ChartIndicator</c> representing the added indicator instance.
      </returns>
      <signature>
        <code>public ChartIndicator Add(string name, object[] parameterValues)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartIndicators.Remove(cAlgo.API.ChartIndicator)">
      <summary>
        Removes an indicator from a chart.
      </summary>
      <param name="indicator">
        The <c>ChartIndicator</c> to be removed from a chart.
      </param>
      <returns>True if remove was successful otherwise false.</returns>
      <signature>
        <code>public bool Remove(ChartIndicator indicator)</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartIndicators.IndicatorAdded">
      <summary>
        Occurs when a new indicator is added to a chart.
      </summary>
      <signature>
        <code>public event Action&lt;ChartIndicatorAddedEventArgs&gt; IndicatorAdded;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartIndicators.IndicatorRemoved">
      <summary>
        Occurs when an indicator is removed from a chart.
      </summary>
      <signature>
        <code>public event Action&lt;ChartIndicatorRemovedEventArgs&gt; IndicatorRemoved;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartIndicators.IndicatorModified">
      <summary>
        Occurs when an indicator attached to a chart is modified.
      </summary>
      <signature>
        <code>public event Action&lt;ChartIndicatorModifiedEventArgs&gt; IndicatorModified;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.IndicatorLine">
      <summary>
        The interface representing an indicator line.
        Provides properties that allow for accessing various information about a line.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartIndicators" />
      <signature>
        <code>public interface IndicatorLine</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorLine.Name">
      <summary>
        Gets the name of a line.
      </summary>
      <signature>
        <code>public string Name { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorLine.LineStyle">
      <summary>
        Gets or sets the <c>LineStyle</c> of a line.
      </summary>
      <signature>
        <code>public LineStyle LineStyle { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorLine.Color">
      <summary>
        Gets or sets the <c>Color</c> of a line.
      </summary>
      <signature>
        <code>public Color Color { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorLine.Thickness">
      <summary>
        Gets or sets the thickness of a line.
      </summary>
      <signature>
        <code>public float Thickness { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorLine.IsVisible">
      <summary>
        Gets or sets the visibility of a line.
      </summary>
      <signature>
        <code>public bool IsVisible { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorLine.PlotType">
      <summary>
        Gets the <c>PlotType</c> of a line.
      </summary>
      <signature>
        <code>public PlotType PlotType { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartRobot">
      <summary>
        The interface representing a Robot instance attached to a chart.
        Provides properties that allow for accessing various information about a Robot.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartRobots" />
      <signature>
        <code>public interface ChartRobot</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartRobot.Name">
      <summary>
        Gets the name of a Robot instance.
      </summary>
      <signature>
        <code>public string Name { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartRobot.InstanceId">
      <summary>
        Gets the ID of a specific Robot instance.
      </summary>
      <signature>
        <code>public string InstanceId { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartRobot.Type">
      <summary>
        Gets the <c>RobotType</c> of a Robot instance.
      </summary>
      <signature>
        <code>public RobotType Type { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartRobot.Parameters">
      <summary>
        Gets the collection of Robot parameters.
      </summary>
      <signature>
        <code>public AlgoInstanceParameters Parameters { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartRobot.State">
      <summary>
        Gets the current state of a Robot instance.
      </summary>
      <signature>
        <code>public RobotState State { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartRobot.Start">
      <summary>
        Starts the Robot instance.
      </summary>
      <signature>
        <code>public void Start()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartRobot.Stop">
      <summary>
        Stops the Robot instance.
      </summary>
      <signature>
        <code>public void Stop()</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartRobots">
      <summary>
        The interface representing a chart Robot instances collection.
        Provides properties and events that allow for accessing various information about Robots attached to a chart.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartRobots" />
      <signature>
        <code>public interface ChartRobots</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartRobots.Item(System.String)">
      <summary>
        Gets a Robot attached instance to a chart by its instance ID.
      </summary>
      <param name="instanceId">The instance ID of a Robot attached to a chart.</param>
      <signature>
        <code>public ChartRobot this[string instanceId] { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartRobots.Count">
      <summary>
        Gets the number of all Robots attached to a chart.
      </summary>
      <signature>
        <code>public int Count { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartRobots.Add(System.String,System.Object[])">
      <summary>
        Adds a new Robot instance to a chart.
      </summary>
      <param name="name">The name of a Robot.</param>
      <param name="parameterValues">The Robot parameter values.</param>
      <returns>
        An <c>ChartRobot</c> representing the added Robot instance.
      </returns>
      <signature>
        <code>public ChartRobot Add(string name, object[] parameterValues)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartRobots.Remove(cAlgo.API.ChartRobot)">
      <summary>
        Removes a Robot instance from a chart.
      </summary>
      <param name="robot">
        The <c>ChartRobot</c> to be removed from a chart.
      </param>
      <returns>True if remove was successful otherwise false.</returns>
      <signature>
        <code>public bool Remove(ChartRobot robot)</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartRobots.RobotAdded">
      <summary>
        Occurs when a Robot is added to a chart.
      </summary>
      <signature>
        <code>public event Action&lt;ChartRobotAddedEventArgs&gt; RobotAdded;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartRobots.RobotRemoved">
      <summary>
        Occurs when a Robot is removed from a chart.
      </summary>
      <signature>
        <code>public event Action&lt;ChartRobotRemovedEventArgs&gt; RobotRemoved;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartRobots.RobotModified">
      <summary>
        Occurs when a chart Robot instance is modified.
      </summary>
      <signature>
        <code>public event Action&lt;ChartRobotModifiedEventArgs&gt; RobotModified;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartRobots.RobotStarted">
      <summary>
        Occurs when a chart Robot instance is started.
      </summary>
      <signature>
        <code>public event Action&lt;ChartRobotStartedEventArgs&gt; RobotStarted;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartRobots.RobotStopped">
      <summary>
        Occurs when a chart Robot instance is stopped.
      </summary>
      <signature>
        <code>public event Action&lt;ChartRobotStoppedEventArgs&gt; RobotStopped;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.RobotState">
      <summary>
        Represents the predefined states of a Robot instance.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ChartRobots" />
      <signature>
        <code>public enum RobotState</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.RobotState.Stopped">
      <summary>
        Robot instance is stopped.
      </summary>
      <signature>
        <code>public static RobotState Stopped;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.RobotState.Running">
      <summary>
        Robot instance is running.
      </summary>
      <signature>
        <code>public static RobotState Running;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.RobotState.Stopping">
      <summary>
        Stop was requested, but Robot instance has not stopped yet
      </summary>
      <signature>
        <code>public static RobotState Stopping;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.RobotState.Restarting">
      <summary>
        Restarting Robot instance because of crash or change of parameters, symbols, account, etc.
      </summary>
      <signature>
        <code>public static RobotState Restarting;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Collections.IReadonlyList`1">
      <summary>
        Represents a read only collection of a specified type
      </summary>
      <typeparam name="T">
      </typeparam>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Collections" />
      <signature>
        <code>public interface IReadonlyList&lt;T&gt;</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Collections.IReadonlyList`1.Count">
      <summary>
        The total number of elements contained in the collection
      </summary>
      <signature>
        <code>public int Count { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Collections.IReadonlyList`1.Item(System.Int32)">
      <summary>
        Represents the item contained in the collection at a specific index
      </summary>
      <param name="index">The position in the collection where the item is contained</param>
      <signature>
        <code>public T this[int index] { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ColorTheme">
      <summary>
        Represents the color theme.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to use ColorTheme Enum which is the color of platform theme on your indicators/cBots
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ColorThemeSample : Indicator
          {
          protected override void Initialize()
          {
          ChangeChartBackgroundColorBasedOnTheme(Application.ColorTheme);

          Application.ColorThemeChanged += Application_ColorThemeChanged;
          }

          private void Application_ColorThemeChanged(ColorThemeChangeEventArgs obj)
          {
          ChangeChartBackgroundColorBasedOnTheme(obj.ColorTheme);
          }

          private void ChangeChartBackgroundColorBasedOnTheme(ColorTheme colorTheme)
          {
          if (colorTheme == ColorTheme.Dark)
          {
          Chart.ColorSettings.BackgroundColor = Color.White;
          }
          else if (colorTheme == ColorTheme.Light)
          {
          Chart.ColorSettings.BackgroundColor = Color.Black;
          }
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Application" />
      <signature>
        <code>public enum ColorTheme</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ColorTheme.Dark">
      <summary>
        The dark color theme.
      </summary>
      <signature>
        <code>public static ColorTheme Dark;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ColorTheme.Light">
      <summary>
        The light color theme.
      </summary>
      <signature>
        <code>public static ColorTheme Light;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.CharacterCasing">
      <summary>
        Specifies the case of characters typed manually into a TextBox control.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This indicator shows how to use CharacterCasing on text box controls
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class CharacterCasingSample : Indicator
          {
          protected override void Initialize()
          {
          var stackPanel = new StackPanel
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          BackgroundColor = Color.Gold,
          Opacity = 0.6,
          Width = 200
          };

          stackPanel.AddChild(new TextBlock
          {
          Text = "Lower Character Casing",
          Margin = new Thickness(10, 10, 10, 0),
          ForegroundColor = Color.Red,
          FontWeight = FontWeight.ExtraBold
          });

          stackPanel.AddChild(new TextBox
          {
          CharacterCasing = CharacterCasing.Lower,
          Margin = 10
          });

          stackPanel.AddChild(new TextBlock
          {
          Text = "Upper Character Casing",
          Margin = new Thickness(10, 10, 10, 0),
          ForegroundColor = Color.Red,
          FontWeight = FontWeight.ExtraBold
          });

          stackPanel.AddChild(new TextBox
          {
          CharacterCasing = CharacterCasing.Upper,
          Margin = 10
          });

          stackPanel.AddChild(new TextBlock
          {
          Text = "Normal Character Casing",
          Margin = new Thickness(10, 10, 10, 0),
          ForegroundColor = Color.Red,
          FontWeight = FontWeight.ExtraBold
          });

          stackPanel.AddChild(new TextBox
          {
          CharacterCasing = CharacterCasing.Normal,
          Margin = 10
          });

          Chart.AddControl(stackPanel);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public enum CharacterCasing</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.CharacterCasing.Normal">
      <summary>
        Characters typed into a TextBox are not converted.
      </summary>
      <signature>
        <code>public static CharacterCasing Normal;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.CharacterCasing.Lower">
      <summary>
        Characters typed into a TextBox are converted to lowercase.
      </summary>
      <signature>
        <code>public static CharacterCasing Lower;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.CharacterCasing.Upper">
      <summary>
        Characters typed into a TextBox are converted to uppercase.
      </summary>
      <signature>
        <code>public static CharacterCasing Upper;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ControlBase">
      <summary>
        Represents the base of chart controls.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public abstract class ControlBase</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ControlBase.#ctor">
      <summary>
        Initializes a new instance of the chart control.
      </summary>
      <signature>
        <code>public ControlBase()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ControlBase.UniqueId">
      <summary>
        Gets the unique identifier of a chart control.
      </summary>
      <signature>
        <code>public Guid UniqueId { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ControlBase.Style">
      <summary>
        Gets or sets the style of a chart control.
      </summary>
      <signature>
        <code>public Style Style { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ControlBase.Left">
      <summary>
        Gets or sets the position of the chart control to the left side of the chart area. Works only when the control is
        inside the Canvas panel.
      </summary>
      <value>The left.</value>
      <signature>
        <code>public double Left { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ControlBase.Top">
      <summary>
        Gets or sets the position of the chart control to the top of the chart area. Works only when the control is inside
        the Canvas panel.
      </summary>
      <value>The top.</value>
      <signature>
        <code>public double Top { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ControlBase.Right">
      <summary>
        Gets or sets the position of the chart control to the rignt side of the chart area. Works only when the control is
        inside the Canvas panel.
      </summary>
      <value>The right.</value>
      <signature>
        <code>public double Right { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ControlBase.Bottom">
      <summary>
        Gets or sets the position of the chart control to the bottom of the chart area. Works only when the control is
        inside the Canvas panel.
      </summary>
      <value>The bottom.</value>
      <signature>
        <code>public double Bottom { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ControlBase.Width">
      <summary>
        Gets or sets the width of the chart control.
      </summary>
      <value>The width.</value>
      <signature>
        <code>public double Width { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ControlBase.Height">
      <summary>
        Gets or sets the hight of the chart control.
      </summary>
      <value>The height.</value>
      <signature>
        <code>public double Height { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ControlBase.MinWidth">
      <summary>
        Gets or sets the minimum width of the chart control.
      </summary>
      <value>The minimum width.</value>
      <signature>
        <code>public double MinWidth { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ControlBase.MinHeight">
      <summary>
        Gets or sets the minimum height of the chart control.
      </summary>
      <value>The minimum height.</value>
      <signature>
        <code>public double MinHeight { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ControlBase.MaxWidth">
      <summary>
        Gets or sets the maximum width of the chart control.
      </summary>
      <signature>
        <code>public double MaxWidth { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ControlBase.MaxHeight">
      <summary>
        Gets or sets the maximum height of the chart control.
      </summary>
      <signature>
        <code>public double MaxHeight { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ControlBase.IsEnabled">
      <summary>
        Gets or sets the value indicating whether this instance of the chart control is enabled.
      </summary>
      <signature>
        <code>public bool IsEnabled { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ControlBase.IsVisible">
      <summary>
        Gets or sets the value indicating whether this instance of the chart control instance is visible.
      </summary>
      <signature>
        <code>public bool IsVisible { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ControlBase.Opacity">
      <summary>
        Gets or sets the level of opacity of the chart control instance. Can be set from 0 (transparent) to 1 (opaque).
        Values higher than 1 will be set to 1, values below 0 will be set to 0.
      </summary>
      <signature>
        <code>public double Opacity { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ControlBase.Margin">
      <summary>
        Gets or sets the level of thickness of the margin of the chart control instance. Property value can be set using
        Thickness, number, or a string new Thickness(5), new Thickness(1, 2, 3, 4), 5, "5", "1 2 3 4".
      </summary>
      <signature>
        <code>public Thickness Margin { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ControlBase.VerticalAlignment">
      <summary>
        Gets or sets the vertical alignment of the chart control instance.
      </summary>
      <signature>
        <code>public VerticalAlignment VerticalAlignment { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ControlBase.HorizontalAlignment">
      <summary>
        Gets or sets the horizontal alignment of the chart control instance.
      </summary>
      <signature>
        <code>public HorizontalAlignment HorizontalAlignment { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ControlBase.Dock">
      <summary>
        Specifies the dock position of the chart control instance. Works only inside the DockPanel.
      </summary>
      <signature>
        <code>public Dock Dock { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ControlBase.IsHitTestVisible">
      <summary>
        Gets or sets a value that declares if the chart control instance is visible for the mouse hit testing. If set to
        false, then the control will not handle any mouse events.
      </summary>
      <signature>
        <code>public bool IsHitTestVisible { get; set; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ControlBase.ResetProperty(cAlgo.API.ControlProperty)">
      <summary>
        Sets the property to the default value and removes its privelege over the style.
      </summary>
      <param name="property">Control Property</param>
      <signature>
        <code>public void ResetProperty(ControlProperty property)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ControlProperty">
      <summary>
        Represents the Control property enumeration used in Style to get or set a style for a specific property.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use ControlProperty in control style
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ControlPropertySample : Indicator
          {
          protected override void Initialize()
          {
          var style = new Style();

          style.Set(ControlProperty.Margin, 5);
          style.Set(ControlProperty.ForegroundColor, Color.Blue);
          style.Set(ControlProperty.FontSize, 14);
          style.Set(ControlProperty.Width, 100);

          var textBlock = new TextBlock
          {
          Text = "Styled Text Block",
          Style = style,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center
          };

          Chart.AddControl(textBlock);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Style" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsStyles" />
      <signature>
        <code>public enum ControlProperty</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.BackgroundColor">
      <summary>
        The background color. Property value can be set using color values, or use the strings Color.Red, Color.FromName("Red"), Color.FromArgb(255, 0, 0), Color.FromHex("#ff0000"), "Red", "#ff0000".
      </summary>
      <signature>
        <code>public static ControlProperty BackgroundColor;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.ForegroundColor">
      <summary>
        The foreground color. Property value can be set using color values, or use the strings Color.Red, Color.FromName("Red"), Color.FromArgb(255, 0, 0), Color.FromHex("#ff0000"), "Red", "#ff0000".
      </summary>
      <signature>
        <code>public static ControlProperty ForegroundColor;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.Opacity">
      <summary>
        The opacity of the control. Can be set from 0 (transparent) to 1 (opaque). Values higher than 1 will be set to 1, values below 0 will be set to 0.
      </summary>
      <signature>
        <code>public static ControlProperty Opacity;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.MinWidth">
      <summary>
        The minimum width of the control.
      </summary>
      <signature>
        <code>public static ControlProperty MinWidth;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.MaxWidth">
      <summary>
        The maximum width of the control.
      </summary>
      <signature>
        <code>public static ControlProperty MaxWidth;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.MinHeight">
      <summary>
        The minimum hight of the control.
      </summary>
      <signature>
        <code>public static ControlProperty MinHeight;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.MaxHeight">
      <summary>
        The maximum hight of the control.
      </summary>
      <signature>
        <code>public static ControlProperty MaxHeight;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.Width">
      <summary>
        The width of the control.
      </summary>
      <signature>
        <code>public static ControlProperty Width;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.Height">
      <summary>
        The height of the control.
      </summary>
      <signature>
        <code>public static ControlProperty Height;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.Padding">
      <summary>
        The padding of the control. Property value can be set using Thickness, number, or a string new Thickness(5), new Thickness(1, 2, 3, 4), 5, "5", "1 2 3 4".
      </summary>
      <signature>
        <code>public static ControlProperty Padding;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.BorderThickness">
      <summary>
        The thickness of the border of the control. Property value can be set using Thickness, number, or a string new Thickness(5), new Thickness(1, 2, 3, 4), 5, "5", "1 2 3 4".
      </summary>
      <signature>
        <code>public static ControlProperty BorderThickness;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.CornerRadius">
      <summary>
        The radius of the corner of the control. Property value can be set using CornerRadius, number, or a string: new CornerRadius(5), new CornerRadius(1, 2, 3, 4).
      </summary>
      <signature>
        <code>public static ControlProperty CornerRadius;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.HorizontalContentAlignment">
      <summary>
        The horizontal content alignment.
      </summary>
      <signature>
        <code>public static ControlProperty HorizontalContentAlignment;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.VerticalContentAlignment">
      <summary>
        The vertical content alignment.
      </summary>
      <signature>
        <code>public static ControlProperty VerticalContentAlignment;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.TextAlignment">
      <summary>
        The alignment of the content.
      </summary>
      <signature>
        <code>public static ControlProperty TextAlignment;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.Margin">
      <summary>
        The margin of the content. Property value can be set using Thickness, number, or a string new Thickness(5), new Thickness(1, 2, 3, 4), 5, "5", "1 2 3 4".
      </summary>
      <signature>
        <code>public static ControlProperty Margin;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.FontWeight">
      <summary>
        The content font weight. Property value can be set using the FontWeight enumerations: FontWeight.Bold, FontWeight.SemiBold, FontWeight.Light, FontWeight.Thin, etc.
      </summary>
      <signature>
        <code>public static ControlProperty FontWeight;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.FontStyle">
      <summary>
        The content font style. Property value can be set using the FontStyle enumeration: FontWeight.Italic or FontWeight.Oblique.
      </summary>
      <signature>
        <code>public static ControlProperty FontStyle;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.FontFamily">
      <summary>
        The font family.
      </summary>
      <signature>
        <code>public static ControlProperty FontFamily;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.FontSize">
      <summary>
        The font size.
      </summary>
      <signature>
        <code>public static ControlProperty FontSize;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.BorderColor">
      <summary>
        The border color. Property value can be set using color values, or use the strings Color.Red, Color.FromName("Red"), Color.FromArgb(255, 0, 0), Color.FromHex("#ff0000"), "Red", "#ff0000".
      </summary>
      <signature>
        <code>public static ControlProperty BorderColor;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlProperty.CaretColor">
      <summary>
        The caret color. Property value can be set using color values, or use the strings Color.Red, Color.FromName("Red"), Color.FromArgb(255, 0, 0), Color.FromHex("#ff0000"), "Red", "#ff0000".
      </summary>
      <signature>
        <code>public static ControlProperty CaretColor;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ControlState">
      <summary>
        Represents the chart control state.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsStyles" />
      <signature>
        <code>public enum ControlState</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlState.Hover">
      <summary>
        The hover.
      </summary>
      <signature>
        <code>public static ControlState Hover;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlState.Pressed">
      <summary>
        The pressed.
      </summary>
      <signature>
        <code>public static ControlState Pressed;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlState.Disabled">
      <summary>
        The disabled.
      </summary>
      <signature>
        <code>public static ControlState Disabled;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlState.Checked">
      <summary>
        The checked.
      </summary>
      <signature>
        <code>public static ControlState Checked;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlState.DarkTheme">
      <summary>
        The dark theme.
      </summary>
      <signature>
        <code>public static ControlState DarkTheme;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ControlState.LightTheme">
      <summary>
        The light theme.
      </summary>
      <signature>
        <code>public static ControlState LightTheme;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Border">
      <summary>
        Represents the border.
      </summary>
      <seealso cref="T:cAlgo.API.ControlBase" />
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // A sample indicator that shows how to use Border chart control
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class BorderSample : Indicator
          {
          protected override void Initialize()
          {
          var border = new Border
          {
          BorderColor = Color.Yellow,
          BorderThickness = 2,
          Opacity = 0.5,
          BackgroundColor = Color.Violet,
          HorizontalAlignment = HorizontalAlignment.Right,
          VerticalAlignment = VerticalAlignment.Bottom,
          Width = 200,
          Height = 100,
          Margin = 10
          };

          var stackPanel = new StackPanel
          {
          Orientation = Orientation.Vertical
          };

          stackPanel.AddChild(new TextBlock
          {
          Text = "Text",
          Margin = 5,
          HorizontalAlignment = HorizontalAlignment.Center,
          FontWeight = FontWeight.ExtraBold
          });

          stackPanel.AddChild(new Button
          {
          Text = "Button",
          Margin = 5,
          HorizontalAlignment = HorizontalAlignment.Center,
          FontWeight = FontWeight.ExtraBold
          });

          stackPanel.AddChild(new TextBox
          {
          Text = "Type text...",
          Margin = 5,
          HorizontalAlignment = HorizontalAlignment.Center,
          FontWeight = FontWeight.ExtraBold,
          Width = 100
          });

          border.Child = stackPanel;

          Chart.AddControl(border);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public class Border : ControlBase</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Border.#ctor">
      <summary>
        Initializes a new instance of the Border class.
      </summary>
      <signature>
        <code>public Border()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Border.Child">
      <summary>
        Gets or sets the border child object.
      </summary>
      <signature>
        <code>public ControlBase Child { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Border.BorderThickness">
      <summary>
        Gets or sets the border thickness. Property value can be set using Thickness, number, or a string new Thickness(5),
        new Thickness(1, 2, 3, 4), 5, "5", "1 2 3 4".
      </summary>
      <signature>
        <code>public Thickness BorderThickness { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Border.Padding">
      <summary>
        Gets or sets the border padding thickness. Property value can be set using Thickness, number, or a string new
        Thickness(5), new Thickness(1, 2, 3, 4), 5, "5", "1 2 3 4".
      </summary>
      <signature>
        <code>public Thickness Padding { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Border.CornerRadius">
      <summary>
        Gets or sets the border corner radius. Property value can be set using CornerRadius, number, or a string: new
        CornerRadius(5), new CornerRadius(1, 2, 3, 4).
      </summary>
      <signature>
        <code>public CornerRadius CornerRadius { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Border.BorderColor">
      <summary>
        Gets or sets the border line color. Check the Color class for the ARGB (alpha, red, green, blue) color values, or
        use the strings Color.Red, Color.FromName("Red"), Color.FromArgb(255, 0, 0), Color.FromHex("#ff0000"), "Red",
        "#ff0000".
      </summary>
      <signature>
        <code>public Color BorderColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Border.BackgroundColor">
      <summary>
        Gets or sets the color of the border background. Check the Color class for the ARGB (alpha, red, green, blue) color
        values, or use the strings Color.Red, Color.FromName("Red"), Color.FromArgb(255, 0, 0), Color.FromHex("#ff0000"),
        "Red", "#ff0000".
      </summary>
      <signature>
        <code>public Color BackgroundColor { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Button">
      <summary>
        Represents the button.
      </summary>
      <seealso cref="T:cAlgo.API.Control" />
      <example>
        <code>
          using cAlgo.API;
          using System;
          using System.Linq;

          namespace cAlgo
          {
          // This sample indicator shows how to use Button control and handle its clicked event
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ButtonSample : Indicator
          {
          protected override void Initialize()
          {
          var stackPanel = new StackPanel
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          BackgroundColor = Color.Gold,
          Opacity = 0.7
          };

          for (int i = 0; i &lt; 5; i++)
          {
          var button = new Button
          {
          Text = "Button #" + i,
          Margin = 10
          };

          button.Click += Button_Click;

          stackPanel.AddChild(button);
          }

          Chart.AddControl(stackPanel);
          }

          private void Button_Click(ButtonClickEventArgs obj)
          {
          var textSplit = obj.Button.Text.Split(' ').TakeWhile(text =&gt; !text.Equals("Clicked", StringComparison.OrdinalIgnoreCase)).ToArray();

          obj.Button.Text = string.Join(" ", textSplit) + " Clicked";
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public class Button : Control</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Button.#ctor">
      <summary>
        Initializes a new instance of the Button class.
      </summary>
      <signature>
        <code>public Button()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Button.Text">
      <summary>
        Gets or sets the text.
      </summary>
      <signature>
        <code>public string Text { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Button.CornerRadius">
      <summary>
        Gets or sets the border corner radius. Property value can be set using CornerRadius, number, or a string: new
        CornerRadius(5), new CornerRadius(1, 2, 3, 4).
      </summary>
      <signature>
        <code>public CornerRadius CornerRadius { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Button.BorderColor">
      <summary>
        Gets or sets the border line color. Check the Color class for the ARGB (alpha, red, green, blue) color values, or
        use the strings Color.Red, Color.FromName("Red"), Color.FromArgb(255, 0, 0), Color.FromHex("#ff0000"), "Red",
        "#ff0000".
      </summary>
      <signature>
        <code>public Color BorderColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Button.BorderThickness">
      <summary>
        Gets or sets the border thickness.
      </summary>
      <signature>
        <code>public Thickness BorderThickness { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Button.Content">
      <summary>
        Gets or sets the content.
      </summary>
      <signature>
        <code>public ControlBase Content { get; set; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Button.Click">
      <summary>
        Occurs when the button is clicked.
      </summary>
      <signature>
        <code>public event Action&lt;ButtonClickEventArgs&gt; Click;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.CheckBox">
      <summary>
        Represents the Checkbox.
      </summary>
      <seealso cref="T:cAlgo.API.Control" />
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use checkbox control and handle its checked/unchecked events
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class CheckBoxControlSample : Indicator
          {
          protected override void Initialize()
          {
          var stackPanel = new StackPanel
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          BackgroundColor = Color.Gold
          };

          var checkBox = new CheckBox
          {
          Text = "Unchecked",
          Margin = 10,
          FontWeight = FontWeight.ExtraBold
          };

          checkBox.Checked += CheckBox_Checked;
          checkBox.Unchecked += CheckBox_Unchecked;

          stackPanel.AddChild(checkBox);

          Chart.AddControl(stackPanel);
          }

          private void CheckBox_Unchecked(CheckBoxEventArgs obj)
          {
          obj.CheckBox.Text = "Unchecked";
          }

          private void CheckBox_Checked(CheckBoxEventArgs obj)
          {
          obj.CheckBox.Text = "Checked";
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public class CheckBox : Control</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.CheckBox.#ctor">
      <summary>
        Initializes a new instance of the checkbox class.
      </summary>
      <signature>
        <code>public CheckBox()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.CheckBox.IsThreeState">
      <summary>
        Checks if the checkbox may be of three states - checked, unchecked and indeterminate.
      </summary>
      <signature>
        <code>public bool IsThreeState { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.CheckBox.IsChecked">
      <summary>
        Gets or sets a value indicating whether the checkbox is checked.
      </summary>
      <signature>
        <code>public bool? IsChecked { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.CheckBox.Text">
      <summary>
        Gets or sets the checkbox text.
      </summary>
      <signature>
        <code>public string Text { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.CheckBox.Content">
      <summary>
        Gets or sets the content.
      </summary>
      <signature>
        <code>public ControlBase Content { get; set; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.CheckBox.Click">
      <summary>
        Occurs when clicked.
      </summary>
      <signature>
        <code>public event Action&lt;CheckBoxEventArgs&gt; Click;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.CheckBox.Checked">
      <summary>
        Occurs when checked.
      </summary>
      <signature>
        <code>public event Action&lt;CheckBoxEventArgs&gt; Checked;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.CheckBox.Unchecked">
      <summary>
        Occurs when unchecked.
      </summary>
      <signature>
        <code>public event Action&lt;CheckBoxEventArgs&gt; Unchecked;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.CheckBox.Indeterminate">
      <summary>
        Occurs when indeterminate.
      </summary>
      <signature>
        <code>public event Action&lt;CheckBoxEventArgs&gt; Indeterminate;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ComboBox">
      <summary>
        A control that shows drop down list of items and allows user to select a single item from the list
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public class ComboBox : Control</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ComboBox.#ctor">
      <summary>
        Creates a new empty ComboBox with default ComboBox Style
      </summary>
      <signature>
        <code>public ComboBox()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ComboBox.SelectedItem">
      <summary>
        Set / Get the ComboBox selected item
      </summary>
      <signature>
        <code>public string SelectedItem { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ComboBox.SelectedIndex">
      <summary>
        Set / Get the ComboBox selected item index
      </summary>
      <signature>
        <code>public int SelectedIndex { get; set; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ComboBox.AddItem(System.String)">
      <summary>
        Adds a new item to the ComboBox
      </summary>
      <param name="item">The string value that will be added on ComboBox</param>
      <signature>
        <code>public void AddItem(string item)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ComboBox.RemoveItem(System.String)">
      <summary>
        Removes an existing item from the ComboBox
      </summary>
      <param name="item">The string value that will be removed from ComboBox</param>
      <signature>
        <code>public void RemoveItem(string item)</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ComboBox.SelectedItemChanged">
      <summary>
        This event will trigger if the ComboBox selected item changed
      </summary>
      <signature>
        <code>public event Action&lt;ComboBoxSelectedItemChangedEventArgs&gt; SelectedItemChanged;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Control">
      <summary>
        Represents the Chart Control class.
      </summary>
      <seealso cref="T:cAlgo.API.ControlBase" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public abstract class Control : ControlBase</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Control.#ctor">
      <summary>
        Initializes a new instance of the chart control.
      </summary>
      <signature>
        <code>public Control()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Control.ForegroundColor">
      <summary>
        Gets or sets the color of the chart control foreground. Check the Color class for the ARGB (alpha, red, green,
        blue) color values, or use the strings Color.Red, Color.FromName("Red"), Color.FromArgb(255, 0, 0),
        Color.FromHex("#ff0000"), "Red", "#ff0000".
      </summary>
      <signature>
        <code>public Color ForegroundColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Control.BackgroundColor">
      <summary>
        Gets or sets the color of the chart control background.
      </summary>
      <signature>
        <code>public Color BackgroundColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Control.Padding">
      <summary>
        Gets or sets the chart control padding. Property value can be set using Thickness, number, or a string new
        Thickness(5), new Thickness(1, 2, 3, 4), 5, "5", "1 2 3 4".
      </summary>
      <signature>
        <code>public Thickness Padding { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Control.VerticalContentAlignment">
      <summary>
        Gets or sets the vertical content alignment.
      </summary>
      <signature>
        <code>public VerticalAlignment VerticalContentAlignment { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Control.HorizontalContentAlignment">
      <summary>
        Gets or sets the horizontal content alignment.
      </summary>
      <signature>
        <code>public HorizontalAlignment HorizontalContentAlignment { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Control.FontWeight">
      <summary>
        Gets or sets the font weight.
      </summary>
      <signature>
        <code>public FontWeight FontWeight { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Control.FontStyle">
      <summary>
        Gets or sets the font style.
      </summary>
      <signature>
        <code>public FontStyle FontStyle { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Control.FontFamily">
      <summary>
        Gets or sets the font family.
      </summary>
      <signature>
        <code>public string FontFamily { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Control.FontSize">
      <summary>
        Gets or sets the font size.
      </summary>
      <signature>
        <code>public double FontSize { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Image">
      <summary>
        Represents the image chart control.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use image control to show images
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ImageSample : Indicator
          {
          protected override void Initialize()
          {
          var image = new Image
          {
          // Logo is an icon file inside project resources
          Source = Properties.Resources.Logo,
          Width = 200,
          Height = 200,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          };

          Chart.AddControl(image);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
        <code>
          using cAlgo.API;
          using System.IO;

          namespace cAlgo
          {
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.FullAccess)]
          public class ImageSample : Indicator
          {
          [Parameter("Image File Path")]
          public string ImageFilePath { get; set; }

          protected override void Initialize()
          {
          if (!File.Exists(ImageFilePath))
          {
          Print($"Image not found: {ImageFilePath}");

          return;
          }

          var imageBytes = File.ReadAllBytes(ImageFilePath);

          var image = new Image
          {
          Source = imageBytes,
          Width = 200,
          Height = 200,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center
          };

          Chart.AddControl(image);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public class Image : ControlBase</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Image.#ctor">
      <summary>
        Initializes a new instance of the Image class.
      </summary>
      <signature>
        <code>public Image()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Image.Source">
      <summary>
        Gets or sets the source of the image.
      </summary>
      <signature>
        <code>public object Source { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Image.Stretch">
      <summary>
        Gets or sets a value that describes how an Image should be stretched to fill the destination rectangle.
      </summary>
      <signature>
        <code>public Stretch Stretch { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Image.StretchDirection">
      <summary>
        Gets or sets a value that indicates how the image is scaled.
      </summary>
      <signature>
        <code>public StretchDirection StretchDirection { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.RadioButton">
      <summary>
        Reporesents the Radiobutton chart control type.
      </summary>
      <seealso cref="T:cAlgo.API.Control" />
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use the Radio button chart control
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class RadioButtonSample : Indicator
          {
          protected override void Initialize()
          {
          var stackPanel = new StackPanel
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          BackgroundColor = Color.Gold,
          Opacity = 0.7
          };

          var firstRadioButton = new RadioButton
          {
          Text = "Unchecked"
          };

          firstRadioButton.Checked += RadioButton_Checked;
          firstRadioButton.Unchecked += RadioButton_Unchecked;

          stackPanel.AddChild(firstRadioButton);

          var secondRadioButton = new RadioButton
          {
          Text = "Unchecked"
          };

          secondRadioButton.Checked += RadioButton_Checked;
          secondRadioButton.Unchecked += RadioButton_Unchecked;

          stackPanel.AddChild(secondRadioButton);

          Chart.AddControl(stackPanel);
          }

          private void RadioButton_Unchecked(RadioButtonEventArgs obj)
          {
          var radioButton = obj.RadioButton;

          radioButton.Text = "Unchecked";
          }

          private void RadioButton_Checked(RadioButtonEventArgs obj)
          {
          var radioButton = obj.RadioButton;

          radioButton.Text = "Checked";
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public class RadioButton : Control</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.RadioButton.#ctor">
      <summary>
        Initializes a new instance of the Radiobutton class.
      </summary>
      <signature>
        <code>public RadioButton()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.RadioButton.IsChecked">
      <summary>
        Defines if the radiobutton is checked.
      </summary>
      <signature>
        <code>public bool IsChecked { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.RadioButton.Text">
      <summary>
        Gets or sets the text.
      </summary>
      <signature>
        <code>public string Text { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.RadioButton.Content">
      <summary>
        Gets or sets the content.
      </summary>
      <signature>
        <code>public ControlBase Content { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.RadioButton.GroupName">
      <summary>
        Gets or sets the name of the group.
      </summary>
      <signature>
        <code>public string GroupName { get; set; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.RadioButton.Click">
      <summary>
        Occurs when clicked.
      </summary>
      <signature>
        <code>public event Action&lt;RadioButtonEventArgs&gt; Click;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.RadioButton.Checked">
      <summary>
        Occurs when checked.
      </summary>
      <signature>
        <code>public event Action&lt;RadioButtonEventArgs&gt; Checked;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.RadioButton.Unchecked">
      <summary>
        Occurs when unchecked.
      </summary>
      <signature>
        <code>public event Action&lt;RadioButtonEventArgs&gt; Unchecked;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ScrollViewer">
      <summary>
        Represents a scrollable area that can contain other visible elements.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to create a scrollable chart controls container via ScrollViewer control
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ScrollViewerSample : Indicator
          {
          protected override void Initialize()
          {
          var scrollViewer = new ScrollViewer
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          BackgroundColor = Color.Gold,
          Opacity = 0.7,
          HorizontalScrollBarVisibility = ScrollBarVisibility.Auto,
          VerticalScrollBarVisibility = ScrollBarVisibility.Visible,
          Height = 100
          };

          var grid = new Grid(10, 2)
          {
          BackgroundColor = Color.Gold,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          };

          scrollViewer.Content = grid;

          for (int iRow = 0; iRow &lt; 10; iRow++)
          {
          grid.AddChild(new TextBlock
          {
          Text = "Text",
          Margin = 5,
          ForegroundColor = Color.Black,
          FontWeight = FontWeight.ExtraBold
          }, iRow, 0);

          grid.AddChild(new Button
          {
          Text = "Button",
          Margin = 5,
          ForegroundColor = Color.Black,
          FontWeight = FontWeight.ExtraBold
          }, iRow, 1);
          }

          Chart.AddControl(scrollViewer);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayoutScrollViewer" />
      <signature>
        <code>public class ScrollViewer : Control</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ScrollViewer.#ctor">
      <summary>
        Initializes a new instance of the Scroll viewer class.
      </summary>
      <signature>
        <code>public ScrollViewer()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ScrollViewer.HorizontalScrollBarVisibility">
      <summary>
        Defines the horizontal scroll bar visibility.
      </summary>
      <signature>
        <code>public ScrollBarVisibility HorizontalScrollBarVisibility { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ScrollViewer.VerticalScrollBarVisibility">
      <summary>
        Defines the vertical scroll bar visibility.
      </summary>
      <signature>
        <code>public ScrollBarVisibility VerticalScrollBarVisibility { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ScrollViewer.Content">
      <summary>
        Gets or sets the content.
      </summary>
      <signature>
        <code>public ControlBase Content { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TextBlock">
      <summary>
        Represents the Text Block - the control to display a non-interactive text.
      </summary>
      <seealso cref="T:cAlgo.API.Control" />
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to add a text block control on your chart
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TextBlockSample : Indicator
          {
          [Parameter("Text", DefaultValue = "Sample text")]
          public string Text { get; set; }

          protected override void Initialize()
          {
          var stackPanel = new StackPanel
          {
          BackgroundColor = Color.Gold,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          Opacity = 0.6,
          Width = 200
          };

          stackPanel.AddChild(new TextBlock { Text = Text, FontWeight = FontWeight.ExtraBold, ForegroundColor = Color.Blue });

          Chart.AddControl(stackPanel);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public class TextBlock : Control</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.TextBlock.#ctor">
      <summary>
        Initializes a new instance of the Text Block class.
      </summary>
      <signature>
        <code>public TextBlock()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBlock.Text">
      <summary>
        Gets or sets the text.
      </summary>
      <signature>
        <code>public string Text { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBlock.TextAlignment">
      <summary>
        Gets or sets the text alignment.
      </summary>
      <signature>
        <code>public TextAlignment TextAlignment { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBlock.LineHeight">
      <summary>
        Gets or sets the height of the line.
      </summary>
      <signature>
        <code>public double LineHeight { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBlock.LineStackingStrategy">
      <summary>
        Gets or sets the mechanism by which a line box is determined for each line of text within the TextBlock.
      </summary>
      <signature>
        <code>public LineStackingStrategy LineStackingStrategy { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBlock.TextWrapping">
      <summary>
        Gets or sets the way how the TextBlock should wrap the text.
      </summary>
      <signature>
        <code>public TextWrapping TextWrapping { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBlock.TextTrimming">
      <summary>
        Gets or sets the text trimming behavior when the content overflows the content area.
      </summary>
      <signature>
        <code>public TextTrimming TextTrimming { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TextBox">
      <summary>
        Represents the text box class.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to add a text box control on your chart
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TextBoxSample : Indicator
          {
          protected override void Initialize()
          {
          var stackPanel = new StackPanel
          {
          BackgroundColor = Color.Gold,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          Opacity = 0.6,
          };

          var textBox = new TextBox
          {
          Text = "Enter text here...",
          FontWeight = FontWeight.ExtraBold,
          Margin = 5,
          ForegroundColor = Color.White,
          HorizontalAlignment = HorizontalAlignment.Center,
          Width = 150
          };

          textBox.TextChanged += TextBox_TextChanged;

          stackPanel.AddChild(textBox);

          Chart.AddControl(stackPanel);
          }

          private void TextBox_TextChanged(TextChangedEventArgs obj)
          {
          Print("Text box text changed to: ", obj.TextBox.Text);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public class TextBox : Control</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.TextBox.#ctor">
      <summary>
        Initializes a new instance of the <see cref="T:cAlgo.API.TextBox" /> class.
      </summary>
      <remarks>
      </remarks>
      <signature>
        <code>public TextBox()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBox.IsReadOnly">
      <summary>
        Gets or sets a value indicating whether the current text box is read-only.
      </summary>
      <signature>
        <code>public bool IsReadOnly { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBox.AcceptsReturn">
      <summary>
        Gets or sets a value that indicates how the text editing control responds when the user presses the ENTER key.
      </summary>
      <signature>
        <code>public bool AcceptsReturn { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBox.AcceptsTab">
      <summary>
        Gets or sets a value that indicates how the text editing control responds when the user presses the TAB key.
      </summary>
      <signature>
        <code>public bool AcceptsTab { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBox.Text">
      <summary>
        Gets or sets the text.
      </summary>
      <signature>
        <code>public string Text { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBox.MinLines">
      <summary>
        Gets or sets the minimum number of visible lines.
      </summary>
      <signature>
        <code>public int MinLines { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBox.MaxLines">
      <summary>
        Gets or sets the maximum number of visible lines.
      </summary>
      <signature>
        <code>public int MaxLines { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBox.MaxLength">
      <summary>
        Gets or sets the maximum number of characters that can be manually entered into the text box.
      </summary>
      <signature>
        <code>public int MaxLength { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBox.CaretColor">
      <summary>
        Gets or sets the color of the insertion caret.
      </summary>
      <signature>
        <code>public Color CaretColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBox.SelectionColor">
      <summary>
        Gets or sets the text color of the current text selection.
      </summary>
      <signature>
        <code>public Color SelectionColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBox.BorderColor">
      <summary>
        Gets or sets the color of the text box border.
      </summary>
      <signature>
        <code>public Color BorderColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBox.SelectionOpacity">
      <summary>
        Gets or sets the opacity of the selected text.
      </summary>
      <signature>
        <code>public double SelectionOpacity { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBox.BorderThickness">
      <summary>
        Gets or sets the border thickness. Property value can be set using Thickness, number, or a string new Thickness(5),
        new Thickness(1, 2, 3, 4), 5, "5", "1 2 3 4".
      </summary>
      <signature>
        <code>public Thickness BorderThickness { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBox.IsReadOnlyCaretVisible">
      <summary>
        Gets or sets a value that indicates whether a read-only text box displays a caret.
      </summary>
      <signature>
        <code>public bool IsReadOnlyCaretVisible { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBox.CharacterCasing">
      <summary>
        Gets or sets whether the TextBox control modifies the case of characters as they are typed.
      </summary>
      <signature>
        <code>public CharacterCasing CharacterCasing { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBox.TextAlignment">
      <summary>
        Gets or sets a value that indicates the horizontal alignment of text content.
      </summary>
      <signature>
        <code>public TextAlignment TextAlignment { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBox.TextWrapping">
      <summary>
        Gets or sets how the text box should wrap text.
      </summary>
      <signature>
        <code>public TextWrapping TextWrapping { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBox.HorizontalScrollBarVisibility">
      <summary>
        Defines the horizontal scroll bar visibility.
      </summary>
      <signature>
        <code>public ScrollBarVisibility HorizontalScrollBarVisibility { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextBox.VerticalScrollBarVisibility">
      <summary>
        Defines the vertical scroll bar visibility.
      </summary>
      <signature>
        <code>public ScrollBarVisibility VerticalScrollBarVisibility { get; set; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.TextBox.TextChanged">
      <summary>
        Occurs when the text has changed.
      </summary>
      <signature>
        <code>public event Action&lt;TextChangedEventArgs&gt; TextChanged;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ToggleButton">
      <summary>
        Represents the Toggle button.
      </summary>
      <seealso cref="T:cAlgo.API.Control" />
      <example>
        <code>
          using cAlgo.API;
          using System;
          using System.Linq;

          namespace cAlgo
          {
          // This sample indicator shows how to use ToggleButton control and handle its checked/unchecked events
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ToggleButtonSample : Indicator
          {
          protected override void Initialize()
          {
          var stackPanel = new StackPanel
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          BackgroundColor = Color.Gold,
          Opacity = 0.7
          };

          for (int i = 0; i &lt; 5; i++)
          {
          var toggleButton = new ToggleButton
          {
          Text = "Toggle Button #" + i + " Unchecked",
          Margin = 10
          };

          toggleButton.Checked += ToggleButton_Checked;
          toggleButton.Unchecked += ToggleButton_Unchecked;

          stackPanel.AddChild(toggleButton);
          }

          Chart.AddControl(stackPanel);
          }

          private void ToggleButton_Checked(ToggleButtonEventArgs obj)
          {
          var textSplit = obj.ToggleButton.Text.Split(' ').TakeWhile(text =&gt; !text.Equals("Unchecked", StringComparison.OrdinalIgnoreCase)).ToArray();

          obj.ToggleButton.Text = string.Join(" ", textSplit) + " Checked";
          }

          private void ToggleButton_Unchecked(ToggleButtonEventArgs obj)
          {
          var textSplit = obj.ToggleButton.Text.Split(' ').TakeWhile(text =&gt; !text.Equals("Checked", StringComparison.OrdinalIgnoreCase)).ToArray();

          obj.ToggleButton.Text = string.Join(" ", textSplit) + " Unchecked";
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public class ToggleButton : Control</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ToggleButton.#ctor">
      <summary>
        Initializes a new instance of the Toggle button class.
      </summary>
      <signature>
        <code>public ToggleButton()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ToggleButton.IsChecked">
      <summary>
        Defines whether the Toggle button is checked.
      </summary>
      <signature>
        <code>public bool IsChecked { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ToggleButton.Text">
      <summary>
        Gets or sets the text.
      </summary>
      <signature>
        <code>public string Text { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ToggleButton.Content">
      <summary>
        Gets or sets the content.
      </summary>
      <signature>
        <code>public ControlBase Content { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ToggleButton.CornerRadius">
      <summary>
        Gets or sets the border corner radius. Property value can be set using CornerRadius, number, or a string: new
        CornerRadius(5), new CornerRadius(1, 2, 3, 4).
      </summary>
      <signature>
        <code>public CornerRadius CornerRadius { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ToggleButton.BorderColor">
      <summary>
        Gets or sets the border line color.
      </summary>
      <signature>
        <code>public Color BorderColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ToggleButton.BorderThickness">
      <summary>
        Gets or sets the border thickness. Property value can be set using Thickness, number, or a string new Thickness(5),
        new Thickness(1, 2, 3, 4), 5, "5", "1 2 3 4".
      </summary>
      <signature>
        <code>public Thickness BorderThickness { get; set; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ToggleButton.Click">
      <summary>
        Occurs when clicked.
      </summary>
      <signature>
        <code>public event Action&lt;ToggleButtonEventArgs&gt; Click;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ToggleButton.Checked">
      <summary>
        Occurs when checked.
      </summary>
      <signature>
        <code>public event Action&lt;ToggleButtonEventArgs&gt; Checked;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ToggleButton.Unchecked">
      <summary>
        Occurs when unchecked.
      </summary>
      <signature>
        <code>public event Action&lt;ToggleButtonEventArgs&gt; Unchecked;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WebView">
      <summary>
        Represents the image chart control.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo.Robots
          {
          [Robot(AccessRights = AccessRights.None)]
          public class WebViewOnChart : Robot
          {
          private WebView _webView;

          private TextBox _addressTextBox;

          private TextBox _scriptTextBox;

          private Button _executeScriptButton;

          protected override void OnStart()
          {
          var goBackButton = new Button
          {
          Text = "←",
          Margin = 3
          };

          goBackButton.Click += OnGoBackButtonClick;

          var goForwardButton = new Button
          {
          Text = "→",
          Margin = 3
          };

          goForwardButton.Click += OnGoForwardButtonClick;

          _addressTextBox = new TextBox
          {
          Text = "https://ctrader.com/",
          Margin = 3,
          Width = 150,
          MinWidth = 150,
          MaxWidth = 150
          };

          var goButton = new Button
          {
          Text = "→",
          Margin = 3
          };

          goButton.Click += OnGoButtonClick;

          var reloadButton = new Button
          {
          Text = "Reload",
          Margin = 3
          };

          reloadButton.Click += OnReloadButtonClick;

          var stopButton = new Button
          {
          Text = "x",
          Margin = 3
          };

          stopButton.Click += OnStopButtonClick;

          _scriptTextBox = new TextBox
          {
          Text = "alert('Hi');",
          Margin = 3,
          Width = 150,
          MinWidth = 150,
          MaxWidth = 150,
          IsEnabled = false
          };

          _executeScriptButton = new Button
          {
          Text = "Execute Script",
          Margin = 3,
          IsEnabled = false
          };

          _executeScriptButton.Click += OnExecuteScriptButtonClick;

          var addressBarPanel = new StackPanel
          {
          MaxHeight = 50,
          VerticalAlignment = VerticalAlignment.Top,
          BackgroundColor = Color.Black,
          Orientation = Orientation.Horizontal
          };

          addressBarPanel.AddChild(goBackButton);
          addressBarPanel.AddChild(goForwardButton);
          addressBarPanel.AddChild(_addressTextBox);
          addressBarPanel.AddChild(goButton);
          addressBarPanel.AddChild(reloadButton);
          addressBarPanel.AddChild(stopButton);
          addressBarPanel.AddChild(_scriptTextbox);
          addressBarPanel.AddChild(_executeScriptButton);

          _webView = new WebView
          {
          DefaultBackgroundColor = Color.Red
          };

          _webView.NavigationCompleted += OnWebViewNavigationCompleted;
          _webView.WebMessageReceived += OnWebViewWebMessageReceived;
          _webView.Loaded += OnWebViewLoaded;
          _webView.Unloaded += OnWebViewUnloaded;

          var mainGrid = new Grid(2, 1);

          mainGrid.Rows[0].SetHeightToAuto();
          mainGrid.Rows[1].SetHeightInStars(1);

          mainGrid.AddChild(addressBarPanel, 0, 0);
          mainGrid.AddChild(_webView, 1, 0);

          Chart.AddControl(mainGrid);
          }

          private void OnWebViewLoaded(WebViewLoadedEventArgs args)
          {
          Print($"Webview loaded, IsLoaded: {args.WebView.IsLoaded}");

          _webView.NavigateAsync(_addressTextBox.Text);
          }

          private void OnWebViewUnloaded(WebViewUnloadedEventArgs args)
          {
          Print($"Webview unloaded, IsLoaded: {args.WebView.IsLoaded}");
          }

          private void OnStopButtonClick(ButtonClickEventArgs args)
          {
          _webView.StopAsync();
          }

          private void OnExecuteScriptButtonClick(ButtonClickEventArgs args)
          {
          var result = _webView.ExecuteScript(_scriptTextBox.Text);

          Print($"IsSuccessful: {result.IsSuccessful} | Json: {result.Json}");
          }

          private void OnReloadButtonClick(ButtonClickEventArgs args)
          {
          _webView.ReloadAsync();
          }

          private void OnGoForwardButtonClick(ButtonClickEventArgs args)
          {
          _webView.GoForwardAsync();
          }

          private void OnGoBackButtonClick(ButtonClickEventArgs args)
          {
          _webView.GoBackAsync();
          }

          private void OnGoButtonClick(ButtonClickEventArgs args)
          {
          _webView.NavigateAsync(_addressTextBox.Text);
          }

          private void OnWebViewWebMessageReceived(WebViewWebMessageReceivedEventArgs args)
          {
          Print($"Source: {args.Source} | Message: {args.Message}");
          }

          private void OnWebViewNavigationCompleted(WebViewNavigationCompletedEventArgs args)
          {
          Print($"{args.HttpStatusCode} | {args.IsSuccessful} | {args.Url}");

          _addressTextBox.Text = args.Url;
          _scriptTextBox.IsEnabled = true;
          _executeScriptButton.IsEnabled = true;
          }
          }
          }
        </code>
        <code>
          using cAlgo.API;

          namespace cAlgo.Robots
          {
          [Robot(AccessRights = AccessRights.None)]
          public class WebViewOnWindow : Robot
          {
          private WebView _webView;

          private TextBox _addressTextBox;

          private TextBox _scriptTextbox;

          private Button _executeScriptButton;

          protected override void OnStart()
          {
          var goBackButton = new Button
          {
          Text = "←",
          Margin = 3
          };

          goBackButton.Click += OnGoBackButtonClick;

          var goForwardButton = new Button
          {
          Text = "→",
          Margin = 3
          };

          goForwardButton.Click += OnGoForwardButtonClick;

          _addressTextBox = new TextBox
          {
          Text = "https://ctrader.com/",
          Margin = 3,
          Width = 150,
          MinWidth = 150,
          MaxWidth = 150
          };

          var goButton = new Button
          {
          Text = "→",
          Margin = 3
          };

          goButton.Click += OnGoButtonClick;

          var reloadButton = new Button
          {
          Text = "Reload",
          Margin = 3
          };

          reloadButton.Click += OnReloadButtonClick;

          var stopButton = new Button
          {
          Text = "x",
          Margin = 3
          };

          stopButton.Click += OnStopButtonClick;

          _scriptTextbox = new TextBox
          {
          Text = "alert('Hi');",
          Margin = 3,
          Width = 150,
          MinWidth = 150,
          MaxWidth = 150,
          IsEnabled = false
          };

          _executeScriptButton = new Button
          {
          Text = "Execute Script",
          Margin = 3,
          IsEnabled = false
          };

          _executeScriptButton.Click += OnExecuteScriptButtonClick;

          var addressBarPanel = new StackPanel
          {
          MaxHeight = 50,
          VerticalAlignment = VerticalAlignment.Top,
          BackgroundColor = Color.Black,
          Orientation = Orientation.Horizontal
          };

          addressBarPanel.AddChild(goBackButton);
          addressBarPanel.AddChild(goForwardButton);
          addressBarPanel.AddChild(_addressTextBox);
          addressBarPanel.AddChild(goButton);
          addressBarPanel.AddChild(reloadButton);
          addressBarPanel.AddChild(stopButton);
          addressBarPanel.AddChild(_scriptTextbox);
          addressBarPanel.AddChild(_executeScriptButton);

          _webView = new WebView
          {
          DefaultBackgroundColor = Color.Red
          };

          _webView.NavigationCompleted += OnWebViewNavigationCompleted;
          _webView.WebMessageReceived += OnWebViewWebMessageReceived;
          _webView.Loaded += OnWebViewLoaded;
          _webView.Unloaded += OnWebViewUnloaded;

          var mainGrid = new Grid(2, 1);

          mainGrid.Rows[0].SetHeightToAuto();
          mainGrid.Rows[1].SetHeightInStars(1);

          mainGrid.AddChild(addressBarPanel, 0, 0);
          mainGrid.AddChild(_webView, 1, 0);

          var window = new Window
          {
          Child = mainGrid
          };

          window.Show();
          }

          private void OnWebViewLoaded(WebViewLoadedEventArgs args)
          {
          Print($"Webview loaded, IsLoaded: {args.WebView.IsLoaded}");

          _webView.NavigateAsync(_addressTextBox.Text);
          }

          private void OnWebViewUnloaded(WebViewUnloadedEventArgs args)
          {
          Print($"Webview unloaded, IsLoaded: {args.WebView.IsLoaded}");
          }

          private void OnStopButtonClick(ButtonClickEventArgs args)
          {
          _webView.StopAsync();
          }

          private void OnExecuteScriptButtonClick(ButtonClickEventArgs args)
          {
          var result = _webView.ExecuteScript(_scriptTextbox.Text);

          Print($"IsSuccessful: {result.IsSuccessful} | Json: {result.Json}");
          }

          private void OnReloadButtonClick(ButtonClickEventArgs args)
          {
          _webView.ReloadAsync();
          }

          private void OnGoForwardButtonClick(ButtonClickEventArgs args)
          {
          _webView.GoForwardAsync();
          }

          private void OnGoBackButtonClick(ButtonClickEventArgs args)
          {
          _webView.GoBackAsync();
          }

          private void OnGoButtonClick(ButtonClickEventArgs args)
          {
          _webView.NavigateAsync(_addressTextBox.Text);
          }

          private void OnWebViewWebMessageReceived(WebViewWebMessageReceivedEventArgs args)
          {
          Print($"Source: {args.Source} | Message: {args.Message}");
          }

          private void OnWebViewNavigationCompleted(WebViewNavigationCompletedEventArgs args)
          {
          Print($"{args.HttpStatusCode} | {args.IsSuccessful} | {args.Url}");

          _addressTextBox.Text = args.Url;
          _scriptTextbox.IsEnabled = true;
          _executeScriptButton.IsEnabled = true;
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public class WebView : ControlBase</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.WebView.#ctor">
      <summary>
        Initializes a new instance of the WebView class.
      </summary>
      <signature>
        <code>public WebView()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebView.DefaultBackgroundColor">
      <summary>
        Default background color of WebView.
      </summary>
      <signature>
        <code>public Color DefaultBackgroundColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebView.IsLoaded">
      <summary>
        Returns True if WebView is loaded otherwise False.
      </summary>
      <signature>
        <code>public bool IsLoaded { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.WebView.NavigateAsync(System.String)">
      <summary>
        Navigate asynchronously to another URL.
      </summary>
      <param name="url">Target URL</param>
      <signature>
        <code>public void NavigateAsync(string url)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.WebView.NavigateToStringAsync(System.String)">
      <summary>
        Initiates a navigation asynchronously to html content as source HTML of a new document.
      </summary>
      <param name="html">HTML content</param>
      <signature>
        <code>public void NavigateToStringAsync(string html)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.WebView.GoBackAsync">
      <summary>
        Navigates asynchronously the WebView to the previous page in the navigation history.
      </summary>
      <signature>
        <code>public void GoBackAsync()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.WebView.GoForwardAsync">
      <summary>
        Navigates asynchronously the WebView to the next page in the navigation history.
      </summary>
      <signature>
        <code>public void GoForwardAsync()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.WebView.ReloadAsync">
      <summary>
        Reloads asynchronously the current page.
      </summary>
      <signature>
        <code>public void ReloadAsync()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.WebView.StopAsync">
      <summary>
        Stops asynchronously all navigations and pending resource fetches.
      </summary>
      <signature>
        <code>public void StopAsync()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.WebView.ExecuteScript(System.String)">
      <summary>
        Executes JavaScript code from the javaScript parameter in the current top level document rendered in the WebView
        and returns the result.
        You can only use this method after control is fully loaded and navigation is completed.
      </summary>
      <param name="javaScript">JavaScript code</param>
      <returns>ExecuteScriptResult</returns>
      <signature>
        <code>public ExecuteScriptResult ExecuteScript(string javaScript)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.WebView.ExecuteScriptAsync(System.String)">
      <summary>
        Executes JavaScript code from the javaScript parameter in the current top level document rendered in the WebView.
        You can only use this method after control is fully loaded and navigation is completed.
      </summary>
      <param name="javaScript">JavaScript code</param>
      <signature>
        <code>public void ExecuteScriptAsync(string javaScript)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.WebView.ExecuteScriptAsync(System.String,System.Action{cAlgo.API.ExecuteScriptResult})">
      <summary>
        Executes asynchronously JavaScript code from the javaScript parameter in the current top level document rendered in
        the WebView.
        You can only use this method after control is fully loaded and navigation is completed.
      </summary>
      <param name="javaScript">JavaScript code</param>
      <param name="callback">The callback that will be called after execution finished</param>
      <signature>
        <code>public void ExecuteScriptAsync(string javaScript, Action&lt;ExecuteScriptResult&gt; callback)</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.WebView.NavigationCompleted">
      <summary>
        Occurs when navigation of a page is completed.
      </summary>
      <signature>
        <code>public event Action&lt;WebViewNavigationCompletedEventArgs&gt; NavigationCompleted;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.WebView.WebMessageReceived">
      <summary>
        Occurs after web content sends a message
      </summary>
      <signature>
        <code>public event Action&lt;WebViewWebMessageReceivedEventArgs&gt; WebMessageReceived;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.WebView.Loaded">
      <summary>
        Occurs after web view is loaded
      </summary>
      <signature>
        <code>public event Action&lt;WebViewLoadedEventArgs&gt; Loaded;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.WebView.Unloaded">
      <summary>
        Occurs after web view is unloaded
      </summary>
      <signature>
        <code>public event Action&lt;WebViewUnloadedEventArgs&gt; Unloaded;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.CornerRadius">
      <summary>
        Represents the radii of a rectangle's corners.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to use the rectangle corner radius to create a round corner rectangle
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class RectangleCornerRadiusSample : Indicator
          {
          protected override void Initialize()
          {
          var rectangle = new Rectangle
          {
          RadiusX = 20,
          RadiusY = 20,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          Width = 200,
          Height = 150,
          FillColor = Color.FromArgb(100, Color.Red),
          StrokeColor = Color.Yellow
          };

          Chart.AddControl(rectangle);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsStyles" />
      <signature>
        <code>public sealed struct CornerRadius : ValueType</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.CornerRadius.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
        Initializes a new instance of the <see cref="T:cAlgo.API.CornerRadius" /> structure.
      </summary>
      <param name="topLeft">
      </param>
      <param name="topRight">
      </param>
      <param name="bottomRight">
      </param>
      <param name="bottomLeft">
      </param>
      <remarks>
      </remarks>
      <signature>
        <code>public CornerRadius(double topLeft, double topRight, double bottomRight, double bottomLeft)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.CornerRadius.#ctor(System.Double)">
      <summary>
        Initializes a new instance of the <see cref="T:cAlgo.API.CornerRadius" /> structure.
      </summary>
      <param name="uniformRadius">
      </param>
      <remarks>
      </remarks>
      <signature>
        <code>public CornerRadius(double uniformRadius)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.CornerRadius.TopLeft">
      <summary>
        Gets or sets the radius of the top-left corner.
      </summary>
      <signature>
        <code>public double TopLeft { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.CornerRadius.TopRight">
      <summary>
        Gets or sets the radius of the top-right corner.
      </summary>
      <signature>
        <code>public double TopRight { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.CornerRadius.BottomRight">
      <summary>
        Gets or sets the radius of the bottom-right corner.
      </summary>
      <signature>
        <code>public double BottomRight { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.CornerRadius.BottomLeft">
      <summary>
        Gets or sets the radius of the bottom-left corner.
      </summary>
      <signature>
        <code>public double BottomLeft { get; set; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.CornerRadius.GetHashCode">
      <summary>
        Returns the hash code for this instance.
      </summary>
      <signature>
        <code>public int GetHashCode()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.CornerRadius.Equals(cAlgo.API.CornerRadius)">
      <summary>
        Defines whether the specified object is equal to this instance.
      </summary>
      <param name="other">The other CornerRadius object to compare with this instance.</param>
      <signature>
        <code>public bool Equals(CornerRadius other)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.CornerRadius.Equals(System.Object)">
      <summary>
        Defines whether the specified object is equal to this instance.
      </summary>
      <param name="obj">The object to compare with this instance.</param>
      <signature>
        <code>public bool Equals(object obj)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.CustomControl">
      <summary>
        Represents the custom control to create reusable controls with customized look and behavior.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using System.Collections.Generic;

          namespace cAlgo
          {
          // This sample indicator shows how to use Chart Custom controls to create your own controls
          // by combining multiple built-in controls, the combobox control is not a fully functioning combobox, its just for learning purpose
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class CustomControlSample : Indicator
          {
          protected override void Initialize()
          {
          var comboBox = new ComboBox
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center
          };

          comboBox.AddItem("Item 1");
          comboBox.AddItem("Item 2");
          comboBox.AddItem("Item 3");
          comboBox.AddItem("Item 4");
          comboBox.AddItem("Item 5");

          Chart.AddControl(comboBox);
          }

          public override void Calculate(int index)
          {
          // Calculate value at specified index
          // Result[index] = ...
          }
          }

          public class ComboBox : CustomControl
          {
          private TextBox _textBox;

          private Button _button;

          private Grid _itemsGrid;

          private StackPanel _panel;

          private readonly List&lt;object&gt; _items = new List&lt;object&gt;();

          private bool _isExpanded;

          public ComboBox()
          {
          _textBox = new TextBox
          {
          Width = 100,
          IsReadOnly = true,
          IsReadOnlyCaretVisible = false
          };

          _button = new Button
          {
          Text = "▼"
          };

          _button.Click += Button_Click;

          var stackPanel = new StackPanel
          {
          Orientation = Orientation.Horizontal
          };

          stackPanel.AddChild(_textBox);
          stackPanel.AddChild(_button);

          _panel = new StackPanel
          {
          Orientation = Orientation.Vertical
          };

          _panel.AddChild(stackPanel);

          AddChild(_panel);
          }

          public void AddItem(object item)
          {
          _items.Add(item);
          }

          public bool RemoveItem(object item)
          {
          return _items.Remove(item);
          }

          private void Button_Click(ButtonClickEventArgs obj)
          {
          if (_itemsGrid != null)
          _panel.RemoveChild(_itemsGrid);

          if (_isExpanded)
          {
          _isExpanded = false;

          return;
          }

          _isExpanded = true;

          _itemsGrid = new Grid(_items.Count, 1);

          for (int i = 0; i &lt; _items.Count; i++)
          {
          var item = _items[i];

          _itemsGrid.AddChild(new TextBlock
          {
          Text = item.ToString()
          }, i, 0);
          }

          _panel.AddChild(_itemsGrid);
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public abstract class CustomControl : ControlBase</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.CustomControl.#ctor">
      <summary>
        Initializes a new instance of the CustomControl.
      </summary>
      <signature>
        <code>public CustomControl()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.CustomControl.AddChild(cAlgo.API.ControlBase)">
      <summary>
        Adds a child control.
      </summary>
      <param name="childControl">
      </param>
      <signature>
        <code>public void AddChild(ControlBase childControl)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.DefaultStyles">
      <summary>
        Represent the list of default styles for the built-in controls.
      </summary>
      <seealso cref="T:cAlgo.API.Style" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsStyles" />
      <signature>
        <code>public static class DefaultStyles</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DefaultStyles.TextBlockStyle">
      <summary>
        Gets the Text Block default style.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public static Style TextBlockStyle { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DefaultStyles.TextBoxStyle">
      <summary>
        Gets the Text Box default style.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public static Style TextBoxStyle { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DefaultStyles.ButtonStyle">
      <summary>
        Gets the Button default style.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public static Style ButtonStyle { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DefaultStyles.ToggleButtonStyle">
      <summary>
        Gets the Toggle Button default style.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public static Style ToggleButtonStyle { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DefaultStyles.CheckBoxStyle">
      <summary>
        Gets the Checkbox default style.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public static Style CheckBoxStyle { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DefaultStyles.RadioButtonStyle">
      <summary>
        Gets the Radio Button default stile.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public static Style RadioButtonStyle { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DefaultStyles.ScrollViewerStyle">
      <summary>
        Gets the Scroll Viewer default style.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public static Style ScrollViewerStyle { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DefaultStyles.ComboBoxStyle">
      <summary>
        Gets the Scroll Viewer default style.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public static Style ComboBoxStyle { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Dock">
      <summary>
        Specifies where a chart control will be docked inside the DockPanel.
      </summary>
      <seealso cref="T:cAlgo.API.DockPanel" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayout" />
      <signature>
        <code>public enum Dock</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Dock.Left">
      <summary>
        Dock to the left side of the DockPanel.
      </summary>
      <signature>
        <code>public static Dock Left;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Dock.Top">
      <summary>
        Dock to the top of the DockPanel.
      </summary>
      <signature>
        <code>public static Dock Top;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Dock.Right">
      <summary>
        Dock to the right side of the DockPanel.
      </summary>
      <signature>
        <code>public static Dock Right;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Dock.Bottom">
      <summary>
        Dock to the bottom of the DockPanel.
      </summary>
      <signature>
        <code>public static Dock Bottom;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ExecuteScriptResult">
      <summary>
        The result of JavaScript execution on a WebView control.
      </summary>
      <seealso cref="T:cAlgo.API.WebView" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public class ExecuteScriptResult</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ExecuteScriptResult.#ctor(System.Boolean,System.String)">
      <summary>
        Initializes a new instance of ExecuteScriptResult
      </summary>
      <param name="isSuccessful">IsSuccessful</param>
      <param name="json">JSON content</param>
      <signature>
        <code>public ExecuteScriptResult(bool isSuccessful, string json)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ExecuteScriptResult.IsSuccessful">
      <summary>
        True if JavaScript execution was successful otherwise false
      </summary>
      <signature>
        <code>public bool IsSuccessful { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ExecuteScriptResult.Json">
      <summary>
        Returned JSON result of execution.
      </summary>
      <signature>
        <code>public string Json { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.FontStyle">
      <summary>
        Specifies style information applied to text.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use a chart control font properties to set font size, style, and family
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class FontSample : Indicator
          {
          protected override void Initialize()
          {
          var stackPanel = new StackPanel
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          BackgroundColor = Color.Gold,
          Opacity = 0.6
          };

          stackPanel.AddChild(new TextBlock
          {
          Text = "Thin Weight Size 10 FontStyle Normal Font Default",
          FontSize = 10,
          FontWeight = FontWeight.Thin,
          FontStyle = FontStyle.Normal,
          ForegroundColor = Color.Black,
          Margin = 10
          });

          stackPanel.AddChild(new TextBlock
          {
          Text = "Thin Weight Size 10 FontStyle Italic Font Default",
          FontSize = 10,
          FontWeight = FontWeight.Thin,
          FontStyle = FontStyle.Italic,
          ForegroundColor = Color.Black,
          Margin = 10
          });

          stackPanel.AddChild(new TextBlock
          {
          Text = "Thin Weight Size 10 FontStyle Oblique Font Default",
          FontSize = 10,
          FontWeight = FontWeight.Thin,
          FontStyle = FontStyle.Oblique,
          ForegroundColor = Color.Black,
          Margin = 10
          });

          stackPanel.AddChild(new TextBlock
          {
          Text = "Black Weight Size 10 FontStyle Normal Font Default",
          FontSize = 10,
          FontWeight = FontWeight.Black,
          FontStyle = FontStyle.Normal,
          ForegroundColor = Color.Black,
          Margin = 10
          });

          stackPanel.AddChild(new TextBlock
          {
          Text = "Bold Weight Size 10 FontStyle Normal Font Default",
          FontSize = 10,
          FontWeight = FontWeight.Bold,
          FontStyle = FontStyle.Normal,
          ForegroundColor = Color.Black,
          Margin = 10
          });

          stackPanel.AddChild(new TextBlock
          {
          Text = "Heavy Weight Size 10 FontStyle Normal Font Default",
          FontSize = 10,
          FontWeight = FontWeight.Heavy,
          FontStyle = FontStyle.Normal,
          ForegroundColor = Color.Black,
          Margin = 10
          });

          stackPanel.AddChild(new TextBlock
          {
          Text = "Bold Weight Size 12 FontStyle Normal Font Default",
          FontSize = 12,
          FontWeight = FontWeight.Bold,
          FontStyle = FontStyle.Normal,
          ForegroundColor = Color.Black,
          Margin = 10
          });

          stackPanel.AddChild(new TextBlock
          {
          Text = "Thin Weight Size 12 FontStyle Normal Font Calibri Light Italic",
          FontSize = 12,
          FontWeight = FontWeight.Thin,
          FontStyle = FontStyle.Normal,
          ForegroundColor = Color.Black,
          FontFamily = "Calibri Light Italic",
          Margin = 10
          });

          Chart.AddControl(stackPanel);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsStyles" />
      <signature>
        <code>public enum FontStyle</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FontStyle.Normal">
      <summary>
        Normal text.
      </summary>
      <signature>
        <code>public static FontStyle Normal;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FontStyle.Oblique">
      <summary>
        Oblique text.
      </summary>
      <signature>
        <code>public static FontStyle Oblique;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FontStyle.Italic">
      <summary>
        Italic text.
      </summary>
      <signature>
        <code>public static FontStyle Italic;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.FontWeight">
      <summary>
        Specifies the weight or thickness of the font.
      </summary>
      <seealso cref="T:cAlgo.API.FontStyle" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsStyles" />
      <signature>
        <code>public enum FontWeight</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FontWeight.Thin">
      <summary>
        The thin font.
      </summary>
      <signature>
        <code>public static FontWeight Thin;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FontWeight.ExtraLight">
      <summary>
        The extra light font.
      </summary>
      <signature>
        <code>public static FontWeight ExtraLight;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FontWeight.UltraLight">
      <summary>
        The ultra light font.
      </summary>
      <signature>
        <code>public static FontWeight UltraLight;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FontWeight.Light">
      <summary>
        The light font.
      </summary>
      <signature>
        <code>public static FontWeight Light;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FontWeight.Normal">
      <summary>
        The normal font.
      </summary>
      <signature>
        <code>public static FontWeight Normal;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FontWeight.Regular">
      <summary>
        The regular font.
      </summary>
      <signature>
        <code>public static FontWeight Regular;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FontWeight.Medium">
      <summary>
        The medium font.
      </summary>
      <signature>
        <code>public static FontWeight Medium;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FontWeight.DemiBold">
      <summary>
        The demibold font.
      </summary>
      <signature>
        <code>public static FontWeight DemiBold;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FontWeight.SemiBold">
      <summary>
        The semibold font.
      </summary>
      <signature>
        <code>public static FontWeight SemiBold;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FontWeight.Bold">
      <summary>
        The bold font.
      </summary>
      <signature>
        <code>public static FontWeight Bold;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FontWeight.ExtraBold">
      <summary>
        The extra bold font.
      </summary>
      <signature>
        <code>public static FontWeight ExtraBold;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FontWeight.UltraBold">
      <summary>
        The ultra bold font.
      </summary>
      <signature>
        <code>public static FontWeight UltraBold;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FontWeight.Black">
      <summary>
        The black font.
      </summary>
      <signature>
        <code>public static FontWeight Black;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FontWeight.Heavy">
      <summary>
        The Heavy font.
      </summary>
      <signature>
        <code>public static FontWeight Heavy;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FontWeight.ExtraBlack">
      <summary>
        The Extra black font.
      </summary>
      <signature>
        <code>public static FontWeight ExtraBlack;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FontWeight.UltraBlack">
      <summary>
        The ultra black font.
      </summary>
      <signature>
        <code>public static FontWeight UltraBlack;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.LineStackingStrategy">
      <summary>
        Describes a mechanism by which a line box is determined for each line.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using System.Text;

          namespace cAlgo
          {
          // This sample indicator shows how to use different Line Stacking Strategies on a TextBlock
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class LineStackingStrategySample : Indicator
          {
          protected override void Initialize()
          {
          var stackPanel = new StackPanel
          {
          Orientation = Orientation.Vertical,
          BackgroundColor = Color.Gold,
          Opacity = 0.6,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center
          };

          var stringBuilder = new StringBuilder();

          stringBuilder.AppendLine("First line of text");
          stringBuilder.AppendLine("Second line of text");
          stringBuilder.AppendLine("Third line of text");
          stringBuilder.AppendLine("Fourth line of text");
          stringBuilder.AppendLine("Fifth line of text");

          stackPanel.AddChild(new TextBlock
          {
          Margin = 5,
          Text = "LineStackingStrategy = BlockLineHeight:\n" + stringBuilder.ToString(),
          LineStackingStrategy = LineStackingStrategy.BlockLineHeight,
          FontWeight = FontWeight.Bold,
          ForegroundColor = Color.Black
          });

          stackPanel.AddChild(new TextBlock
          {
          Margin = 5,
          Text = "LineStackingStrategy = MaxHeight:\n" + stringBuilder.ToString(),
          LineStackingStrategy = LineStackingStrategy.MaxHeight,
          FontWeight = FontWeight.Bold,
          ForegroundColor = Color.Black
          });

          Chart.AddControl(stackPanel);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public enum LineStackingStrategy</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.LineStackingStrategy.BlockLineHeight">
      <summary>
        The stack height is determined by the block element line-height property value.
      </summary>
      <signature>
        <code>public static LineStackingStrategy BlockLineHeight;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.LineStackingStrategy.MaxHeight">
      <summary>
        The stack height is the smallest value that containing all the inline elements on that line when those elements are properly aligned.
      </summary>
      <signature>
        <code>public static LineStackingStrategy MaxHeight;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Orientation">
      <summary>
        Defines the different orientations that panel layout can have.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to set stack and wrap panels orientation
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class OrientationSample : Indicator
          {
          [Parameter("Orientation", DefaultValue = Orientation.Vertical)]
          public Orientation Orientation { get; set; }

          protected override void Initialize()
          {
          var stackPanel = new StackPanel
          {
          Orientation = Orientation,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          BackgroundColor = Color.Gold,
          Opacity = 0.7,
          };

          stackPanel.AddChild(new TextBlock { Text = "First TextBlock", FontWeight = FontWeight.ExtraBold, Margin = 5, ForegroundColor = Color.Black });
          stackPanel.AddChild(new TextBlock { Text = "Second TextBlock", FontWeight = FontWeight.ExtraBold, Margin = 5, ForegroundColor = Color.Black });
          stackPanel.AddChild(new TextBlock { Text = "Third TextBlock", FontWeight = FontWeight.ExtraBold, Margin = 5, ForegroundColor = Color.Black });
          stackPanel.AddChild(new TextBlock { Text = "Fourth TextBlock", FontWeight = FontWeight.ExtraBold, Margin = 5, ForegroundColor = Color.Black });

          Chart.AddControl(stackPanel);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public enum Orientation</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Orientation.Horizontal">
      <summary>
        Elements in the panel layout should be horizontally oriented.
      </summary>
      <signature>
        <code>public static Orientation Horizontal;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Orientation.Vertical">
      <summary>
        Elements in the panel layout should be vertically oriented.
      </summary>
      <signature>
        <code>public static Orientation Vertical;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Canvas">
      <summary>
        Defines an area to position child elements by coordinates relative to the Canvas area.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to use the Canvas panel
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class CanvasSample : Indicator
          {
          protected override void Initialize()
          {
          var canvas = new Canvas
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          Width = 300,
          Height = 200,
          BackgroundColor = Color.Red,
          Opacity = 0.5
          };

          canvas.AddChild(new Button
          {
          Top = 20,
          Left = 80,
          Margin = 5,
          Text = "Button Inside Canvas"
          });

          canvas.AddChild(new Image
          {
          Source = Properties.Resources.stock,
          Margin = 5,
          Width = 128,
          Height = 128,
          Top = 45,
          Left = 80
          });

          Chart.AddControl(canvas);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayout" />
      <signature>
        <code>public class Canvas : Panel</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Canvas.#ctor">
      <summary>
        Initializes a new instance of the Canvas class.
      </summary>
      <signature>
        <code>public Canvas()</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.DockPanel">
      <summary>
        Defines the area where you can arrange child elemens either horizontally or vertically, relative to each other.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to use DockPanel
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class DockPanelSample : Indicator
          {
          protected override void Initialize()
          {
          var dockPanel = new DockPanel
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          BackgroundColor = Color.Gold,
          Opacity = 0.8
          };

          dockPanel.AddChild(new TextBlock
          {
          Text = "Enter Your Name",
          Margin = 5,
          Dock = Dock.Top,
          HorizontalAlignment = HorizontalAlignment.Center,
          ForegroundColor = Color.Black,
          FontWeight = FontWeight.ExtraBold
          });

          dockPanel.AddChild(new TextBox
          {
          Dock = Dock.Bottom,
          Margin = 5,
          Width = 100
          });

          Chart.AddControl(dockPanel);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayout" />
      <signature>
        <code>public class DockPanel : Panel</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.DockPanel.#ctor">
      <summary>
        Initializes a new instance of the DockPanel class.
      </summary>
      <signature>
        <code>public DockPanel()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DockPanel.LastChildFill">
      <summary>
        Indicates whether the last child element within a DockPanel stretches to fill the remaining available space.
      </summary>
      <signature>
        <code>public bool LastChildFill { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Grid">
      <summary>
        Represents the Grid class.
      </summary>
      <seealso cref="T:cAlgo.API.Panel" />
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use Grid panel control
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class GridSample : Indicator
          {
          [Parameter("Grid Rows #", DefaultValue = 10)]
          public int GridRowsNumber { get; set; }

          [Parameter("Grid Columns #", DefaultValue = 2)]
          public int GridColumnsNumber { get; set; }

          [Parameter("Grid Row Length", DefaultValue = 2)]
          public int GridRowLength { get; set; }

          [Parameter("Grid Row Length Unit Type", DefaultValue = GridUnitType.Auto)]
          public GridUnitType GridRowLengthUnitType { get; set; }

          [Parameter("Grid Column Length", DefaultValue = 2)]
          public int GridColumnLength { get; set; }

          [Parameter("Grid Column Length Unit Type", DefaultValue = GridUnitType.Auto)]
          public GridUnitType GridColumnLengthUnitType { get; set; }

          protected override void Initialize()
          {
          var grid = new Grid(GridRowsNumber, GridColumnsNumber)
          {
          BackgroundColor = Color.Gold,
          Opacity = 0.6,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          ShowGridLines = true,
          };

          for (int iRow = 0; iRow &lt; GridRowsNumber; iRow++)
          {
          var row = grid.Rows[iRow];

          SetGridRowLength(row);

          for (int iColumn = 0; iColumn &lt; GridColumnsNumber; iColumn++)
          {
          var column = grid.Columns[iColumn];

          SetGridColumnLength(column);

          grid.AddChild(new TextBlock
          {
          Text = string.Format("Row {0} and Column {1}", iRow, iColumn),
          Margin = 5,
          ForegroundColor = Color.Black,
          FontWeight = FontWeight.ExtraBold
          }, iRow, iColumn);
          }
          }

          Chart.AddControl(grid);
          }

          private void SetGridRowLength(GridRow row)
          {
          switch (GridRowLengthUnitType)
          {
          case GridUnitType.Auto:
          row.SetHeightToAuto();
          break;

          case GridUnitType.Pixel:
          row.SetHeightInPixels(GridRowLength);
          break;

          case GridUnitType.Star:
          row.SetHeightInStars(GridRowLength);
          break;
          }
          }

          private void SetGridColumnLength(GridColumn column)
          {
          switch (GridColumnLengthUnitType)
          {
          case GridUnitType.Auto:
          column.SetWidthToAuto();
          break;

          case GridUnitType.Pixel:
          column.SetWidthInPixels(GridColumnLength);
          break;

          case GridUnitType.Star:
          column.SetWidthInStars(GridColumnLength);
          break;
          }
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayoutGrid" />
      <signature>
        <code>public class Grid : Panel</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Grid.#ctor">
      <summary>
        Initializes a new grid on the chart.
      </summary>
      <signature>
        <code>public Grid()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Grid.#ctor(System.Int32,System.Int32)">
      <summary>
        Initializes a new grid on the chart.
      </summary>
      <param name="rowsCount">The rows count.</param>
      <param name="columnsCount">The columns count.</param>
      <signature>
        <code>public Grid(int rowsCount, int columnsCount)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Grid.Rows">
      <summary>
        Gets the read only list of the grid rows.
      </summary>
      <signature>
        <code>public IReadonlyList&lt;GridRow&gt; Rows { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Grid.Columns">
      <summary>
        Gets the read only list of the grid columns.
      </summary>
      <signature>
        <code>public IReadonlyList&lt;GridColumn&gt; Columns { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Grid.ShowGridLines">
      <summary>
        Defines if the grid lines are visible.
      </summary>
      <signature>
        <code>public bool ShowGridLines { get; set; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Grid.AddChild(cAlgo.API.ControlBase,System.Int32,System.Int32)">
      <summary>
        Adds a child element.
      </summary>
      <param name="child">The child.</param>
      <param name="row">The row.</param>
      <param name="column">The column.</param>
      <signature>
        <code>public void AddChild(ControlBase child, int row, int column)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Grid.AddChild(cAlgo.API.ControlBase,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        Adds the child.
      </summary>
      <param name="child">The child.</param>
      <param name="row">The row.</param>
      <param name="column">The column.</param>
      <param name="rowSpan">The row span.</param>
      <param name="columnSpan">The column span.</param>
      <signature>
        <code>public void AddChild(ControlBase child, int row, int column, int rowSpan, int columnSpan)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Grid.AddRow">
      <summary>
        Adds a row.
      </summary>
      <returns>GridRow.</returns>
      <signature>
        <code>public GridRow AddRow()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Grid.AddColumn">
      <summary>
        Adds a column.
      </summary>
      <returns>GridColumn.</returns>
      <signature>
        <code>public GridColumn AddColumn()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Grid.AddRows(System.Int32)">
      <summary>
        Adds a rows.
      </summary>
      <param name="count">The count.</param>
      <signature>
        <code>public void AddRows(int count)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Grid.AddColumns(System.Int32)">
      <summary>
        Adds columns.
      </summary>
      <param name="count">The count.</param>
      <signature>
        <code>public void AddColumns(int count)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Grid.RemoveRowAt(System.Int32)">
      <summary>
        Removes the row.
      </summary>
      <param name="index">The index.</param>
      <signature>
        <code>public void RemoveRowAt(int index)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Grid.RemoveColumnAt(System.Int32)">
      <summary>
        Removes a column.
      </summary>
      <param name="index">The index.</param>
      <signature>
        <code>public void RemoveColumnAt(int index)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.GridColumn">
      <summary>
        Represents the column of the grid.
      </summary>
      <seealso cref="T:cAlgo.API.Grid" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayoutGrid" />
      <signature>
        <code>public interface GridColumn</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GridColumn.Index">
      <summary>
        Gets the grid column index.
      </summary>
      <signature>
        <code>public int Index { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GridColumn.Width">
      <summary>
        Gets the grid column width.
      </summary>
      <signature>
        <code>public GridLength Width { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GridColumn.MinWidth">
      <summary>
        Defines the grid column minimum width.
      </summary>
      <signature>
        <code>public double MinWidth { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GridColumn.MaxWidth">
      <summary>
        Defines the grid column maximum width.
      </summary>
      <signature>
        <code>public double MaxWidth { get; set; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.GridColumn.SetWidthInPixels(System.Double)">
      <summary>
        Sets the grid column width in pixels.
      </summary>
      <param name="value">The value.</param>
      <signature>
        <code>public void SetWidthInPixels(double value)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.GridColumn.SetWidthInStars(System.Double)">
      <summary>
        Sets the grid column width in stars.
      </summary>
      <param name="stars">The stars.</param>
      <signature>
        <code>public void SetWidthInStars(double stars)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.GridColumn.SetWidthToAuto">
      <summary>
        Sets the grid column width to automatic.
      </summary>
      <signature>
        <code>public void SetWidthToAuto()</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.GridLength">
      <summary>
        Represents the length of the grid.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use GridLength
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class GridLengthSample : Indicator
          {
          [Parameter("Grid Row Length", DefaultValue = 2)]
          public int GridRowLength { get; set; }

          [Parameter("Grid Row Length Unit Type", DefaultValue = GridUnitType.Auto)]
          public GridUnitType GridRowLengthUnitType { get; set; }

          [Parameter("Grid Column Length", DefaultValue = 2)]
          public int GridColumnLength { get; set; }

          [Parameter("Grid Column Length Unit Type", DefaultValue = GridUnitType.Auto)]
          public GridUnitType GridColumnLengthUnitType { get; set; }

          protected override void Initialize()
          {
          var grid = new Grid(2, 2)
          {
          BackgroundColor = Color.Gold,
          Opacity = 0.6,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          ShowGridLines = true,
          };
          for (int iRow = 0; iRow &lt; 2; iRow++)
          {
          var row = grid.Rows[iRow];
          SetGridRowLength(row);
          for (int iColumn = 0; iColumn &lt; 2; iColumn++)
          {
          var column = grid.Columns[iColumn];
          SetGridColumnLength(column);
          grid.AddChild(new TextBlock
          {
          Text = string.Format("Row {0} and Column {1}", iRow, iColumn),
          Margin = 5,
          ForegroundColor = Color.Black,
          FontWeight = FontWeight.ExtraBold
          }, iRow, iColumn);
          }
          }
          Chart.AddControl(grid);
          }

          private void SetGridRowLength(GridRow row)
          {
          switch (GridRowLengthUnitType)
          {
          case GridUnitType.Auto:
          row.SetHeightToAuto();
          break;

          case GridUnitType.Pixel:
          row.SetHeightInPixels(GridRowLength);
          break;

          case GridUnitType.Star:
          row.SetHeightInStars(GridRowLength);
          break;
          }
          }

          private void SetGridColumnLength(GridColumn column)
          {
          switch (GridColumnLengthUnitType)
          {
          case GridUnitType.Auto:
          column.SetWidthToAuto();
          break;

          case GridUnitType.Pixel:
          column.SetWidthInPixels(GridColumnLength);
          break;

          case GridUnitType.Star:
          column.SetWidthInStars(GridColumnLength);
          break;
          }
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Grid" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayoutGrid" />
      <signature>
        <code>public class GridLength</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GridLength.Value">
      <summary>
        Gets or sets the value.
      </summary>
      <signature>
        <code>public double Value { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GridLength.UnitType">
      <summary>
        Gets or sets the type of the unit.
      </summary>
      <signature>
        <code>public GridUnitType UnitType { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.GridRow">
      <summary>
        Represents the row of the grid.
      </summary>
      <seealso cref="T:cAlgo.API.Grid" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayoutGrid" />
      <signature>
        <code>public interface GridRow</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GridRow.Index">
      <summary>
        Gets the grid row index.
      </summary>
      <signature>
        <code>public int Index { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GridRow.Height">
      <summary>
        Gets the height of the grid row.
      </summary>
      <signature>
        <code>public GridLength Height { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GridRow.MinHeight">
      <summary>
        Gets or sets the minimum height of the grid row.
      </summary>
      <signature>
        <code>public double MinHeight { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GridRow.MaxHeight">
      <summary>
        Gets or sets the maximum height of the grid row.
      </summary>
      <signature>
        <code>public double MaxHeight { get; set; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.GridRow.SetHeightInPixels(System.Double)">
      <summary>
        Sets the height of the grid row in pixels.
      </summary>
      <param name="value">The value.</param>
      <signature>
        <code>public void SetHeightInPixels(double value)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.GridRow.SetHeightInStars(System.Double)">
      <summary>
        Sets the height of the grid row in stars.
      </summary>
      <param name="stars">The stars.</param>
      <signature>
        <code>public void SetHeightInStars(double stars)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.GridRow.SetHeightToAuto">
      <summary>
        Sets the height of the grid row to automatic.
      </summary>
      <signature>
        <code>public void SetHeightToAuto()</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.GridUnitType">
      <summary>
        Represents the type of the grid unit.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use GridUnitType
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class GridUnitTypeSample : Indicator
          {
          [Parameter("Grid Row Length", DefaultValue = 2)]
          public int GridRowLength { get; set; }

          [Parameter("Grid Row Length Unit Type", DefaultValue = GridUnitType.Auto)]
          public GridUnitType GridRowLengthUnitType { get; set; }

          [Parameter("Grid Column Length", DefaultValue = 2)]
          public int GridColumnLength { get; set; }

          [Parameter("Grid Column Length Unit Type", DefaultValue = GridUnitType.Auto)]
          public GridUnitType GridColumnLengthUnitType { get; set; }

          protected override void Initialize()
          {
          var grid = new Grid(2, 2)
          {
          BackgroundColor = Color.Gold,
          Opacity = 0.6,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          ShowGridLines = true,
          };
          for (int iRow = 0; iRow &lt; 2; iRow++)
          {
          var row = grid.Rows[iRow];
          SetGridRowLength(row);
          for (int iColumn = 0; iColumn &lt; 2; iColumn++)
          {
          var column = grid.Columns[iColumn];
          SetGridColumnLength(column);
          grid.AddChild(new TextBlock
          {
          Text = string.Format("Row {0} and Column {1}", iRow, iColumn),
          Margin = 5,
          ForegroundColor = Color.Black,
          FontWeight = FontWeight.ExtraBold
          }, iRow, iColumn);
          }
          }
          Chart.AddControl(grid);
          }

          private void SetGridRowLength(GridRow row)
          {
          switch (GridRowLengthUnitType)
          {
          case GridUnitType.Auto:
          row.SetHeightToAuto();
          break;

          case GridUnitType.Pixel:
          row.SetHeightInPixels(GridRowLength);
          break;

          case GridUnitType.Star:
          row.SetHeightInStars(GridRowLength);
          break;
          }
          }

          private void SetGridColumnLength(GridColumn column)
          {
          switch (GridColumnLengthUnitType)
          {
          case GridUnitType.Auto:
          column.SetWidthToAuto();
          break;

          case GridUnitType.Pixel:
          column.SetWidthInPixels(GridColumnLength);
          break;

          case GridUnitType.Star:
          column.SetWidthInStars(GridColumnLength);
          break;
          }
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Grid" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayoutGrid" />
      <signature>
        <code>public enum GridUnitType</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.GridUnitType.Auto">
      <summary>
        The automatic definition of units for the grid.
      </summary>
      <signature>
        <code>public static GridUnitType Auto;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.GridUnitType.Pixel">
      <summary>
        Calculate grid size in pixels.
      </summary>
      <signature>
        <code>public static GridUnitType Pixel;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.GridUnitType.Star">
      <summary>
        Calculate grid size in stars.
      </summary>
      <signature>
        <code>public static GridUnitType Star;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Panel">
      <summary>
        Provides a base class for all Panel elements. Use Panel elements to position and arrange child objects.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayout" />
      <signature>
        <code>public abstract class Panel : ControlBase</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Panel.#ctor">
      <summary>
        Initializes a new instance of the Panel class.
      </summary>
      <signature>
        <code>public Panel()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Panel.BackgroundColor">
      <summary>
        Gets or sets the color of the panel background.
      </summary>
      <signature>
        <code>public Color BackgroundColor { get; set; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Panel.AddChild(cAlgo.API.ControlBase)">
      <summary>
        Adds the child element.
      </summary>
      <param name="child">The child.</param>
      <signature>
        <code>public void AddChild(ControlBase child)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Panel.RemoveChild(cAlgo.API.ControlBase)">
      <summary>
        Removes the child element.
      </summary>
      <param name="child">The child.</param>
      <signature>
        <code>public void RemoveChild(ControlBase child)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.StackPanel">
      <summary>
        Arranges the child element into a single line that can be oriented horizontally or vertically.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use the StackPanel
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class StackPanelSample : Indicator
          {
          [Parameter("Panel Orientation", DefaultValue = Orientation.Vertical)]
          public Orientation PanelOrientation { get; set; }

          protected override void Initialize()
          {
          var stackPanel = new StackPanel
          {
          BackgroundColor = Color.Gold,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          Orientation = PanelOrientation
          };

          for (int i = 0; i &lt; 10; i++)
          {
          stackPanel.AddChild(new TextBlock
          {
          Text = "Text",
          Margin = 5,
          ForegroundColor = Color.Black,
          FontWeight = FontWeight.ExtraBold
          });
          }

          Chart.AddControl(stackPanel);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayout" />
      <signature>
        <code>public class StackPanel : Panel</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.StackPanel.#ctor">
      <summary>
        Initializes a new instance of the StackPanel class.
      </summary>
      <signature>
        <code>public StackPanel()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.StackPanel.Orientation">
      <summary>
        Gets or sets the StackPanel orientation.
      </summary>
      <signature>
        <code>public Orientation Orientation { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WrapPanel">
      <summary>
        Positions the child elements in sequential position from left to right, breaking content to the next line at the
        end of the containing box, from top to bottom, or from right to left.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use the WrapPanel
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class WrapPanelSample : Indicator
          {
          [Parameter("Panel Orientation", DefaultValue = Orientation.Vertical)]
          public Orientation PanelOrientation { get; set; }

          protected override void Initialize()
          {
          var wrapPanel = new WrapPanel
          {
          BackgroundColor = Color.Gold,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          Orientation = PanelOrientation,
          Width = 150,
          Height = 150
          };

          for (int i = 0; i &lt; 10; i++)
          {
          wrapPanel.AddChild(new TextBlock
          {
          Text = "Text",
          Margin = 5,
          ForegroundColor = Color.Black,
          FontWeight = FontWeight.ExtraBold
          });
          }

          Chart.AddControl(wrapPanel);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayout" />
      <signature>
        <code>public class WrapPanel : Panel</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.WrapPanel.#ctor">
      <summary>
        Initializes a new instance of the WrapPanel class.
      </summary>
      <signature>
        <code>public WrapPanel()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WrapPanel.Orientation">
      <summary>
        Gets or sets the orientation of the child element.
      </summary>
      <signature>
        <code>public Orientation Orientation { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WrapPanel.ItemWidth">
      <summary>
        Gets or sets the width of the item.
      </summary>
      <signature>
        <code>public double ItemWidth { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WrapPanel.ItemHeight">
      <summary>
        Gets or sets the height of the item.
      </summary>
      <signature>
        <code>public double ItemHeight { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ScrollBarVisibility">
      <summary>
        Specifies the visibility of a ScrollBar for scrollable content.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use the ScrollBarVisibility
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ScrollBarVisibilitySample : Indicator
          {
          [Parameter("Horizontal Scroll Bar Visibility", DefaultValue = ScrollBarVisibility.Auto)]
          public ScrollBarVisibility HorizontalScrollBarVisibility { get; set; }

          [Parameter("Vertical Scroll Bar Visibility", DefaultValue = ScrollBarVisibility.Visible)]
          public ScrollBarVisibility VerticalScrollBarVisibility { get; set; }

          protected override void Initialize()
          {
          var scrollViewer = new ScrollViewer
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          BackgroundColor = Color.Gold,
          Opacity = 0.7,
          HorizontalScrollBarVisibility = HorizontalScrollBarVisibility,
          VerticalScrollBarVisibility = VerticalScrollBarVisibility,
          Height = 100
          };

          var grid = new Grid(10, 2)
          {
          BackgroundColor = Color.Gold,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          };

          scrollViewer.Content = grid;

          for (int iRow = 0; iRow &lt; 10; iRow++)
          {
          grid.AddChild(new TextBlock
          {
          Text = "Text",
          Margin = 5,
          ForegroundColor = Color.Black,
          FontWeight = FontWeight.ExtraBold
          }, iRow, 0);

          grid.AddChild(new Button
          {
          Text = "Button",
          Margin = 5,
          ForegroundColor = Color.Black,
          FontWeight = FontWeight.ExtraBold
          }, iRow, 1);
          }

          Chart.AddControl(scrollViewer);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.ScrollViewer" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayoutScrollViewer" />
      <signature>
        <code>public enum ScrollBarVisibility</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ScrollBarVisibility.Disabled">
      <summary>
        A ScrollBar does not appear even when the viewport cannot display all of the content.
      </summary>
      <signature>
        <code>public static ScrollBarVisibility Disabled;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ScrollBarVisibility.Auto">
      <summary>
        A ScrollBar appears and the dimension of the ScrollViewer is applied to the content when the viewport cannot display all of the content.
      </summary>
      <signature>
        <code>public static ScrollBarVisibility Auto;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ScrollBarVisibility.Hidden">
      <summary>
        A ScrollBar does not appear even when the viewport cannot display all of the content. The dimension of the ScrollViewer is not applied to the content.
      </summary>
      <signature>
        <code>public static ScrollBarVisibility Hidden;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ScrollBarVisibility.Visible">
      <summary>
        A ScrollBar always appears. The dimension of the ScrollViewer is applied to the content.
      </summary>
      <signature>
        <code>public static ScrollBarVisibility Visible;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Ellipse">
      <summary>
        Represents the ellipse shape.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to draw an ellipse shape on your chart
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class EllipseShapeSample : Indicator
          {
          protected override void Initialize()
          {
          var ellipse = new Ellipse
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          Margin = 5,
          Width = 100,
          Height = 200,
          StrokeColor = Color.Black,
          FillColor = Color.Aqua,
          StrokeThickness = 2,
          StrokeStartLineCap = PenLineCap.Square,
          Left = 100,
          Top = 50
          };

          var canvas = new Canvas
          {
          BackgroundColor = Color.Gold,
          Opacity = 0.5
          };

          canvas.AddChild(ellipse);

          Chart.AddControl(canvas);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayoutShapes" />
      <signature>
        <code>public class Ellipse : Shape</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Ellipse.#ctor">
      <summary>
        Initializes a new instance of the <see cref="T:cAlgo.API.Ellipse" /> class.
      </summary>
      <remarks>
      </remarks>
      <signature>
        <code>public Ellipse()</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.FillRule">
      <summary>
        Specifies how the intersecting areas of PathFigure objects contained in a Geometry are combined to form the area of the Geometry.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows the use of FillRule
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class FillRuleSample : Indicator
          {
          protected override void Initialize()
          {
          var stackPanelNonzero = new StackPanel()
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          BackgroundColor = Color.Gold,
          Opacity = 0.6,
          };

          stackPanelNonzero.AddChild(new TextBlock { Text = "Nonzero", ForegroundColor = Color.Black, HorizontalAlignment = HorizontalAlignment.Center, Margin = 10 });

          stackPanelNonzero.AddChild(new Polygon
          {
          FillColor = Color.Red,
          Width = 200,
          Height = 100,
          FillRule = FillRule.Nonzero,
          Margin = 10,
          Points = new Point[]
          {
          new Point(1, 200),
          new Point(50, 30),
          new Point(100, 1),
          new Point(150, 1),
          new Point(100, 10),
          new Point(50, 1),
          new Point(200, 70),
          new Point(300, 90),
          }
          });

          stackPanelNonzero.AddChild(new TextBlock { Text = "EvenOdd", ForegroundColor = Color.Black, HorizontalAlignment = HorizontalAlignment.Center, Margin = 10 });

          stackPanelNonzero.AddChild(new Polygon
          {
          FillColor = Color.Red,
          Width = 200,
          Height = 100,
          FillRule = FillRule.EvenOdd,
          Margin = 10,
          Points = new Point[]
          {
          new Point(1, 200),
          new Point(50, 30),
          new Point(100, 1),
          new Point(150, 1),
          new Point(100, 10),
          new Point(50, 1),
          new Point(200, 70),
          new Point(300, 90),
          }
          });

          Chart.AddControl(stackPanelNonzero);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayoutShapes" />
      <signature>
        <code>public enum FillRule</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FillRule.EvenOdd">
      <summary>
        Rule that determines whether a point is in the fill region by drawing a ray from that point to infinity in any direction and counting the number of path segments within the given shape that the ray crosses. If this number is odd, the point is inside; if even, the point is outside.
      </summary>
      <remarks>
      </remarks>
      <signature>
        <code>public static FillRule EvenOdd;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.FillRule.Nonzero">
      <summary>
        Rule that determines whether a point is in the fill region of the path by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left. After counting the crossings, if the result is zero then the point is outside the path. Otherwise, it is inside.
      </summary>
      <remarks>
      </remarks>
      <signature>
        <code>public static FillRule Nonzero;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Line">
      <summary>
        Represents the line shape.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to draw a line shape on your chart
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class LineShapeSample : Indicator
          {
          protected override void Initialize()
          {
          var xCenter = Chart.Width / 2;
          var yCenter = Chart.Height / 2;

          var line = new Line
          {
          X1 = xCenter,
          X2 = xCenter + 100,
          Y1 = yCenter,
          Y2 = yCenter + 100,
          StrokeColor = Color.Red,
          StrokeThickness = 2
          };

          Chart.AddControl(line);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayoutShapes" />
      <signature>
        <code>public class Line : Shape</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Line.#ctor">
      <summary>
        Initializes a new instance of the <see cref="T:cAlgo.API.Line" /> class.
      </summary>
      <remarks>
      </remarks>
      <signature>
        <code>public Line()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Line.X1">
      <summary>
        Gets or sets x-axis point 1 data.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public double X1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Line.Y1">
      <summary>
        Gets or sets the y-axis point 2 data.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public double Y1 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Line.X2">
      <summary>
        Gets or sets the x-axis point 2 data.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public double X2 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Line.Y2">
      <summary>
        Gets or sets the y-axis point 2 data.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public double Y2 { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.PenLineCap">
      <summary>
        Describes the shape at the end of a line or segment.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use the PenLineCap properties of shapes
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PenLineCapSample : Indicator
          {
          [Parameter("Stroke Start Line Cap", DefaultValue = PenLineCap.Flat)]
          public PenLineCap StrokeStartLineCap { get; set; }

          [Parameter("Stroke End Line Cap", DefaultValue = PenLineCap.Flat)]
          public PenLineCap StrokeEndLineCap { get; set; }

          [Parameter("Stroke Dash Cap", DefaultValue = PenLineCap.Flat)]
          public PenLineCap StrokeDashCap { get; set; }

          protected override void Initialize()
          {
          var rectangle = new Rectangle
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          StrokeStartLineCap = StrokeStartLineCap,
          StrokeEndLineCap = StrokeEndLineCap,
          StrokeDashCap = StrokeDashCap,
          StrokeColor = Color.Red,
          StrokeThickness = 4,
          Width = 200,
          Height = 100,
          };

          Chart.AddControl(rectangle);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayoutShapes" />
      <signature>
        <code>public enum PenLineCap</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PenLineCap.Flat">
      <summary>
        A cap that does not extend past the last point of the line. Comparable to no line cap.
      </summary>
      <remarks>
      </remarks>
      <signature>
        <code>public static PenLineCap Flat;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PenLineCap.Square">
      <summary>
        A rectangle that has a height equal to the line thickness and a length equal to half the line thickness.
      </summary>
      <remarks>
      </remarks>
      <signature>
        <code>public static PenLineCap Square;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PenLineCap.Round">
      <summary>
        A semicircle that has a diameter equal to the line thickness.
      </summary>
      <remarks>
      </remarks>
      <signature>
        <code>public static PenLineCap Round;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PenLineCap.Triangle">
      <summary>
        An isosceles right triangle whose base length is equal to the thickness of the line.
      </summary>
      <remarks>
      </remarks>
      <signature>
        <code>public static PenLineCap Triangle;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.PenLineJoin">
      <summary>
        Describes the shape that joins two lines or segments.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use a shape Stroke Line Join
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PenLineJoinSample : Indicator
          {
          [Parameter("Stroke Line Join", DefaultValue = PenLineJoin.Miter)]
          public PenLineJoin StrokeLineJoin { get; set; }

          protected override void Initialize()
          {
          var rectangle = new Rectangle
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          StrokeLineJoin = StrokeLineJoin,
          StrokeColor = Color.Red,
          StrokeThickness = 4,
          Width = 200,
          Height = 100,
          };

          Chart.AddControl(rectangle);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayoutShapes" />
      <signature>
        <code>public enum PenLineJoin</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PenLineJoin.Miter">
      <summary>
        Regular angular vertices.
      </summary>
      <remarks>
      </remarks>
      <signature>
        <code>public static PenLineJoin Miter;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PenLineJoin.Bevel">
      <summary>
        Beveled vertices.
      </summary>
      <remarks>
      </remarks>
      <signature>
        <code>public static PenLineJoin Bevel;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PenLineJoin.Round">
      <summary>
        Rounded vertices.
      </summary>
      <remarks>
      </remarks>
      <signature>
        <code>public static PenLineJoin Round;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Point">
      <summary>
        Represents an x- and y-coordinate pair in two-dimensional space.
      </summary>
      <remarks>
      </remarks>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayoutShapes" />
      <signature>
        <code>public class Point</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Point.#ctor(System.Double,System.Double)">
      <summary>
        Initializes a new instance of the <see cref="T:cAlgo.API.Point" /> class.
      </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <remarks>
      </remarks>
      <signature>
        <code>public Point(double x, double y)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Point.X">
      <summary>
        Gets or sets the x-coordinate of this Point.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public double X { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Point.Y">
      <summary>
        Gets or sets the y-coordinate of this Point.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public double Y { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Point.Equals(System.Object)">
      <summary>
        Determines whether the specified object is equal to the current object.
      </summary>
      <param name="obj">Other object to compare current object with it</param>
      <returns>
      </returns>
      <remarks>
      </remarks>
      <signature>
        <code>public bool Equals(object obj)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Point.GetHashCode">
      <summary>
        Returns the hash code for this instance.
      </summary>
      <returns>
      </returns>
      <remarks>
      </remarks>
      <signature>
        <code>public int GetHashCode()</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Polygon">
      <summary>
        Draws a polygon, which is a connected series of lines that form a closed shape.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to draw a Polygon
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PolygonSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.AddControl(new Polygon
          {
          FillColor = Color.Red,
          Width = 200,
          Height = 100,
          Margin = 10,
          Points = new Point[]
          {
          new Point(100, 100),
          new Point(200, 50),
          new Point(300, 100),
          new Point(100, 100),
          }
          });
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayoutShapes" />
      <signature>
        <code>public class Polygon : Shape</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Polygon.#ctor">
      <summary>
        Initializes a new instance of the <see cref="T:cAlgo.API.Polygon" /> class.
      </summary>
      <remarks>
      </remarks>
      <signature>
        <code>public Polygon()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Polygon.Points">
      <summary>
        Gets or sets a collection that contains the vertex points of the polygon.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public Point[] Points { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Polygon.FillRule">
      <summary>
        Gets or sets a FillRule enumeration that specifies how the interior fill of the shape is determined.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public FillRule FillRule { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Polyline">
      <summary>
        Draws a series of connected straight lines.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use Polyline to draw connected lines
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PolylineSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.AddControl(new Polyline
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          StrokeColor = Color.Red,
          StrokeThickness = 1,
          Points = new[]
          {
          new Point(10, 10),
          new Point(100,200),
          new Point(10, 100),
          new Point(10, 10),
          }
          });
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayoutShapes" />
      <signature>
        <code>public class Polyline : Shape</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Polyline.#ctor">
      <summary>
        Initializes a new instance of the <see cref="T:cAlgo.API.Polyline" /> class.
      </summary>
      <remarks>
      </remarks>
      <signature>
        <code>public Polyline()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Polyline.Points">
      <summary>
        Gets or sets a collection that contains the vertex points of the Polyline.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public Point[] Points { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Polyline.FillRule">
      <summary>
        Gets or sets a FillRule enumeration that specifies how the interior fill of the shape is determined.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public FillRule FillRule { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Rectangle">
      <summary>
        Represents the rectangle.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use the Rectangle shape which is a chart control
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class RectangleShapeSample : Indicator
          {
          protected override void Initialize()
          {
          var stackPanel = new StackPanel
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          BackgroundColor = Color.Gold,
          Opacity = 0.6
          };

          var rectangle = new Rectangle
          {
          StrokeColor = Color.Blue,
          FillColor = Color.Red,
          StrokeThickness = 2,
          Margin = 10,
          Width = 300,
          Height = 100
          };

          stackPanel.AddChild(rectangle);

          Chart.AddControl(stackPanel);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayoutShapes" />
      <signature>
        <code>public class Rectangle : Shape</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Rectangle.#ctor">
      <summary>
        Initializes a new instance of the <see cref="T:cAlgo.API.Rectangle" /> class.
      </summary>
      <remarks>
      </remarks>
      <signature>
        <code>public Rectangle()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Rectangle.RadiusX">
      <summary>
        Gets or sets the x-axis radius of the ellipse that is used to round the corners of the rectangle.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public double RadiusX { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Rectangle.RadiusY">
      <summary>
        Gets or sets the y-axis radius of the ellipse that is used to round the corners of the rectangle.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public double RadiusY { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Shape">
      <summary>
        Provides the base class for shape elements, such as  <see cref="T:cAlgo.API.Ellipse" />,
        <see cref="T:cAlgo.API.Polygon" />, and  <see cref="T:cAlgo.API.Rectangle" />.
      </summary>
      <remarks>
      </remarks>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayoutShapes" />
      <signature>
        <code>public abstract class Shape : ControlBase</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Shape.#ctor">
      <summary>
        Initializes a new instance of the <see cref="T:cAlgo.API.Shape" /> class.
      </summary>
      <remarks>
      </remarks>
      <signature>
        <code>public Shape()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Shape.StrokeColor">
      <summary>
        Gets or sets the stroke color.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public Color StrokeColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Shape.FillColor">
      <summary>
        Gets or sets the fill color.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public Color FillColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Shape.StrokeThickness">
      <summary>
        Gets or sets the stroke thickness.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public double StrokeThickness { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Shape.Stretch">
      <summary>
        Gets or sets the stretch value.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public Stretch Stretch { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Shape.StrokeEndLineCap">
      <summary>
        Gets or sets the shape at the end of a line.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public PenLineCap StrokeEndLineCap { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Shape.StrokeStartLineCap">
      <summary>
        Gets or sets the shape at the beginning of a line.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public PenLineCap StrokeStartLineCap { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Shape.StrokeLineJoin">
      <summary>
        Gets or sets the shape that joins two lines.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public PenLineJoin StrokeLineJoin { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Shape.StrokeMiterLimit">
      <summary>
        Gets or sets a limit on the ratio of the miter length to half the StrokeThickness of a Shape element.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public double StrokeMiterLimit { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Shape.StrokeDashArray">
      <summary>
        Gets or sets a collection of Double values that indicate the pattern of dashes and gaps that is used to outline
        shapes.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public double[] StrokeDashArray { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Shape.StrokeDashOffset">
      <summary>
        Gets or sets a Double that specifies the distance within the dash pattern where a dash begins.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public double StrokeDashOffset { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Shape.StrokeDashCap">
      <summary>
        Gets or sets a PenLineCap enumeration value that specifies how the ends of a dash are drawn.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public PenLineCap StrokeDashCap { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Stretch">
      <summary>
        Describes how content is resized to fill its allocated space.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use shapes stretch property
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class StretchSample : Indicator
          {
          [Parameter("Stretch", DefaultValue = Stretch.Uniform)]
          public Stretch Stretch { get; set; }

          protected override void Initialize()
          {
          var rectangle = new Rectangle
          {
          Stretch = Stretch,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          Height = 100,
          Width = 200,
          FillColor = Color.Blue,
          StrokeColor = Color.Red,
          Opacity = 0.7,
          };

          Chart.AddControl(rectangle);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public enum Stretch</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Stretch.None">
      <summary>
        The content preserves its original size.
      </summary>
      <signature>
        <code>public static Stretch None;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Stretch.Fill">
      <summary>
        The content is resized to fill the destination dimensions. The aspect ratio is not preserved.
      </summary>
      <signature>
        <code>public static Stretch Fill;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Stretch.Uniform">
      <summary>
        The content is resized to fit in the destination dimensions while it preserves its native aspect ratio.
      </summary>
      <signature>
        <code>public static Stretch Uniform;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Stretch.UniformToFill">
      <summary>
        The content is resized to fill the destination dimensions while it preserves its native aspect ratio. If the aspect ratio of the destination rectangle differs from the source, the source content is clipped to fit in the destination dimensions.
      </summary>
      <signature>
        <code>public static Stretch UniformToFill;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.StretchDirection">
      <summary>
        Describes how scaling applies to content and restricts scaling to named axis types.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use the StretchDirection
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class StretchDirectionSample : Indicator
          {
          [Parameter("Stretch Direction", DefaultValue = StretchDirection.UpOnly)]
          public StretchDirection StretchDirection { get; set; }

          protected override void Initialize()
          {
          var image = new Image
          {
          Source = Properties.Resources.ctrader_logo,
          Width = 200,
          Height = 200,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          StretchDirection = StretchDirection
          };

          Chart.AddControl(image);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public enum StretchDirection</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.StretchDirection.UpOnly">
      <summary>
        The content scales upward only when it is smaller than the parent. If the content is larger, no scaling downward is performed.
      </summary>
      <signature>
        <code>public static StretchDirection UpOnly;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.StretchDirection.DownOnly">
      <summary>
        The content scales downward only when it is larger than the parent. If the content is smaller, no scaling upward is performed.
      </summary>
      <signature>
        <code>public static StretchDirection DownOnly;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.StretchDirection.Both">
      <summary>
        The content stretches to fit the parent according to the Stretch mode.
      </summary>
      <signature>
        <code>public static StretchDirection Both;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Style">
      <summary>
        Represents the style of a chart control.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use control style to change a group of controls style instead of setting each control properties separatly
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class StyleSample : Indicator
          {
          protected override void Initialize()
          {
          var style = new Style();

          style.Set(ControlProperty.Margin, 5);
          style.Set(ControlProperty.ForegroundColor, Color.Blue);
          style.Set(ControlProperty.FontSize, 14);
          style.Set(ControlProperty.Width, 100);

          var stackPanel = new StackPanel
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          BackgroundColor = Color.Gold,
          Orientation = Orientation.Vertical
          };

          for (var i = 0; i &lt; 10; i++)
          {
          stackPanel.AddChild(new TextBlock
          {
          Text = "Textr Block #" + i,
          Style = style
          });
          }

          Chart.AddControl(stackPanel);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsStyles" />
      <signature>
        <code>public class Style</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Style.#ctor">
      <summary>
        Initializes a new instance of Style class.
      </summary>
      <signature>
        <code>public Style()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Style.#ctor(cAlgo.API.Style)">
      <summary>
        Represents the parent style to be inherited by a desired style.
      </summary>
      <param name="parentStyle">
      </param>
      <signature>
        <code>public Style(Style parentStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Style.Set(cAlgo.API.ControlProperty,System.Object,cAlgo.API.ControlState)">
      <summary>
        Provides data for the chart control Style for the specified ControlProperty and the ControlState.
      </summary>
      <param name="property">The control property</param>
      <param name="value">The property value</param>
      <param name="state">Control state</param>
      <signature>
        <code>public void Set(ControlProperty property, object value, ControlState state)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Style.Set(cAlgo.API.ControlProperty,System.Object)">
      <summary>
        Sets the chart control Style for the specified ControlProperty.
      </summary>
      <param name="property">The control property</param>
      <param name="value">The property value</param>
      <signature>
        <code>public void Set(ControlProperty property, object value)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Style.Get(cAlgo.API.ControlProperty)">
      <summary>
        Gets the chart object style for the specified ControlProperty.
      </summary>
      <param name="property">The control property</param>
      <returns>The style value for the passed control property</returns>
      <signature>
        <code>public object Get(ControlProperty property)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Style.Get(cAlgo.API.ControlProperty,cAlgo.API.ControlState)">
      <summary>
        Gets the chart control style for the specified ControlProperty and ControlState.
      </summary>
      <param name="property">The control property</param>
      <param name="state">Control state</param>
      <returns>The style value for the passed control property</returns>
      <signature>
        <code>public object Get(ControlProperty property, ControlState state)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TextAlignment">
      <summary>
        The text alignment regarding the anchor point.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to use TextAlignment property to align the text
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TextAlignmentSample : Indicator
          {
          [Parameter("Text Alignment", DefaultValue = TextAlignment.Center)]
          public TextAlignment TextAlignment { get; set; }

          protected override void Initialize()
          {
          var stackPanel = new StackPanel
          {
          BackgroundColor = Color.Gold,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          Opacity = 0.6,
          Width = 200
          };

          stackPanel.AddChild(new TextBlock { Text = "Sample text", TextAlignment = TextAlignment });

          Chart.AddControl(stackPanel);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public enum TextAlignment</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TextAlignment.Left">
      <summary>
        Align the text left.
      </summary>
      <signature>
        <code>public static TextAlignment Left;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TextAlignment.Right">
      <summary>
        Align the text right.
      </summary>
      <signature>
        <code>public static TextAlignment Right;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TextAlignment.Center">
      <summary>
        Center the text vertically.
      </summary>
      <signature>
        <code>public static TextAlignment Center;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TextAlignment.Justify">
      <summary>
        Justify the text.
      </summary>
      <signature>
        <code>public static TextAlignment Justify;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TextTrimming">
      <summary>
        Describes how text is trimmed when it overflows the edge of its containing box.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to use TextTrimming property to manage the text trim
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TextTrimmingSample : Indicator
          {
          [Parameter("Text", DefaultValue = "very long texttttttttttttttttttttt")]
          public string Text { get; set; }

          [Parameter("Trimming", DefaultValue = TextTrimming.CharacterEllipsis)]
          public TextTrimming TextTrimming { get; set; }

          protected override void Initialize()
          {
          var stackPanel = new StackPanel
          {
          BackgroundColor = Color.Gold,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          Opacity = 0.6,
          Width = 100
          };

          stackPanel.AddChild(new TextBlock
          {
          Text = Text,
          FontWeight = FontWeight.ExtraBold,
          ForegroundColor = Color.Blue,
          TextTrimming = TextTrimming
          });

          Chart.AddControl(stackPanel);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public enum TextTrimming</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TextTrimming.None">
      <summary>
        Text is not trimmed.
      </summary>
      <signature>
        <code>public static TextTrimming None;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TextTrimming.CharacterEllipsis">
      <summary>
        Text is trimmed at a character boundary. An ellipsis (...) is drawn in place of remaining text.
      </summary>
      <signature>
        <code>public static TextTrimming CharacterEllipsis;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TextTrimming.WordEllipsis">
      <summary>
        Text is trimmed at a word boundary. An ellipsis (...) is drawn in place of remaining text.
      </summary>
      <signature>
        <code>public static TextTrimming WordEllipsis;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TextWrapping">
      <summary>
        Specifies whether text wraps when it reaches the edge of the containing box.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to use TextWrapping property to manage the text wrap
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TextWrappingSample : Indicator
          {
          [Parameter("Text", DefaultValue = "very long texttttttttttttttttttttt")]
          public string Text { get; set; }

          [Parameter("Wrapping", DefaultValue = TextWrapping.NoWrap)]
          public TextWrapping TextWrapping { get; set; }

          protected override void Initialize()
          {
          var stackPanel = new StackPanel
          {
          BackgroundColor = Color.Gold,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          Opacity = 0.6,
          Width = 100
          };

          stackPanel.AddChild(new TextBlock
          {
          Text = Text,
          FontWeight = FontWeight.ExtraBold,
          ForegroundColor = Color.Blue,
          TextWrapping = TextWrapping
          });

          Chart.AddControl(stackPanel);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public enum TextWrapping</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TextWrapping.WrapWithOverflow">
      <summary>
        Line-breaking occurs if the line overflows beyond the available block width. However, a line may overflow beyond the block width if the line breaking algorithm cannot determine a line break opportunity, as in the case of a very long word constrained in a fixed-width container with no scrolling allowed.
      </summary>
      <signature>
        <code>public static TextWrapping WrapWithOverflow;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TextWrapping.NoWrap">
      <summary>
        No line wrapping is performed.
      </summary>
      <signature>
        <code>public static TextWrapping NoWrap;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TextWrapping.Wrap">
      <summary>
        Line-breaking occurs if the line overflows beyond the available block width, even if the standard line breaking algorithm cannot determine any line break opportunity, as in the case of a very long word constrained in a fixed-width container with no scrolling allowed.
      </summary>
      <signature>
        <code>public static TextWrapping Wrap;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Thickness">
      <summary>
        Defines the thickness of the frame around the rectangle.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use Thickness for defining a chart control margin
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ThicknessSample : Indicator
          {
          protected override void Initialize()
          {
          var stackPanel = new StackPanel
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          BackgroundColor = Color.Gold,
          Opacity = 0.6
          };

          var rectangle = new Rectangle
          {
          StrokeColor = Color.Blue,
          FillColor = Color.Red,
          StrokeThickness = 2,
          Margin = new Thickness(10, 5, 10, 5),
          Width = 300,
          Height = 100,
          };

          stackPanel.AddChild(rectangle);

          Chart.AddControl(stackPanel);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Controls" />
      <signature>
        <code>public sealed struct Thickness : ValueType</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
        Initializes a new instance of the <see cref="T:cAlgo.API.Thickness" /> structure.
      </summary>
      <param name="left">
      </param>
      <param name="top">
      </param>
      <param name="right">
      </param>
      <param name="bottom">
      </param>
      <remarks>
      </remarks>
      <signature>
        <code>public Thickness(double left, double top, double right, double bottom)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Thickness.#ctor(System.Double)">
      <summary>
        Initializes a new instance of the <see cref="T:cAlgo.API.Thickness" /> structure.
      </summary>
      <param name="uniformLength">
      </param>
      <remarks>
      </remarks>
      <signature>
        <code>public Thickness(double uniformLength)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Thickness.Top">
      <summary>
        Gets or sets the thickness of the top side of the retangle.
      </summary>
      <signature>
        <code>public double Top { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Thickness.Left">
      <summary>
        Gets or sets the thickness of the left side of the retangle.
      </summary>
      <signature>
        <code>public double Left { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Thickness.Bottom">
      <summary>
        Gets or sets the thickness of the bottom side of the retangle.
      </summary>
      <signature>
        <code>public double Bottom { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Thickness.Right">
      <summary>
        Gets or sets the thickness of the right side of the retangle.
      </summary>
      <signature>
        <code>public double Right { get; set; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Thickness.GetHashCode">
      <summary>
        Returns the hash code for this instance.
      </summary>
      <signature>
        <code>public int GetHashCode()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Thickness.Equals(cAlgo.API.Thickness)">
      <summary>
        Defines whether the specified object is equal to this instance.
      </summary>
      <param name="other">The other Thickness object to compare with current instance</param>
      <signature>
        <code>public bool Equals(Thickness other)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Thickness.Equals(System.Object)">
      <summary>
        Defines whether the specified object is equal to this instance.
      </summary>
      <param name="obj">The other object to compare with current instance</param>
      <signature>
        <code>public bool Equals(object obj)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.DataSeries">
      <summary>
        Represents a read only list of values, typically used to represent market price series.
        The values are accessed with an array-like [] operator.
      </summary>
      <example>
        <code>
          [Parameter]
          public DataSeries Source { get; set; }
          //...
          [Output("Main")]
          public IndicatorDataSeries Result{ get; set; }
          //...
          Result[index] = Source[index] * exp + previousValue * (1 - exp);
          //...
          Result[index] = (MarketSeries.Close[index] + MarketSeries.Open[index]) / 2;
          //...
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to work with data series
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class DataSeriesSample : Indicator
          {
          private TextBlock _lastValueTextBlock;
          private TextBlock _lastClosedValueTextBlock;
          private TextBlock _countTextBlock;

          [Parameter()]
          public DataSeries Source { get; set; }

          protected override void Initialize()
          {
          var grid = new Grid(3, 2)
          {
          BackgroundColor = Color.DarkGoldenrod,
          HorizontalAlignment = HorizontalAlignment.Left,
          VerticalAlignment = VerticalAlignment.Bottom,
          Opacity = 0.5
          };

          grid.AddChild(new TextBlock
          {
          Text = "Last Value",
          Margin = 5
          }, 0, 0);

          _lastValueTextBlock = new TextBlock
          {
          Text = Source.LastValue.ToString(),
          Margin = 5
          };

          grid.AddChild(_lastValueTextBlock, 0, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Last Closed Value",
          Margin = 5
          }, 1, 0);

          _lastClosedValueTextBlock = new TextBlock
          {
          Text = Source.Last(1).ToString(),
          Margin = 5
          };

          grid.AddChild(_lastClosedValueTextBlock, 1, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Values Count",
          Margin = 5
          }, 2, 0);

          _countTextBlock = new TextBlock
          {
          Text = Source.Count.ToString(),
          Margin = 5
          };

          grid.AddChild(_countTextBlock, 2, 1);

          Chart.AddControl(grid);
          }

          public override void Calculate(int index)
          {
          // You can also use "LastValue" property if you don't have index
          _lastValueTextBlock.Text = Source[index].ToString();

          // You can also use "Last(1)" property if you don't have index
          _lastClosedValueTextBlock.Text = Source[index - 1].ToString();

          _countTextBlock.Text = Source.Count.ToString();
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.CollectionsDataSeries" />
      <signature>
        <code>public interface DataSeries</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DataSeries.Item(System.Int32)">
      <summary>
        Gets the value in the dataseries at the specified position.
      </summary>
      <example>
        <code>
          //...
          [Parameter("Data Source")]
          public DataSeries Source { get; set; }
          //...
          [Output("Main")]
          public IndicatorDataSeries Result{ get; set; }
          //...
          public override void Calculate(int index)
          {
          // This is the simple moving average calculation.
          double sum = 0.0;
          for (int i = 0; i &lt;= Periods-1; i++)
          {
          // Source[i] is the item contained in Source at position i
          sum += Source[i];
          }
          Result[index] = sum / Periods;
          }
          //...
        </code>
      </example>
      <signature>
        <code>public double this[int index] { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DataSeries.LastValue">
      <summary>
        Gets the last value of this DataSeries.
      </summary>
      <remarks>
        The last value may represent one of the values of the last bar of the market series, e.g. Open, High, Low and Close.
        Therefore, take into consideration that on each tick, except the Open price, the rest of the values will most probably change.
      </remarks>
      <example>
        <code>
          //...
          protected override void OnTick()
          {
          double lastValue = MarketSeries.Close.LastValue;
          Print("The last value of MarketSeries.Close Series is: {0}", MarketSeries.Close.LastValue);

          // Property LastValue has an accessor but no setter, i.e. LastValue can be retrieved but not set.
          // The following code will produce an error
          MarketSeries.Close.LastValue = 100;
          }
          //...
        </code>
      </example>
      <signature>
        <code>public double LastValue { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.DataSeries.Last(System.Int32)">
      <summary>
        Access a value in the dataseries certain bars ago
      </summary>
      <param name="index">Number of bars ago</param>
      <example>
        <code>
          double value = MarketSeries.Close.Last(5);
          Print("The close price 5 bars ago was: {0}", value);
        </code>
      </example>
      <example>
        <code>
          double previousOpen = MarketSeries.Open.Last(1);
          double previousClose = MarketSeries.Close.Last(1);
          Print("Open: {0}, Close: {1}", previousOpen, previousClose);
        </code>
      </example>
      <example>
        <code>
          double currentClose = MarketSeries.Close.Last(0);
          Print("Current Close: {0}", currentClose);
        </code>
      </example>
      <signature>
        <code>public double Last(int index)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DataSeries.Count">
      <summary>
        Gets the total number of elements contained in the DataSeries.
      </summary>
      <example>
        <code>
          protected override void OnTick()
          {
          int total = MarketSeries.Close.Count;
          Print("The total elements contained in the MarketSeries.Close Series is: {0}", total);

          int lastIndex = total - 1;
          double lastCloseValue = MarketSeries.Close[lastIndex];

          //Print the last value of the series
          Print("The last value of Close Series is: {0}", lastCloseValue);

          }
        </code>
      </example>
      <signature>
        <code>public int Count { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Error">
      <summary>
        Encapsulates an error code.
      </summary>
      <example>
        <code>
          protected override void OnError(Error error)
          {
          // Print the error code
          Print("{0}", error.Code);
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Trading" />
      <signature>
        <code>public interface Error</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Error.Code">
      <summary>
        The encapsulated error code.
      </summary>
      <example>
        <code>
          protected override void OnError(Error error)
          {
          // stop the robot if there is a volume error
          if (error.Code == ErrorCode.BadVolume)
          Stop();
          }
        </code>
      </example>
      <signature>
        <code>public ErrorCode Code { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Error.TradeResult">
      <summary>
        The result of the trade that produced the error
      </summary>
      <example>
        <code>
          protected override void OnError(Error error)
          {
          var result = error.TradeResult;
          Print(result);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult TradeResult { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ErrorCode">
      <summary>
        Enumeration of standard error codes.
      </summary>
      <remarks>
        Error codes are readable descriptions of the responses returned by the server.
      </remarks>
      <example>
        <code>

          protected override void OnError(Error error)
          {
          //  Print the error to the log
          switch (error.Code)
          {
          case ErrorCode.BadVolume: Print("Bad Volume");
          break;
          case ErrorCode.TechnicalError:Print("Technical Error");
          break;
          case ErrorCode.NoMoney: Print("No Money");
          break;
          case ErrorCode.Disconnected: Print("Disconnected");
          break;
          case ErrorCode.MarketClosed: Print("Market Closed");
          break;
          }
          }

        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Trading" />
      <signature>
        <code>public enum ErrorCode</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ErrorCode.TechnicalError">
      <summary>
        A generic technical error with a trade request.
      </summary>
      <example>
        <code>
          protected override void OnError(Error error)
          {
          if (error.Code == ErrorCode.TechnicalError)
          {
          Print("Error. Confirm that the trade command parameters are valid");
          }
          }
        </code>
      </example>
      <signature>
        <code>public static ErrorCode TechnicalError;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ErrorCode.BadVolume">
      <summary>
        The volume value is not valid
      </summary>
      <example>
        <code>
          protected override void OnError(Error error)
          {
          if (error.Code == ErrorCode.BadVolume)
          {
          Print("Invalid Volume amount");
          }
          }
        </code>
      </example>
      <signature>
        <code>public static ErrorCode BadVolume;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ErrorCode.NoMoney">
      <summary>
        There are not enough money in the account to trade with.
      </summary>
      <example>
        <code>
          protected override void OnError(Error error)
          {
          if (error.Code == ErrorCode.NoMoney)
          {
          Print("Not enough money to trade.");
          }
          }
        </code>
      </example>
      <signature>
        <code>public static ErrorCode NoMoney;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ErrorCode.MarketClosed">
      <summary>
        The market is closed.
      </summary>
      <example>
        <code>
          protected override void OnError(Error error)
          {
          if (error.Code == ErrorCode.MarketClosed)
          {
          Print("The market is closed.");
          }
          }
        </code>
      </example>
      <signature>
        <code>public static ErrorCode MarketClosed;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ErrorCode.Disconnected">
      <summary>
        The server is disconnected.
      </summary>
      <example>
        <code>
          protected override void OnError(Error error)
          {
          if (error.Code == ErrorCode.Disconnected)
          {
          Print("The server is disconnected.");
          }
          }
        </code>
      </example>
      <signature>
        <code>public static ErrorCode Disconnected;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ErrorCode.EntityNotFound">
      <summary>
        Position does not exist.
      </summary>
      <example>
        <code>
          protected override void OnError(Error error)
          {
          if (error.Code == ErrorCode.EntityNotFound)
          {
          Print("Position not found");
          }
          }
        </code>
      </example>
      <signature>
        <code>public static ErrorCode EntityNotFound;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ErrorCode.Timeout">
      <summary>
        Operation timed out.
      </summary>
      <example>
        <code>
          protected override void OnError(Error error)
          {
          if (error.Code == ErrorCode.Timeout)
          {
          Print("Operation timed out");
          }
          }
        </code>
      </example>
      <signature>
        <code>public static ErrorCode Timeout;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ErrorCode.UnknownSymbol">
      <summary>
        Unknown symbol.
      </summary>
      <example>
        <code>
          protected override void OnError(Error error)
          {
          if (error.Code == ErrorCode.UnknownSymbol)
          {
          Print("Unknown symbol.");
          }
          }
        </code>
      </example>
      <signature>
        <code>public static ErrorCode UnknownSymbol;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ErrorCode.InvalidStopLossTakeProfit">
      <summary>
        The invalid Stop Loss or Take Profit.
      </summary>
      <example>
        <code>
          protected override void OnError(Error error)
          {
          if (error.Code == ErrorCode.InvalidStopLossTakeProfit)
          {
          Print("The invalid Stop Loss or Take Profit.");
          }
          }
        </code>
      </example>
      <signature>
        <code>public static ErrorCode InvalidStopLossTakeProfit;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ErrorCode.InvalidRequest">
      <summary>
        The invalid request.
      </summary>
      <example>
        <code>
          protected override void OnError(Error error)
          {
          if (error.Code == ErrorCode.InvalidRequest)
          {
          Print("The invalid request.");
          }
          }
        </code>
      </example>
      <signature>
        <code>public static ErrorCode InvalidRequest;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ErrorCode.NoTradingPermission">
      <summary>
        Occurs when accessing trading API without trading permission.
      </summary>
      <example>
        <code>
          protected override void OnError(Error error)
          {
          if (error.Code == ErrorCode.NoTradingPermission)
          {
          Print("The invalid request.");
          }
          }
        </code>
      </example>
      <signature>
        <code>public static ErrorCode NoTradingPermission;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.AccountSwitchedEventArgs">
      <summary>
        Provides data for the account switched event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class AccountSwitchedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AccountSwitchedEventArgs.PreviousAccountNumber">
      <summary>
        Returns previous account number.
      </summary>
      <signature>
        <code>public int PreviousAccountNumber { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AccountSwitchedEventArgs.CurrentAccountNumber">
      <summary>
        Returns new account number.
      </summary>
      <signature>
        <code>public int CurrentAccountNumber { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ActiveFrameChangedEventArgs">
      <summary>
        Provides data for the active frame changed event.
      </summary>
      <seealso cref="T:cAlgo.API.ChartManager" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ActiveFrameChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ActiveFrameChangedEventArgs.OldFrame">
      <summary>
        Returns the old / previous active frame or null.
      </summary>
      <signature>
        <code>public Frame OldFrame { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ActiveFrameChangedEventArgs.NewFrame">
      <summary>
        Returns the new active frame or null.
      </summary>
      <signature>
        <code>public Frame NewFrame { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.AlgoTypeChangedEventArgs">
      <summary>
        Provides data for Algo type changed event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class AlgoTypeChangedEventArgs : AlgoTypeEventArgs</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.AlgoTypeDeletedEventArgs">
      <summary>
        Provides data for Algo type deleted event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class AlgoTypeDeletedEventArgs : AlgoTypeEventArgs</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.AlgoTypeEventArgs">
      <summary>
        Base structure that provides data for Algo registry events.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public abstract class AlgoTypeEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AlgoTypeEventArgs.AlgoTypeName">
      <summary>
        Algo Type Name
      </summary>
      <signature>
        <code>public string AlgoTypeName { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.AlgoTypeInstalledEventArgs">
      <summary>
        Provides data for Algo type installed event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class AlgoTypeInstalledEventArgs : AlgoTypeEventArgs</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.AspBlockAttachedEventArgs">
      <summary>
        Provides data for plugin ASP block attached event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class AspBlockAttachedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspBlockAttachedEventArgs.AspBlock">
      <summary>
        Attached block.
      </summary>
      <signature>
        <code>public AspBlock AspBlock { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.AspBlockDetachedEventArgs">
      <summary>
        Provides data for plugin ASP block detached event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class AspBlockDetachedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspBlockDetachedEventArgs.AspBlock">
      <summary>
        Detached block.
      </summary>
      <signature>
        <code>public AspBlock AspBlock { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.AspBlockUpdatedEventArgs">
      <summary>
        Provides data for plugin ASP block updated event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class AspBlockUpdatedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspBlockUpdatedEventArgs.AspBlock">
      <summary>
        Updated block.
      </summary>
      <signature>
        <code>public AspBlock AspBlock { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.AspSymbolChangedEventArgs">
      <summary>
        Provides data for active symbol panel symbol changed event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class AspSymbolChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspSymbolChangedEventArgs.OldSymbol">
      <summary>
        Old symbol of active symbol panel.
      </summary>
      <signature>
        <code>public Symbol OldSymbol { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspSymbolChangedEventArgs.NewSymbol">
      <summary>
        New symbol of active symbol panel.
      </summary>
      <signature>
        <code>public Symbol NewSymbol { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.AspTabIsSelectedChangedEventArgs">
      <summary>
        Provides data for plugin ASP tab IsSelectedChanged event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class AspTabIsSelectedChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspTabIsSelectedChangedEventArgs.AspTab">
      <summary>
        ASP tab.
      </summary>
      <signature>
        <code>public AspTab AspTab { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.BarClosedEventArgs">
      <summary>
        Provides data for the event when a bar closed on the chart.
      </summary>
      <seealso cref="T:cAlgo.API.Bars" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class BarClosedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BarClosedEventArgs.Bars">
      <summary>
        Gets the bar data.
      </summary>
      <signature>
        <code>public Bars Bars { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.BarOpenedEventArgs">
      <summary>
        Provides data for the event when a new bar opened on the chart.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the Bars object BarOpened event BarOpenedEventArgs
          [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class BarOpenedEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Bars.BarOpened += Bars_BarOpened;
          }

          // This method will be called if a new bar opens
          // BarOpenedEventArgs has a Bars property the you can use to get Bars object
          private void Bars_BarOpened(BarOpenedEventArgs obj)
          {
          var newOpendBar = obj.Bars.LastBar; // Or you can use obj.Bars[Bars.Count - 1] or obj.Bars.Last(0)
          var closedBar = obj.Bars.Last(1); // Or you can use obj.Bars[Bars.Count - 2]
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Bars" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class BarOpenedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BarOpenedEventArgs.Bars">
      <summary>
        Gets the bar data.
      </summary>
      <signature>
        <code>public Bars Bars { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.BarsHistoryLoadedEventArgs">
      <summary>
        Provides data for the history loaded event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo.Robots
          {
          // This sample indicator shows how to use BarsHistoryLoadedEventArgs
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class BarsHistoryLoadedEventArgsSample : Robot
          {
          protected override void OnStart()
          {
          Bars.HistoryLoaded += Bars_HistoryLoaded;

          // You can load more bars by calling this method or LoadMoreHistory
          Bars.LoadMoreHistoryAsync();
          }

          // This method will be called if you scroll left on your chart and load more data
          // Or if you call the Bars.LoadMoreHistory/LoadMoreHistoryAsync methods
          // BarsHistoryLoadedEventArgs has two properties
          // BarsHistoryLoadedEventArgs.Bars refers to the bars object that it's history is loaded
          // BarsHistoryLoadedEventArgs.Count gives you the number of bars that has been loaded
          private void Bars_HistoryLoaded(BarsHistoryLoadedEventArgs obj)
          {
          Print("Loaded Bars Count: {0}", obj.Count);
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Bars" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class BarsHistoryLoadedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BarsHistoryLoadedEventArgs.Bars">
      <summary>
        Gets the bar objects data.
      </summary>
      <signature>
        <code>public Bars Bars { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BarsHistoryLoadedEventArgs.Count">
      <summary>
        Gets the number of bars.
      </summary>
      <signature>
        <code>public int Count { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.BarsTickEventArgs">
      <summary>
        Provides data for the tick bar event.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Internals;

          namespace cAlgo
          {
          // This sample indicator shows how to use Tick
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TickSample : Indicator
          {
          private Ticks _ticks;

          [Parameter("Symbol Name", DefaultValue = "EURUSD")]
          public string InputSymbolName { get; set; }

          protected override void Initialize()
          {
          // Getting a symbol ticks data
          _ticks = MarketData.GetTicks(InputSymbolName);
          // Subscribing to upcoming ticks
          _ticks.Tick += Ticks_Tick;
          }

          private void Ticks_Tick(TicksTickEventArgs obj)
          {
          // Printing Last tick inside Ticks collection
          Print("Bid: {0} | Ask: {1} | Time: {2}", obj.Ticks.LastTick.Bid, obj.Ticks.LastTick.Ask, obj.Ticks.LastTick.Time);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Bars" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class BarsTickEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BarsTickEventArgs.Bars">
      <summary>
        Gets the Bar objects data.
      </summary>
      <signature>
        <code>public Bars Bars { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BarsTickEventArgs.IsBarOpened">
      <summary>
        Defines if current tick is the first tick of a new bar.
      </summary>
      <signature>
        <code>public bool IsBarOpened { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ButtonClickEventArgs">
      <summary>
        Represents the button click event data.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the Button object Click event ButtonClickEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ButtonClickEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          var button = new Button
          {
          Text = "Button not clicked yet",
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center
          };

          // Whenever you click on the button the Button_Click method will be called
          button.Click += Button_Click;

          Chart.AddControl(button);
          }

          // Here we change the butto test when it's clicked
          private void Button_Click(ButtonClickEventArgs obj)
          {
          obj.Button.Text = "Button Clicked";
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Button" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ButtonClickEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ButtonClickEventArgs.Button">
      <summary>
        Gets the button data.
      </summary>
      <signature>
        <code>public Button Button { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartActivationChangedEventArgs">
      <summary>Provides data for chart activated/deactivated events</summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartActivationChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartActivationChangedEventArgs.Chart">
      <summary>
        The chart that event belonges to
      </summary>
      <signature>
        <code>public Chart Chart { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartColorEventArgs">
      <summary>
        Provides data for the chart color event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the Chart ChartColorEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartColorEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.ColorsChanged += Chart_ColorsChanged;
          }

          private void Chart_ColorsChanged(ChartColorEventArgs obj)
          {
          Print("Chart {0} {1} Color changed", obj.Chart.SymbolName, obj.Chart.TimeFrame);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartColorEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartColorEventArgs.Chart">
      <summary>
        Gets the chart.
      </summary>
      <signature>
        <code>public Chart Chart { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartContainersAddedEventArgs">
      <summary>
        Provides data for the containers added event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartContainersAddedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartContainersAddedEventArgs.AddedChartContainers">
      <summary>
        Returns the added containers.
      </summary>
      <signature>
        <code>public ChartContainer[] AddedChartContainers { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartContainersRemovedEventArgs">
      <summary>
        Provides data for the containers removed event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartContainersRemovedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartContainersRemovedEventArgs.RemovedChartContainers">
      <summary>
        Returns the removed containers.
      </summary>
      <signature>
        <code>public ChartContainer[] RemovedChartContainers { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartDisplaySettingsEventArgs">
      <summary>
        Provides data for the chart display settings event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the Chart ChartDisplaySettingsEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartDisplaySettingsEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.DisplaySettingsChanged += Chart_DisplaySettingsChanged;
          }

          private void Chart_DisplaySettingsChanged(ChartDisplaySettingsEventArgs obj)
          {
          Print("Chart {0} {1} Display settings changed", obj.Chart.SymbolName, obj.Chart.TimeFrame);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartDisplaySettingsEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartDisplaySettingsEventArgs.Chart">
      <summary>
        Gets the chart.
      </summary>
      <signature>
        <code>public Chart Chart { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartDragEventArgs">
      <summary>
        Provides data for the chart dragging event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {

          // This example shows how to use the Chart ChartDragEventArgs
          // ChartDragEventArgs derives from ChartMouseEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartDragEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.DragStart += Chart_DragStart;
          Chart.DragEnd += Chart_DragEnd;
          }

          private void Chart_DragEnd(ChartDragEventArgs obj)
          {
          Print("Chart {0} {1} Drag Started | Mouse Location: ({2}, {3})", obj.Chart.SymbolName, obj.Chart.TimeFrame, obj.MouseX, obj.MouseY);
          }

          private void Chart_DragStart(ChartDragEventArgs obj)
          {
          Print("Chart {0} {1} Drag Ended | Mouse Location: ({2}, {3})", obj.Chart.SymbolName, obj.Chart.TimeFrame, obj.MouseX, obj.MouseY);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Chart" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartDragEventArgs : ChartMouseEventArgs</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartFrameLinkedChartGroupChangedEventArgs">
      <summary>
        Provides data for the chart frame LinkedChartGroup changed event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartFrameLinkedChartGroupChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFrameLinkedChartGroupChangedEventArgs.ChartFrame">
      <summary>
        Returns the chart frame.
      </summary>
      <signature>
        <code>public ChartFrame ChartFrame { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartIndicatorAddedEventArgs">
      <summary>
        The class representing <c>AddedEventArgs</c> for a <c>ChildIndicator</c>.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartIndicatorAddedEventArgs : ChartIndicatorEventArgs</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartIndicatorEventArgs">
      <summary>
        The base class representing event args for a <c>ChartIndicator</c>.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public abstract class ChartIndicatorEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartIndicatorEventArgs.Indicator">
      <summary>
        Gets the <c>ChartIndicator</c> that raised an event.
      </summary>
      <signature>
        <code>public ChartIndicator Indicator { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartIndicatorModifiedEventArgs">
      <summary>
        The class representing <c>ModifiedEventArgs</c> for a <c>ChartIndicator</c>.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartIndicatorModifiedEventArgs : ChartIndicatorEventArgs</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartIndicatorRemovedEventArgs">
      <summary>
        The class representing <c>RemovedEventArgs</c> for a <c>ChartIndicator</c>.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartIndicatorRemovedEventArgs : ChartIndicatorEventArgs</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartKeyboardEventArgs">
      <summary>Provides data for chart keyboard related events and callbacks</summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartKeyboardEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartKeyboardEventArgs.Chart">
      <summary>
        The chart that the event/callback occurred
      </summary>
      <signature>
        <code>public Chart Chart { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartKeyboardEventArgs.Key">
      <summary>
        Keyboard key
      </summary>
      <signature>
        <code>public Key Key { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartKeyboardEventArgs.Modifiers">
      <summary>
        Modifiers key that was used with the Key
      </summary>
      <signature>
        <code>public ModifierKeys Modifiers { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartKeyboardEventArgs.CtrlKey">
      <summary>
        True if Ctrl key was pressed otherwise False
      </summary>
      <signature>
        <code>public bool CtrlKey { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartKeyboardEventArgs.ShiftKey">
      <summary>
        True if Shift key was pressed otherwise False
      </summary>
      <signature>
        <code>public bool ShiftKey { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartKeyboardEventArgs.AltKey">
      <summary>
        True if Alt key was pressed otherwise False
      </summary>
      <signature>
        <code>public bool AltKey { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartMouseEventArgs">
      <summary>
        Provides data for the mouse related routed events.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the Chart ChartMouseEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartMouseEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.MouseMove += Chart_MouseMove; ;
          }

          private void Chart_MouseMove(ChartMouseEventArgs obj)
          {
          var text = string.Format("Mouse Location: ({0}, {1})", obj.MouseX, obj.MouseY);

          Chart.DrawStaticText("mouse", text, VerticalAlignment.Top, HorizontalAlignment.Right, Color.Red);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Chart" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartMouseEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartMouseEventArgs.Chart">
      <summary>
        Gets the chart.
      </summary>
      <signature>
        <code>public Chart Chart { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartMouseEventArgs.ChartArea">
      <summary>
        Gets the chart area.
      </summary>
      <signature>
        <code>public ChartArea ChartArea { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartMouseEventArgs.MouseX">
      <summary>
        Gets the X-axis value of the mouse event.
      </summary>
      <signature>
        <code>public double MouseX { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartMouseEventArgs.MouseY">
      <summary>
        Gets the Y-axis value of the mouse event.
      </summary>
      <signature>
        <code>public double MouseY { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartMouseEventArgs.TimeValue">
      <summary>
        Gets the time value on the X-axis where the mouse event occurs.
      </summary>
      <signature>
        <code>public DateTime TimeValue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartMouseEventArgs.BarIndex">
      <summary>
        Gets the exact bar index of the mouse event.
      </summary>
      <signature>
        <code>public double BarIndex { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartMouseEventArgs.YValue">
      <summary>
        Gets the Y-axis value of the mouse event.
      </summary>
      <signature>
        <code>public double YValue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartMouseEventArgs.CtrlKey">
      <summary>
        Defines whether the Ctrl key is pressed during the mouse event.
      </summary>
      <signature>
        <code>public bool CtrlKey { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartMouseEventArgs.ShiftKey">
      <summary>
        Defines whether the Shift key is pressed during the mouse event.
      </summary>
      <signature>
        <code>public bool ShiftKey { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartMouseEventArgs.AltKey">
      <summary>
        Defines whether the Alt key is pressed during the mouse event.
      </summary>
      <signature>
        <code>public bool AltKey { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartMouseWheelEventArgs">
      <summary>
        Provides data for the mouse wheel scroll event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the Chart ChartMouseWheelEventArgs
          // ChartMouseWheelEventArgs derives from ChartMouseEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartMouseWheelEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.MouseWheel += Chart_MouseWheel;
          }

          private void Chart_MouseWheel(ChartMouseWheelEventArgs obj)
          {
          var text = string.Format("Wheel Delta: {0}", obj.Delta);

          Chart.DrawStaticText("Wheel", text, VerticalAlignment.Top, HorizontalAlignment.Right, Color.Red);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Chart" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartMouseWheelEventArgs : ChartMouseEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartMouseWheelEventArgs.Delta">
      <summary>
        Gets the number of detents the mouse wheel has rotated. A detent is one notch of the mouse wheel.
      </summary>
      <signature>
        <code>public int Delta { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartObjectEventArgs">
      <summary>
        Provides data for the chart object change event.
      </summary>
      <seealso cref="T:cAlgo.API.Chart" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public abstract class ChartObjectEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartObjectEventArgs.Chart">
      <summary>
        Gets the chart.
      </summary>
      <signature>
        <code>public Chart Chart { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartObjectEventArgs.Area">
      <summary>
        Gets the chart area.
      </summary>
      <signature>
        <code>public ChartArea Area { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartObjectEventArgs.ChartObject">
      <summary>
        Gets the chart object.
      </summary>
      <signature>
        <code>public ChartObject ChartObject { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartObjectHoverChangedEventArgs">
      <summary>
        Provides data for the mouse hover over a chart object event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the Chart ChartObjectHoverChangedEventArgs
          // ChartObjectHoverChangedEventArgs is derived from ChartObjectsEventArgs
          // Draw an object and move mouse over it
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartObjectHoverChangedEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.ObjectHoverChanged += Chart_ObjectHoverChanged; ;
          }

          private void Chart_ObjectHoverChanged(ChartObjectHoverChangedEventArgs obj)
          {
          Chart.DrawStaticText("hover", string.Format("Is Object Hovered: {0}", obj.IsObjectHovered), VerticalAlignment.Top, HorizontalAlignment.Right, Color.Red);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartObjectHoverChangedEventArgs : ChartObjectEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartObjectHoverChangedEventArgs.IsObjectHovered">
      <summary>
        Defines if the mouse is hovered over the chart object.
      </summary>
      <signature>
        <code>public bool IsObjectHovered { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartObjectsAddedEventArgs">
      <summary>
        Provides data for the adding chart objects event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the Chart ChartObjectsAddedEventArgs
          // ChartObjectsAddedEventArgs is derived from ChartObjectsEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartObjectsAddedEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.ObjectsAdded += Chart_ObjectsAdded; ;
          }

          private void Chart_ObjectsAdded(ChartObjectsAddedEventArgs obj)
          {
          Print("{0} objects added to chart", obj.ChartObjects.Count);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Chart" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartObjectsAddedEventArgs : ChartObjectsEventArgs</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartObjectsEventArgs">
      <summary>
        Provides data for the chart objects change event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the Chart ChartObjectsEventArgs
          // All chart objects related events args are derived from ChartObjectsEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartObjectsEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.ObjectsRemoved += Chart_ObjectsRemoved;
          }

          private void Chart_ObjectsRemoved(ChartObjectsRemovedEventArgs obj)
          {
          var chartObjectsEventArgs = obj as ChartObjectsEventArgs;

          Print("{0} objects removed from chart", chartObjectsEventArgs.ChartObjects.Count);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Chart" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public abstract class ChartObjectsEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartObjectsEventArgs.Chart">
      <summary>
        Gets the chart.
      </summary>
      <signature>
        <code>public Chart Chart { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartObjectsEventArgs.Area">
      <summary>
        Gets the chart area.
      </summary>
      <signature>
        <code>public ChartArea Area { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartObjectsEventArgs.ChartObjects">
      <summary>
        Gets chart objects.
      </summary>
      <signature>
        <code>public IReadonlyList&lt;ChartObject&gt; ChartObjects { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartObjectsRemovedEventArgs">
      <summary>
        Provides data for the removing chart objects event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the Chart ChartObjectsRemovedEventArgs
          // ChartObjectsRemovedEventArgs is derived from ChartObjectsEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartObjectsRemovedEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.ObjectsRemoved += Chart_ObjectsRemoved;
          }

          private void Chart_ObjectsRemoved(ChartObjectsRemovedEventArgs obj)
          {
          Print("{0} objects removed from chart", obj.ChartObjects.Count);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartObjectsRemovedEventArgs : ChartObjectsEventArgs</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartObjectsSelectionChangedEventArgs">
      <summary>
        Provides data for the chart objects selecting or deselecting event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the Chart ChartObjectsSelectionChangedEventArgs
          // Draw an object, select it and unselect it
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartObjectsSelectionChangedEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.ObjectsSelectionChanged += Chart_ObjectsSelectionChanged;
          }

          private void Chart_ObjectsSelectionChanged(ChartObjectsSelectionChangedEventArgs obj)
          {
          Print("Added objects #: {0} | Removed Objects #: {1}", obj.ObjectsAddedToSelection.Count, obj.ObjectsRemovedFromSelection.Count);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <remarks>
      </remarks>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartObjectsSelectionChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartObjectsSelectionChangedEventArgs.Chart">
      <summary>
        A chart where event occured
      </summary>
      <signature>
        <code>public Chart Chart { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartObjectsSelectionChangedEventArgs.Area">
      <summary>
        A chart area where event occured
      </summary>
      <signature>
        <code>public ChartArea Area { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartObjectsSelectionChangedEventArgs.ObjectsAddedToSelection">
      <summary>
        A list of objects that were added to selection
      </summary>
      <signature>
        <code>public IReadonlyList&lt;ChartObject&gt; ObjectsAddedToSelection { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartObjectsSelectionChangedEventArgs.ObjectsRemovedFromSelection">
      <summary>
        A list of objects that were removed from selection
      </summary>
      <signature>
        <code>public IReadonlyList&lt;ChartObject&gt; ObjectsRemovedFromSelection { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartObjectsUpdatedEventArgs">
      <summary>
        Provides data for the chart objects update event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the Chart ChartObjectsUpdatedEventArgs
          // Draw an object, and then modify it
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartObjectsUpdatedEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.ObjectsUpdated += Chart_ObjectsUpdated;
          }

          private void Chart_ObjectsUpdated(ChartObjectsUpdatedEventArgs obj)
          {
          Print("Updated objects #: {0}", obj.ChartObjects.Count);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartObjectsUpdatedEventArgs : ChartObjectsEventArgs</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartRobotAddedEventArgs">
      <summary>
        The class representing <c>AddedEventArgs</c> for a <c>ChartRobot</c>.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartRobotAddedEventArgs : ChartRobotEventArgs</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartRobotEventArgs">
      <summary>
        The base class representing event args for a <c>ChartRobot</c>.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public abstract class ChartRobotEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartRobotEventArgs.Robot">
      <summary>
        Gets the <c>ChartRobot</c> that raised an event.
      </summary>
      <signature>
        <code>public ChartRobot Robot { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartRobotModifiedEventArgs">
      <summary>
        The class representing <c>ModifiedEventArgs</c> for a <c>ChartRobot</c>.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartRobotModifiedEventArgs : ChartRobotEventArgs</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartRobotRemovedEventArgs">
      <summary>
        The class representing <c>RemovedEventArgs</c> for a <c>ChartRobot</c>.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartRobotRemovedEventArgs : ChartRobotEventArgs</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartRobotStartedEventArgs">
      <summary>
        The class representing <c>StartedEventArgs</c> for a <c>ChartRobot</c>.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartRobotStartedEventArgs : ChartRobotEventArgs</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartRobotStoppedEventArgs">
      <summary>
        The class representing <c>StoppedEventArgs</c> for a <c>ChartRobot</c>.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartRobotStoppedEventArgs : ChartRobotEventArgs</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartScrollEventArgs">
      <summary>
        Provides data for the chart scrolling event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the Chart ChartScrollEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartScrollEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.ScrollChanged += Chart_ScrollChanged;
          }

          private void Chart_ScrollChanged(ChartScrollEventArgs obj)
          {
          Print("Scrolled, Bars Delta : {0} | Top Y Delta: {1} | Bottom Y Delta: {2}", obj.BarsDelta, obj.TopYDelta, obj.BottomYDelta);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Chart" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartScrollEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartScrollEventArgs.Chart">
      <summary>
        Gets the chart.
      </summary>
      <signature>
        <code>public Chart Chart { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartScrollEventArgs.ChartArea">
      <summary>
        Gets the chart area.
      </summary>
      <signature>
        <code>public ChartArea ChartArea { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartScrollEventArgs.BarsDelta">
      <summary>
        Gets a value that indicates the amount of bars that the chart was scrolled for
      </summary>
      <signature>
        <code>public int BarsDelta { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartScrollEventArgs.BottomYDelta">
      <summary>
        Gets the lowest value of the bars delta.
      </summary>
      <value>The bottom y delta.</value>
      <signature>
        <code>public double BottomYDelta { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartScrollEventArgs.TopYDelta">
      <summary>
        Gets the highest value of the bars delta.
      </summary>
      <value>The top y delta.</value>
      <signature>
        <code>public double TopYDelta { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartSizeEventArgs">
      <summary>
        Provides data for the chart size change event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the Chart ChartSizeEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartSizeEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.SizeChanged += Chart_SizeChanged;
          }

          private void Chart_SizeChanged(ChartSizeEventArgs obj)
          {
          Chart.DrawStaticText("size", "Size Changed", VerticalAlignment.Top, HorizontalAlignment.Right, Color.Red);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <remarks>
      </remarks>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartSizeEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartSizeEventArgs.Chart">
      <summary>
        Gets the chart.
      </summary>
      <signature>
        <code>public Chart Chart { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartSizeEventArgs.Area">
      <summary>
        Gets the chart area.
      </summary>
      <signature>
        <code>public ChartArea Area { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartTypeEventArgs">
      <summary>
        Provides data for the chart type chage event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the Chart ChartTypeEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartTypeEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.ChartTypeChanged += Chart_ChartTypeChanged;
          }

          private void Chart_ChartTypeChanged(ChartTypeEventArgs obj)
          {
          var text = string.Format("Chart Type Changed To: {0}", obj.Chart.ChartType);

          Chart.DrawStaticText("type", text, VerticalAlignment.Top, HorizontalAlignment.Right, Color.Red);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Chart" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartTypeEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartTypeEventArgs.Chart">
      <summary>
        Gets the chart.
      </summary>
      <signature>
        <code>public Chart Chart { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartVisibilityChangedEventArgs">
      <summary>Provides data for chart visibility changed event</summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartVisibilityChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartVisibilityChangedEventArgs.Chart">
      <summary>
        The chart that event belonges to.
      </summary>
      <signature>
        <code>public Chart Chart { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartZoomEventArgs">
      <summary>
        Provides data for the chart type change event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the Chart ChartZoomEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChartZoomEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.ZoomChanged += Chart_ZoomChanged;
          }

          private void Chart_ZoomChanged(ChartZoomEventArgs obj)
          {
          var text = string.Format("Chart Zoom Level Changed To: {0}", obj.Chart.ZoomLevel);

          Chart.DrawStaticText("zoom", text, VerticalAlignment.Top, HorizontalAlignment.Right, Color.Red);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Chart" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ChartZoomEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartZoomEventArgs.Chart">
      <summary>
        Gets the chart.
      </summary>
      <signature>
        <code>public Chart Chart { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.CheckBoxEventArgs">
      <summary>
        Provides data for the checkbox event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the CheckBoxEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class CheckBoxEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          var checkBox = new CheckBox
          {
          Text = "Check Box",
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          };

          checkBox.Click += CheckBox_Click;

          Chart.AddControl(checkBox);
          }

          private void CheckBox_Click(CheckBoxEventArgs obj)
          {
          var state = obj.CheckBox.IsChecked.Value ? "Checked" : "Unchecked";

          obj.CheckBox.Text = state;
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.CheckBox" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class CheckBoxEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.CheckBoxEventArgs.CheckBox">
      <summary>
        Gets the checkbox data.
      </summary>
      <signature>
        <code>public CheckBox CheckBox { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ColorThemeChangeEventArgs">
      <summary>
        Provides data for the color theme change event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the Chart ColorThemeChangeEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ColorThemeChangeEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Application.ColorThemeChanged += Application_ColorThemeChanged;
          }

          private void Application_ColorThemeChanged(ColorThemeChangeEventArgs obj)
          {
          var text = string.Format("Theme Changed To: {0}", obj.ColorTheme);

          Chart.DrawStaticText("text", text, VerticalAlignment.Top, HorizontalAlignment.Right, Color.Red);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.ColorTheme" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ColorThemeChangeEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ColorThemeChangeEventArgs.ColorTheme">
      <summary>
        Gets the color theme.
      </summary>
      <signature>
        <code>public ColorTheme ColorTheme { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ComboBoxSelectedItemChangedEventArgs">
      <summary>
        Provides data for ComboBox SelectedItemChanged event handlers
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ComboBoxSelectedItemChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ComboBoxSelectedItemChangedEventArgs.ComboBox">
      <summary>
        The ComboBox that it's selected item changed
      </summary>
      <signature>
        <code>public ComboBox ComboBox { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ComboBoxSelectedItemChangedEventArgs.SelectedItem">
      <summary>
        The new selected item of ComboBox
      </summary>
      <signature>
        <code>public string SelectedItem { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.DrawingColorChangedEventArgs">
      <summary>
        Provides data for the drawing color changed event.
      </summary>
      <seealso cref="P:cAlgo.API.Application.DrawingColor" />
      <seealso cref="E:cAlgo.API.Application.DrawingColorChanged" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class DrawingColorChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DrawingColorChangedEventArgs.DrawingColor">
      <summary>
        Gets the drawing color.
      </summary>
      <signature>
        <code>public Color DrawingColor { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.FrameAttachedEventArgs">
      <summary>
        Provides data for the frame attached event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class FrameAttachedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.FrameAttachedEventArgs.Frame">
      <summary>
        Returns the frame.
      </summary>
      <signature>
        <code>public Frame Frame { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.FrameContainerChangedEventArgs">
      <summary>
        Provides data for the frame container changed event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class FrameContainerChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.FrameContainerChangedEventArgs.Frame">
      <summary>
        Returns the frame.
      </summary>
      <signature>
        <code>public Frame Frame { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.FrameDetachedEventArgs">
      <summary>
        Provides data for the frame detached event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class FrameDetachedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.FrameDetachedEventArgs.Frame">
      <summary>
        Returns the frame.
      </summary>
      <signature>
        <code>public Frame Frame { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.FramesAddedEventArgs">
      <summary>
        Provides data for the frames added event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class FramesAddedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.FramesAddedEventArgs.AddedFrames">
      <summary>
        Returns the added frames.
      </summary>
      <signature>
        <code>public Frame[] AddedFrames { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.FrameSizeChangedEventArgs">
      <summary>
        Provides data for the frame size changed event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class FrameSizeChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.FrameSizeChangedEventArgs.Frame">
      <summary>
        Returns the frame.
      </summary>
      <signature>
        <code>public Frame Frame { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.FramesRemovedEventArgs">
      <summary>
        Provides data for the frames removed event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class FramesRemovedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.FramesRemovedEventArgs.RemovedFrames">
      <summary>
        Returns the removed frames.
      </summary>
      <signature>
        <code>public Frame[] RemovedFrames { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.IndicatorAreaAddedEventArgs">
      <summary>
        Provides data for the indicator area adding event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the IndicatorAreaAddedEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class IndicatorAreaAddedEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          ShowIndicatorAreasCount();

          Chart.IndicatorAreaAdded += Chart_IndicatorAreaAdded;
          }

          private void Chart_IndicatorAreaAdded(IndicatorAreaAddedEventArgs obj)
          {
          Print("A new indicator area has been added");

          ShowIndicatorAreasCount();
          }

          private void ShowIndicatorAreasCount()
          {
          var text = string.Format("Indicator Areas #: {0}", Chart.IndicatorAreas.Count);

          Chart.DrawStaticText("text", text, VerticalAlignment.Top, HorizontalAlignment.Right, Color.Red);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Chart" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class IndicatorAreaAddedEventArgs : IndicatorAreaEventArgs</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.IndicatorAreaEventArgs">
      <summary>
        The arguments for the indicator area event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the IndicatorAreaEventArgs
          // IndicatorAreaEventArgs is the base class of IndicatorAreaAddedEventArgs and IndicatorAreaRemovedEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class IndicatorAreaEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.IndicatorAreaAdded += Chart_IndicatorAreaAdded;
          Chart.IndicatorAreaRemoved += Chart_IndicatorAreaRemoved;
          }

          private void Chart_IndicatorAreaRemoved(IndicatorAreaRemovedEventArgs obj)
          {
          var indicatorAreaEventArgs = obj as IndicatorAreaEventArgs;
          }

          private void Chart_IndicatorAreaAdded(IndicatorAreaAddedEventArgs obj)
          {
          var indicatorAreaEventArgs = obj as IndicatorAreaEventArgs;
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Chart" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public abstract class IndicatorAreaEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorAreaEventArgs.Chart">
      <summary>
        Gets the chart.
      </summary>
      <signature>
        <code>public Chart Chart { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorAreaEventArgs.Area">
      <summary>
        Gets the area.
      </summary>
      <signature>
        <code>public IndicatorArea Area { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.IndicatorAreaRemovedEventArgs">
      <summary>
        Provides data for the indicator area removing event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the IndicatorAreaRemovedEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class IndicatorAreaRemovedEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          ShowIndicatorAreasCount();

          Chart.IndicatorAreaRemoved += Chart_IndicatorAreaRemoved;
          }

          private void Chart_IndicatorAreaRemoved(IndicatorAreaRemovedEventArgs obj)
          {
          Print("An indicator area has been removed");

          ShowIndicatorAreasCount();
          }

          private void ShowIndicatorAreasCount()
          {
          var text = string.Format("Indicator Areas #: {0}", Chart.IndicatorAreas.Count);

          Chart.DrawStaticText("text", text, VerticalAlignment.Top, HorizontalAlignment.Right, Color.Red);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Chart" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class IndicatorAreaRemovedEventArgs : IndicatorAreaEventArgs</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.MarketSessionChangedEventArgs">
      <summary>
        The arguments for MarketSessionsChanged event.
      </summary>
      <seealso cref="T:cAlgo.API.MarketSession" />
      <seealso cref="P:cAlgo.API.Internals.Algo.MarketSessions" />
      <seealso cref="E:cAlgo.API.Internals.Algo.MarketSessionsChanged" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class MarketSessionChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.MarketSessionChangedEventArgs.NewSessions">
      <summary>
        All current sessions including any new sessions that have just begun.
        The value of NewSessions is always equal to the value of the MarketSessions property of a cBot / indicator.
        Returns MarketSession.None if no new sessions started when the MarketSessionsChanged event was triggered.
      </summary>
      <signature>
        <code>public MarketSession NewSessions { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.MarketSessionChangedEventArgs.PreviousSessions">
      <summary>
        Returns the previous value of the MarketSessions property before the MarketSessionsChanged event was triggered.
        Returns MarketSession.None if no previous sessions ended when the event was triggered.
      </summary>
      <signature>
        <code>public MarketSession PreviousSessions { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.PendingOrderCancelledEventArgs">
      <summary>
        Provides data for the pending order cancellation event.
      </summary>
      <example>
        <code>
          protected override void OnStart()
          {
          PendingOrders.Cancelled += PendingOrdersOnCancelled;
          var result = PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize);
          CancelPendingOrder(result.PendingOrder);
          }
          private void PendingOrdersOnCancelled(PendingOrderCancelledEventArgs args)
          {
          Print("Pending order with id {0} was cancelled. Reason: {1}", args.PendingOrder.Id, args.Reason);
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.PendingOrder" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class PendingOrderCancelledEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrderCancelledEventArgs.PendingOrder">
      <summary>
        Gets the pending order that was cancelled.
      </summary>
      <signature>
        <code>public PendingOrder PendingOrder { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrderCancelledEventArgs.Reason">
      <summary>
        Gets the reason for the pending order cancellation.
      </summary>
      <signature>
        <code>public PendingOrderCancellationReason Reason { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.PendingOrderCreatedEventArgs">
      <summary>
        Provides data for the pending order creation events.
      </summary>
      <seealso cref="T:cAlgo.API.PendingOrder" />
      <example>
        <code>
          protected override void OnStart()
          {
          PendingOrders.Created += PendingOrdersOnCreated;
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize)
          }
          private void PendingOrdersOnCreated(PendingOrderCreatedEventArgs args)
          {
          Print("Pending order with id {0} was created", args.PendingOrder.Id);
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class PendingOrderCreatedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrderCreatedEventArgs.PendingOrder">
      <summary>
        Gets the pending order that was created.
      </summary>
      <signature>
        <code>public PendingOrder PendingOrder { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.PendingOrderFilledEventArgs">
      <summary>
        Provides data for the pending order fill event.
      </summary>
      <seealso cref="T:cAlgo.API.PendingOrder" />
      <example>
        <code>
          protected override void OnStart()
          {
          PendingOrders.Filled += PendingOrdersOnFilled;
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
          }
          private void PendingOrdersOnFilled(PendingOrderFilledEventArgs args)
          {
          Print("Pending order with id {0} was filled, position id  is {1}", args.PendingOrder.Id, args.Position.Id);
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class PendingOrderFilledEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrderFilledEventArgs.PendingOrder">
      <summary>
        Gets the pending order that was filled.
      </summary>
      <signature>
        <code>public PendingOrder PendingOrder { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrderFilledEventArgs.Position">
      <summary>
        Gets the position that was filled from the pending order.
      </summary>
      <signature>
        <code>public Position Position { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.PendingOrderModifiedEventArgs">
      <summary>
        Provides data for the pending order modification event.
      </summary>
      <seealso cref="T:cAlgo.API.PendingOrder" />
      <example>
        <code>
          protected override void OnStart()
          {
          PendingOrders.Modified += PendingOrdersOnModified;
          var result = PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize);
          ModifyPendingOrder(result.PendingOrder, Symbol.Ask + 20 * Symbol.PipSize ,null, null, null);
          }
          private void PendingOrdersOnModified(PendingOrderModifiedEventArgs args)
          {
          Print("Pending order with id {0} was modifed", args.PendingOrder.Id);
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class PendingOrderModifiedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrderModifiedEventArgs.PendingOrder">
      <summary>
        Gets the pending order that was modified.
      </summary>
      <signature>
        <code>public PendingOrder PendingOrder { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.PositionClosedEventArgs">
      <summary>
        Provides data for the position closing event.
      </summary>
      <seealso cref="T:cAlgo.API.Position" />
      <example>
        <code>
          protected override void OnStart()
          {
          Positions.Closed += PositionsClosed;
          }
          private void PositionsOnClosed(PositionClosedEventArgs args)
          {
          var position = args.Position;
          Print("Position closed with {0} profit", position.GrossProfit);
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class PositionClosedEventArgs</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.PositionClosedEventArgs.#ctor(cAlgo.API.Position,cAlgo.API.PositionCloseReason)">
      <summary>
        Provides data for the closing positions event.
      </summary>
      <param name="position">
      </param>
      <param name="reason">
      </param>
      <signature>
        <code>public PositionClosedEventArgs(Position position, PositionCloseReason reason)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PositionClosedEventArgs.Position">
      <summary>
        Gets the position being closed.
      </summary>
      <example>
        <code>
          protected override void OnStart()
          {
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel");
          Positions.Closed += PositionsClosed;
          }
          private void PositionsClosed(PositionClosedEventArgs args)
          {
          var position = args.Position;
          if(position.Label == "myLabel")
          {
          var tradeType = position.TradeType;
          var symbol = MarketData.GetSymbol(position.SymbolCode);
          var volume = position.Volume;
          var label = position.Label;

          if(position.GrossProfit &gt; 0)
          ExecuteMarketOrder(tradeType, symbol, volume, label);
          else
          {
          var oppositeTrade = tradeType == TradeType.Buy
          ? TradeType.Sell
          : TradeType.Buy;
          ExecuteMarketOrder(oppositeTrade, symbol, volume, label);
          }
          }
          }
        </code>
      </example>
      <signature>
        <code>public Position Position { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PositionClosedEventArgs.Reason">
      <summary>
        Gets the reason of the position being closed.
      </summary>
      <signature>
        <code>public PositionCloseReason Reason { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.PositionModifiedEventArgs">
      <summary>
        Provides data for the position modification event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo.Robots
          {
          // This sample shows how to use PositionModifiedEventArgs
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PositionModifiedEventArgsSample : Robot
          {
          protected override void OnStart()
          {
          Positions.Modified += Positions_Modified;
          }

          private void Positions_Modified(PositionModifiedEventArgs obj)
          {
          Print("Position {0} modified", obj.Position.Id);
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Position" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class PositionModifiedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PositionModifiedEventArgs.Position">
      <summary>
        Gets or sets the modified position.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public Position Position { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.PositionOpenedEventArgs">
      <summary>
        Provides data for the position opening event.
      </summary>
      <seealso cref="T:cAlgo.API.Position" />
      <example>
        <code>
          public class SampleRobot : Robot
          {
          protected override void OnStart()
          {
          Positions.Opened += Positions_Opened;
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel");
          }
          private void Positions_Opened(PositionOpenedEventArgs args)
          {
          var position = args.Position;
          if(position.Label == "myLabel")
          Print("Position opened by SampleRobot");
          }
          //...
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class PositionOpenedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PositionOpenedEventArgs.Position">
      <summary>
        Gets or sets the position being opened.
      </summary>
      <example>
        <code>
          private void PositionsOnOpened(PositionOpenedEventArgs args)
          {
          var position = args.Position;
          Print("Position opened at {0}", position.EntryPrice);
          }
        </code>
      </example>
      <signature>
        <code>public Position Position { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.RadioButtonEventArgs">
      <summary>
        Represents the radio button actions.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the RadioButtonEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class RadioButtonEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          var firstRadioButton = new RadioButton
          {
          Text = "First Radio Button"
          };

          firstRadioButton.Checked += RadioButton_Changed;
          firstRadioButton.Unchecked += RadioButton_Changed;

          var secondRadioButton = new RadioButton
          {
          Text = "Second Radio Button"
          };

          secondRadioButton.Checked += RadioButton_Changed;
          secondRadioButton.Unchecked += RadioButton_Changed;

          var panel = new StackPanel
          {
          Orientation = Orientation.Vertical,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          };

          panel.AddChild(firstRadioButton);
          panel.AddChild(secondRadioButton);

          Chart.AddControl(panel);
          }

          private void RadioButton_Changed(RadioButtonEventArgs obj)
          {
          var state = obj.RadioButton.IsChecked ? "Checked" : "Unchecked";

          obj.RadioButton.Text = state;
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.RadioButton" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class RadioButtonEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.RadioButtonEventArgs.RadioButton">
      <summary>
        Gets the radiobutton data.
      </summary>
      <signature>
        <code>public RadioButton RadioButton { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.SymbolTickEventArgs">
      <summary>
        Provides data for the symbol tick event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the SymbolTickEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class SymbolTickEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Symbol.Tick += Symbol_Tick;
          }

          private void Symbol_Tick(SymbolTickEventArgs obj)
          {
          Print("Symbol: {0} | Ask: {1} | Bid: {2}", obj.SymbolName, obj.Ask, obj.Bid);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Internals.Symbol" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class SymbolTickEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.SymbolTickEventArgs.SymbolName">
      <summary>
        Gets the symbol name.
      </summary>
      <signature>
        <code>public string SymbolName { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.SymbolTickEventArgs.Bid">
      <summary>
        Gets the bid price.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public double Bid { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.SymbolTickEventArgs.Ask">
      <summary>
        Gets the ask price.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public double Ask { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.SymbolTickEventArgs.Symbol">
      <summary>
        Gets the symbol.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public Symbol Symbol { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TextChangedEventArgs">
      <summary>
        Provides data for the TextChanged event.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to use TextChangedEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TextChangedEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          var stackPanel = new StackPanel
          {
          BackgroundColor = Color.Gold,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          Opacity = 0.6,
          };

          var textBox = new TextBox
          {
          Text = "Enter text here...",
          FontWeight = FontWeight.ExtraBold,
          Margin = 5,
          ForegroundColor = Color.White,
          HorizontalAlignment = HorizontalAlignment.Center,
          Width = 150
          };

          textBox.TextChanged += TextBox_TextChanged;

          stackPanel.AddChild(textBox);

          Chart.AddControl(stackPanel);
          }

          private void TextBox_TextChanged(TextChangedEventArgs obj)
          {
          Print("Text box text changed to: ", obj.TextBox.Text);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.TextBox" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class TextChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TextChangedEventArgs.TextBox">
      <summary>
        Gets the texbox.
      </summary>
      <signature>
        <code>public TextBox TextBox { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TicksHistoryLoadedEventArgs">
      <summary>
        Provides data for the tick history loaded event.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Internals;

          namespace cAlgo
          {
          // This sample indicator shows how to use TicksHistoryLoadedEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TicksHistoryLoadedEventArgsSample : Indicator
          {
          private Ticks _ticks;

          [Parameter("Symbol Name", DefaultValue = "EURUSD")]
          public string InputSymbolName { get; set; }

          protected override void Initialize()
          {
          // Getting a symbol ticks data
          _ticks = MarketData.GetTicks(InputSymbolName);

          _ticks.HistoryLoaded += Ticks_HistoryLoaded;
          // You can also pass a callback method instead of subscribing to HistoryLoaded event
          //_ticks.LoadMoreHistoryAsync(Ticks_HistoryLoaded);
          _ticks.LoadMoreHistoryAsync();

          _ticks.Reloaded += Ticks_Reloaded;
          }

          private void Ticks_Reloaded(TicksHistoryLoadedEventArgs obj)
          {
          Print("Ticks got reloaded");
          }

          private void Ticks_HistoryLoaded(TicksHistoryLoadedEventArgs obj)
          {
          Print("New ticks loaded: #", obj.Count);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Ticks" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class TicksHistoryLoadedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TicksHistoryLoadedEventArgs.Ticks">
      <summary>
        Gets the tick data.
      </summary>
      <signature>
        <code>public Ticks Ticks { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TicksHistoryLoadedEventArgs.Count">
      <summary>
        Gets the number of the ticks.
      </summary>
      <signature>
        <code>public int Count { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TicksTickEventArgs">
      <summary>
        Provides data for the tick event.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Internals;

          namespace cAlgo
          {
          // This sample indicator shows how to use TicksTickEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TicksTickEventArgsSample : Indicator
          {
          private Ticks _ticks;

          [Parameter("Symbol Name", DefaultValue = "EURUSD")]
          public string InputSymbolName { get; set; }

          protected override void Initialize()
          {
          // Getting a symbol ticks data
          _ticks = MarketData.GetTicks(InputSymbolName);
          // Subscribing to upcoming ticks
          _ticks.Tick += Ticks_Tick;
          }

          private void Ticks_Tick(TicksTickEventArgs obj)
          {
          // Printing Last tick inside Ticks collection
          Print(obj.Ticks.LastTick);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Ticks" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class TicksTickEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TicksTickEventArgs.Ticks">
      <summary>
        Gets the Ticks data.
      </summary>
      <signature>
        <code>public Ticks Ticks { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ToggleButtonEventArgs">
      <summary>
        Represents the toggle button event class.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using System;
          using System.Linq;

          namespace cAlgo
          {
          // This sample indicator shows how to use ToggleButtonEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ToggleButtonEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          var stackPanel = new StackPanel
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          BackgroundColor = Color.Gold,
          Opacity = 0.7
          };

          for (int i = 0; i &lt; 5; i++)
          {
          var toggleButton = new ToggleButton
          {
          Text = "Toggle Button #" + i + " Unchecked",
          Margin = 10
          };

          toggleButton.Checked += ToggleButton_Checked;
          toggleButton.Unchecked += ToggleButton_Unchecked;

          stackPanel.AddChild(toggleButton);
          }

          Chart.AddControl(stackPanel);
          }

          private void ToggleButton_Checked(ToggleButtonEventArgs obj)
          {
          var textSplit = obj.ToggleButton.Text.Split(' ').TakeWhile(text =&gt; !text.Equals("Unchecked", StringComparison.OrdinalIgnoreCase)).ToArray();

          obj.ToggleButton.Text = string.Join(" ", textSplit) + " Checked";
          }

          private void ToggleButton_Unchecked(ToggleButtonEventArgs obj)
          {
          var textSplit = obj.ToggleButton.Text.Split(' ').TakeWhile(text =&gt; !text.Equals("Checked", StringComparison.OrdinalIgnoreCase)).ToArray();

          obj.ToggleButton.Text = string.Join(" ", textSplit) + " Unchecked";
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.ToggleButton" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class ToggleButtonEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ToggleButtonEventArgs.ToggleButton">
      <summary>
        Gets the toggle button data.
      </summary>
      <signature>
        <code>public ToggleButton ToggleButton { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TradeWatchIsVisibleChangedEventArgs">
      <summary>
        Provides data for plugin trade watch IsVisibleChanged event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class TradeWatchIsVisibleChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeWatchIsVisibleChangedEventArgs.TradeWatch">
      <summary>
        Trade watch.
      </summary>
      <signature>
        <code>public TradeWatch TradeWatch { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TradeWatchSizeChangedEventArgs">
      <summary>
        Provides data for plugin trade watch SizeChanged event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class TradeWatchSizeChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeWatchSizeChangedEventArgs.TradeWatch">
      <summary>
        Trade watch.
      </summary>
      <signature>
        <code>public TradeWatch TradeWatch { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TradeWatchTabAttachedEventArgs">
      <summary>
        Provides data for plugin trade watch tab attached event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class TradeWatchTabAttachedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeWatchTabAttachedEventArgs.TradeWatchTab">
      <summary>
        Attached tab.
      </summary>
      <signature>
        <code>public TradeWatchTab TradeWatchTab { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TradeWatchTabDetachedEventArgs">
      <summary>
        Provides data for plugin trade watch tab detached event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class TradeWatchTabDetachedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeWatchTabDetachedEventArgs.TradeWatchTab">
      <summary>
        Detached tab.
      </summary>
      <signature>
        <code>public TradeWatchTab TradeWatchTab { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TradeWatchTabIsSelectedChangedEventArgs">
      <summary>
        Provides data for plugin trade watch tab IsSelectedChanged event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class TradeWatchTabIsSelectedChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeWatchTabIsSelectedChangedEventArgs.TradeWatchTab">
      <summary>
        Trade watch tab.
      </summary>
      <signature>
        <code>public TradeWatchTab TradeWatchTab { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TradeWatchTabSizeChangedEventArgs">
      <summary>
        Provides data for plugin trade watch tab SizeChanged event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class TradeWatchTabSizeChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeWatchTabSizeChangedEventArgs.TradeWatchTab">
      <summary>
        Trade watch tab.
      </summary>
      <signature>
        <code>public TradeWatchTab TradeWatchTab { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.UserTimeOffsetChangedEventArgs">
      <summary>
        Represents the user time offset change event data.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the UserTimeOffsetChangedEventArgs
          // Change your cTrader platform time offset/zone to see the print message
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class UserTimeOffsetChangedEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Application.UserTimeOffsetChanged += Application_UserTimeOffsetChanged;
          }

          private void Application_UserTimeOffsetChanged(UserTimeOffsetChangedEventArgs obj)
          {
          Print("User time offset changed to: {0}", obj.UserTimeOffset);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Application" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Application" />
      <signature>
        <code>public class UserTimeOffsetChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.UserTimeOffsetChangedEventArgs.UserTimeOffset">
      <summary>
        Gets the user time offset.
      </summary>
      <signature>
        <code>public TimeSpan UserTimeOffset { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WatchlistAddedEventArgs">
      <summary>
        Occures when a new watchlist is added.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use WatchlistAddedEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class WatchlistAddedEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Watchlists.Added += Watchlists_Added;
          }

          private void Watchlists_Added(WatchlistAddedEventArgs obj)
          {
          Print("Watchlist {0} hase been added", obj.Watchlist.Name);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Watchlist" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class WatchlistAddedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WatchlistAddedEventArgs.Watchlist">
      <summary>
        Gets the watchlist.
      </summary>
      <signature>
        <code>public Watchlist Watchlist { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WatchlistRemovedEventArgs">
      <summary>
        Occurs when a watchlist is removed from the marketwatch.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use WatchlistRemovedEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class WatchlistRemovedEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Watchlists.Removed += Watchlists_Removed;
          }

          private void Watchlists_Removed(WatchlistRemovedEventArgs obj)
          {
          Print("Watchlist {0} removed", obj.Watchlist.Name);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Watchlist" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class WatchlistRemovedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WatchlistRemovedEventArgs.Watchlist">
      <summary>
        Gets the watchlist.
      </summary>
      <signature>
        <code>public Watchlist Watchlist { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WatchlistRenamedEventArgs">
      <summary>
        Occurs when the watchlist is renamed.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use WatchlistRenamedEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class WatchlistRenamedEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Watchlists.WatchlistRenamed += Watchlists_WatchlistRenamed;
          }

          private void Watchlists_WatchlistRenamed(WatchlistRenamedEventArgs obj)
          {
          Print("Watchlist renamed to {0}", obj.Watchlist.Name);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Watchlist" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class WatchlistRenamedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WatchlistRenamedEventArgs.Watchlist">
      <summary>
        Gets the watchlist.
      </summary>
      <signature>
        <code>public Watchlist Watchlist { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WatchlistSymbolAddedEventArgs">
      <summary>
        Occurs when a new symbol is added to the watchlist.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use WatchlistSymbolAddedEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class WatchlistSymbolAddedEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Watchlists.WatchlistSymbolAdded += Watchlists_WatchlistSymbolAdded;
          }

          private void Watchlists_WatchlistSymbolAdded(WatchlistSymbolAddedEventArgs obj)
          {
          Print("Symbol {0} Added to Watchlist {1}", obj.SymbolName, obj.Watchlist.Name);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Watchlist" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class WatchlistSymbolAddedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WatchlistSymbolAddedEventArgs.Watchlist">
      <summary>
        Gets the watchlist.
      </summary>
      <signature>
        <code>public Watchlist Watchlist { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WatchlistSymbolAddedEventArgs.SymbolName">
      <summary>
        Gets the symbol name.
      </summary>
      <signature>
        <code>public string SymbolName { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WatchlistSymbolRemovedEventArgs">
      <summary>
        Occurs when the symbol is removed from the watchlist.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use WatchlistSymbolRemovedEventArgs
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class WatchlistSymbolRemovedEventArgsSample : Indicator
          {
          protected override void Initialize()
          {
          Watchlists.WatchlistSymbolRemoved += Watchlists_WatchlistSymbolRemoved;
          }

          private void Watchlists_WatchlistSymbolRemoved(WatchlistSymbolRemovedEventArgs obj)
          {
          Print("Symbol {0} removed from watchlist {1}", obj.SymbolName, obj.Watchlist.Name);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Watchlist" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class WatchlistSymbolRemovedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WatchlistSymbolRemovedEventArgs.Watchlist">
      <summary>
        Gets the watchlist.
      </summary>
      <signature>
        <code>public Watchlist Watchlist { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WatchlistSymbolRemovedEventArgs.SymbolName">
      <summary>
        Gets the symbol name.
      </summary>
      <signature>
        <code>public string SymbolName { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WebSocketClientBinaryReceivedEventArgs">
      <summary>
        Provides data for WebSocketClient binary data received event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.WebSocket" />
      <signature>
        <code>public class WebSocketClientBinaryReceivedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebSocketClientBinaryReceivedEventArgs.Client">
      <summary>
        Websocket client instance.
      </summary>
      <signature>
        <code>public WebSocketClient Client { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebSocketClientBinaryReceivedEventArgs.Data">
      <summary>
        Received data.
      </summary>
      <signature>
        <code>public byte[] Data { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WebSocketClientConnectedEventArgs">
      <summary>
        Provides data for Websocket client connected event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.WebSocket" />
      <signature>
        <code>public class WebSocketClientConnectedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebSocketClientConnectedEventArgs.Client">
      <summary>
        Connected websocket client instance.
      </summary>
      <signature>
        <code>public WebSocketClient Client { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WebSocketClientDisconnectEventArgs">
      <summary>
        Provides data for Websocket client disconnected event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.WebSocket" />
      <signature>
        <code>public class WebSocketClientDisconnectEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebSocketClientDisconnectEventArgs.Client">
      <summary>
        Disconnected websocket client instance.
      </summary>
      <signature>
        <code>public WebSocketClient Client { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WebSocketClientTextReceivedEventArgs">
      <summary>
        Provides data for WebSocketClient text data received event.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.WebSocket" />
      <signature>
        <code>public class WebSocketClientTextReceivedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebSocketClientTextReceivedEventArgs.Client">
      <summary>
        Websocket client instance.
      </summary>
      <signature>
        <code>public WebSocketClient Client { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebSocketClientTextReceivedEventArgs.Text">
      <summary>
        Received text.
      </summary>
      <signature>
        <code>public string Text { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WebViewLoadedEventArgs">
      <summary>
        Provides data for the WebView control Loaded event.
      </summary>
      <seealso cref="T:cAlgo.API.WebView" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class WebViewLoadedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebViewLoadedEventArgs.WebView">
      <summary>
        The WebView control.
      </summary>
      <signature>
        <code>public WebView WebView { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WebViewNavigationCompletedEventArgs">
      <summary>
        Provides data for the WebView control NavigationCompleted event.
      </summary>
      <seealso cref="T:cAlgo.API.WebView" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class WebViewNavigationCompletedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebViewNavigationCompletedEventArgs.WebView">
      <summary>
        The WebView control.
      </summary>
      <signature>
        <code>public WebView WebView { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebViewNavigationCompletedEventArgs.HttpStatusCode">
      <summary>
        Response HTTP status code.
      </summary>
      <signature>
        <code>public int HttpStatusCode { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebViewNavigationCompletedEventArgs.IsSuccessful">
      <summary>
        True if navigation was successful otherwise false.
      </summary>
      <signature>
        <code>public bool IsSuccessful { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebViewNavigationCompletedEventArgs.Url">
      <summary>
        URL from WebView Source property at the moment of NavigationCompleted in big process.
      </summary>
      <signature>
        <code>public string Url { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WebViewUnloadedEventArgs">
      <summary>
        Provides data for the WebView control Unloaded event.
      </summary>
      <seealso cref="T:cAlgo.API.WebView" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class WebViewUnloadedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebViewUnloadedEventArgs.WebView">
      <summary>
        The WebView control.
      </summary>
      <signature>
        <code>public WebView WebView { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WebViewWebMessageReceivedEventArgs">
      <summary>
        Provides data for the WebView control WebMessageReceived event.
      </summary>
      <seealso cref="T:cAlgo.API.WebView" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class WebViewWebMessageReceivedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebViewWebMessageReceivedEventArgs.Message">
      <summary>
        The message that was received.
      </summary>
      <signature>
        <code>public string Message { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebViewWebMessageReceivedEventArgs.Source">
      <summary>
        Gets the URI of the document that sent this web message.
      </summary>
      <signature>
        <code>public string Source { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebViewWebMessageReceivedEventArgs.WebView">
      <summary>
        WebView Control.
      </summary>
      <signature>
        <code>public WebView WebView { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WindowActivatedEventArgs">
      <summary>
        Provides data for WindowActivated event handlers
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class WindowActivatedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WindowActivatedEventArgs.Window">
      <summary>
        The Window that got activated
      </summary>
      <signature>
        <code>public Window Window { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WindowClosedEventArgs">
      <summary>
        Provides data for WindowClosed event handlers
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class WindowClosedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WindowClosedEventArgs.Window">
      <summary>
        The window the got closed
      </summary>
      <signature>
        <code>public Window Window { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WindowDeactivatedEventArgs">
      <summary>
        Provides data for WindowDeactivated event handlers
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class WindowDeactivatedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WindowDeactivatedEventArgs.Window">
      <summary>
        The window that got deactivated
      </summary>
      <signature>
        <code>public Window Window { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WindowIsVisibleChangedEventArgs">
      <summary>
        Provides data for WindowIsVisibleChanged event handlers
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class WindowIsVisibleChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WindowIsVisibleChangedEventArgs.Window">
      <summary>
        The window which it's IsVisible property got changed
      </summary>
      <signature>
        <code>public Window Window { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WindowIsVisibleChangedEventArgs.OldValue">
      <summary>
        The value of window IsVisible property before got changed
      </summary>
      <signature>
        <code>public bool OldValue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WindowIsVisibleChangedEventArgs.NewValue">
      <summary>
        The value of window IsVisible property after got changed
      </summary>
      <signature>
        <code>public bool NewValue { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WindowLocationChangedEventArgs">
      <summary>
        Provides data for WindowLocationChanged event handlers
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class WindowLocationChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WindowLocationChangedEventArgs.Window">
      <summary>
        The window which it's location changed
      </summary>
      <signature>
        <code>public Window Window { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WindowSizeChangedEventArgs">
      <summary>
        Provides data for WindowSizeChanged event handlers
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs" />
      <signature>
        <code>public class WindowSizeChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WindowSizeChangedEventArgs.Window">
      <summary>
        The window which it's size changed
      </summary>
      <signature>
        <code>public Window Window { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.HttpException">
      <summary>
        Represents errors that may occur during HTTP request
      </summary>
      <seealso cref="T:cAlgo.API.HttpResponse" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Http" />
      <signature>
        <code>public sealed class HttpException : Exception</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.LocalStorageException">
      <summary>
        Represents errors that occur during local storage operations.
        This exception will be passed to cBot / indicator OnException method.
      </summary>
      <seealso cref="T:cAlgo.API.LocalStorage" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.LocalStorage" />
      <signature>
        <code>public sealed class LocalStorageException : Exception</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.MarketDataLoadException">
      <summary>
        Represents errors that occur during loading market data (Bars/Ticks)
      </summary>
      <seealso cref="T:cAlgo.API.Internals.MarketData" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketData" />
      <signature>
        <code>public sealed class MarketDataLoadException : Exception</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Functions">
      <summary>
        This class contains valuable functions that apply to DataSeries.
      </summary>
      <example>
        <code>

          //...

          SimpleMovingAverage sma;

          protected override void Initialize()
          {
          sma = Indicators.SimpleMovingAverage(source, period);
          }

          public override void Calculate(int index)
          {
          // IsRising returns true if the current value is greater
          // than the previous value in the data series
          if (Functions.IsRising(sma.Result))
          {
          //Do something
          }
          // IsFalling returns true if the current value is less
          // than the previous value in the data series
          else if(Functions.IsFalling(sma.Result))
          {
          // Do something else
          }
          else // sma is level
          {
          Do something else
          }

          //...

          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo
          {
          // This sample shows how to use the data series functions
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class DataSeriesFunctionsSample : Indicator
          {
          private SimpleMovingAverage _smaFast, _smaSlow;

          protected override void Initialize()
          {
          _smaFast = Indicators.SimpleMovingAverage(Bars.ClosePrices, 9);
          _smaSlow = Indicators.SimpleMovingAverage(Bars.ClosePrices, 20);
          }

          public override void Calculate(int index)
          {
          if (_smaFast.Result.HasCrossedAbove(_smaSlow.Result, 1))
          {
          // Fast MA crossed above slow MA
          }

          if (_smaFast.Result.HasCrossedBelow(_smaSlow.Result, 1))
          {
          // Fast MA crossed below slow MA
          }

          if (_smaFast.Result.Maximum(10) &gt; _smaSlow.Result.Maximum(10))
          {
          // Fast MA last 10 values maximum is larger than slow MA last 10 values
          }

          if (_smaFast.Result.Minimum(10) &lt; _smaSlow.Result.Minimum(10))
          {
          // Fast MA last 10 values minimum is smaller than slow MA last 10 values
          }

          if (_smaFast.Result.IsFalling() &amp;&amp; _smaSlow.Result.IsRising())
          {
          // Fast MA is falling and slow MA is raising
          // IsFalling and IsRising compares last two values of the data series
          }

          if (_smaFast.Result.Sum(10) &gt; _smaSlow.Result.Sum(10))
          {
          // Fast MA last 10 values sum is larger than slow MA last 109 values sum
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.CollectionsDataSeries" />
      <signature>
        <code>public static class Functions</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Functions.IsRising(cAlgo.API.DataSeries)">
      <summary>
        Checks if the last value in a dataseries is greater than the previous.
      </summary>
      <param name="series">Input dataseries</param>
      <returns>True if the last value of a dataseries is greater than the previous, false otherwise</returns>
      <example>
        <code>
          SimpleMovingAverage sma;
          //...
          public override void Calculate(int index)
          {
          if (Functions.IsRising(sma.Result))
          {
          //Do something
          }
          //May be invoked as an extension method
          if (sma.Result.IsRising())
          {
          //Do something
          }
          }
          //...
        </code>
      </example>
      <signature>
        <code>public static bool IsRising(DataSeries series)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Functions.IsFalling(cAlgo.API.DataSeries)">
      <summary>
        Checks if the last value in a dataseries is less than the previous
      </summary>
      <param name="series">Input dataseries</param>
      <returns>True if the last value in a dataseries is less than the previous, false otherwise</returns>
      <example>
        <code>
          SimpleMovingAverage sma;
          //...
          public override void Calculate(int index)
          {
          if (Functions.IsFalling(sma.Result))
          {
          //Do something
          }
          // May also be invoked as an extension method
          if (sma.Result.IsFalling())
          {
          //Do something
          }
          }
        </code>
      </example>
      <signature>
        <code>public static bool IsFalling(DataSeries series)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Functions.Maximum(cAlgo.API.DataSeries,System.Int32)">
      <summary>
        Finds the maximum value in a dataseries for a given period.
      </summary>
      <param name="series">Input dataseries</param>
      <param name="period">Input period</param>
      <returns>The maximum value in the dataseries in this period</returns>
      <example>
        <code>
          public override void Calculate(int index)
          {
          if(Functions.Maximum(sma.Result,20) &gt; MarketSeries.Close[index])
          {
          //Do something
          }

          // May be invoked as an extension method

          if (sma.Result.Maximum(20) &gt; MarketSeries.Close[index])
          {
          //Do something
          }
          }
        </code>
      </example>
      <example>
        <code>
          var maxHigh = MarketSeries.High.Maximum(periods);
        </code>
      </example>
      <signature>
        <code>public static double Maximum(DataSeries series, int period)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Functions.Minimum(cAlgo.API.DataSeries,System.Int32)">
      <summary>
        Finds the minimum of a dataseries for a given period.
      </summary>
      <param name="series">Input dataseries</param>
      <param name="period">Input period</param>
      <returns>The minimum value in the dataseries in this period</returns>
      <example>
        <code>
          public override void Calculate(int index)
          {
          if(Functions.Minimum(sma.Result, 20) &gt; MarketSeries.Close[index])
          {
          //Do something
          }

          // May be invoked as an extension method

          if (sma.Result.Minimum(20) &gt; MarketSeries.Close[index])
          {
          //Do something
          }
          }
        </code>
      </example>
      <example>
        <code>
          var minLow = MarketSeries.Low.Minimum(periods);
        </code>
      </example>
      <signature>
        <code>public static double Minimum(DataSeries series, int period)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Functions.HasCrossedAbove(cAlgo.API.DataSeries,cAlgo.API.DataSeries,System.Int32)">
      <summary>
        Returns true, if dataseries1 has crossed above dataseries2, over the specified Period.
      </summary>
      <param name="crossingSeries">Crossing dataseries</param>
      <param name="crossedSeries">Crossed dataseries</param>
      <param name="period">Period for which to check for crossing</param>
      <remarks>
        HasCrossedAbove will compare the crossing dataseries to the crossed dataseries starting from the
        current value of the series going back the specified period.
        If period is zero only the current bar values will be compared.
        If period is one the current bar values will be compared as well as the previous.

        e.g. Functions.HasCrossedAbove(sma.Result, MarketSeries.Close, 0)
        will only compare the current values which are not completed until the close of the bar.
        It is not uncommon that the function will return true and by the end of the bar the two
        series will uncross.
      </remarks>
      <example>
        <code>

          public override void Calculate(int index)
          {
          if(Functions.HasCrossedAbove(sma.Result, MarketSeries.Close, 0))
          {
          //Do something
          }

          // May be invoked as an extension method as well

          if(sma.Result.HasCrossedAbove(MarketSeries.Close, 0))
          {
          //Do something
          }
          }

        </code>
      </example>
      <signature>
        <code>public static bool HasCrossedAbove(DataSeries crossingSeries, DataSeries crossedSeries, int period)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Functions.HasCrossedBelow(cAlgo.API.DataSeries,cAlgo.API.DataSeries,System.Int32)">
      <summary>
        Returns true, if dataseries1 has crossed below dataseries2, over the specified Period.
      </summary>
      <param name="crossingSeries">Crossing dataseries</param>
      <param name="crossedSeries">Crossed dataseries</param>
      <param name="period">Period for which to check for crossing</param>
      <remarks>
        HasCrossedBelow will compare the crossing dataseries to the crossed dataseries starting from the
        current value of the series going back the specified period.
        If period is zero only the current bar values will be compared.
        If period is one the current bar values will be compared as well as the previous.

        e.g. Functions.HasCrossedBelow(sma.Result, MarketSeries.Close, 0)
        will only compare the current values which are not completed until the close of the bar.
        It is not uncommon that the function will return true and by the end of the bar the two
        series will uncross.
      </remarks>
      <example>
        <code>

          public override void Calculate(int index)
          {
          if(Functions.HasCrossedBelow(sma.Result, MarketSeries.Close,0)
          {
          //Do something
          }

          // May be invoked as an extension method

          if(sma.Result.HasCrossedBelow(MarketSeries.Close, 0))
          {
          //Do something
          }
          }

        </code>
      </example>
      <signature>
        <code>public static bool HasCrossedBelow(DataSeries crossingSeries, DataSeries crossedSeries, int period)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Functions.HasCrossedAbove(cAlgo.API.DataSeries,System.Double,System.Int32)">
      <summary>
        Checks if dataseries1 has crossed above value, sometime within the specified period.
      </summary>
      <param name="crossingSeries">Crossing dataseries</param>
      <param name="value">Price value to check if crossed</param>
      <param name="period">Period for which to check for crossing</param>
      <returns>true, if dataseries1 has crossed above value</returns>
      <remarks>
        HasCrossedAbove will compare the crossing dataseries to the crossed dataseries starting from the
        current value of the series going back the specified period.
        If period is zero only the current bar values will be compared.
        If period is one the current bar values will be compared as well as the previous.
        e.g. Functions.HasCrossedAbove(sma.Result, value, 0)
        will only compare the current simple moving average series value
        which is not completed until the close of the bar.
        It is not uncommon that the function will return true and by the end of the bar the series will uncross.
      </remarks>
      <example>
        <code>

          public override void Calculate(int index)
          {
          var value = MarketSeries.Close[index - 1];
          if(Functions.HasCrossedAbove(sma.Result, value, 1)
          {
          //Do something
          }

          // May be invoked as an extension method as well

          if(sma.Result.HasCrossedAbove(MarketSeries.Close[index-1], 1))
          {
          //Do something
          }
          }

        </code>
      </example>
      <signature>
        <code>public static bool HasCrossedAbove(DataSeries crossingSeries, double value, int period)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Functions.HasCrossedBelow(cAlgo.API.DataSeries,System.Double,System.Int32)">
      <summary>
        Checks if dataseries1 has crossed below the value, sometime within the specified period.
      </summary>
      <param name="crossingSeries">Crossing DataDeries</param>
      <param name="value">Price value to check if crossed </param>
      <param name="period">Period for which to check for crossing</param>
      <returns>True if dataseries1 has crossed below value, false otherwise</returns>
      <remarks>
        HasCrossedBelow compares the crossing dataseries to the value starting from the
        current value of the series going back the specified period.
        If period is zero, only the current bar value will be examined.
        If period is one, the current and previous bar value will be examined.
        e.g. Functions.HasCrossedAbove(sma.Result, value, 0)
        will only compare the current simple moving average series value
        which is not completed until the close of the bar.
        It is not uncommon that the function will return true and by the end of the bar the series will uncross.
      </remarks>
      <example>
        <code>
          public override void Calculate(int index)
          {
          if(Functions.HasCrossedBelow(sma.Result, MarketSeries.Close[index], 0)
          {
          //Do something
          }
          // May be invoked as an extension method as well
          if(sma.Result.HasCrossedBelow(MarketSeries.Close[index], 0))
          {
          //Do something
          }
          }
        </code>
      </example>
      <signature>
        <code>public static bool HasCrossedBelow(DataSeries crossingSeries, double value, int period)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Functions.Sum(cAlgo.API.DataSeries,System.Int32)">
      <summary>
        Calculates the sum of a dataseries, over the specified period.
      </summary>
      <param name="series">DataSeries of which values are summed</param>
      <param name="period">Period of values that are summed prior to current index</param>
      <returns>The sum of the series for the period</returns>
      <example>
        <code>
          SimpleMovingAverage sma;
          //...
          public override void Calculate(int index)
          {
          //The sum of the simple moving average series of the last 20 bars
          var sumSma = Functions.Sum(sma.Result, 20);
          //...
          }
        </code>
      </example>
      <signature>
        <code>public static double Sum(DataSeries series, int period)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.GetFitnessArgs">
      <summary>
        Represents the custom fitness calculation interface.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo.Robots
          {
          // This sample shows how to use the GetFitnessArgs to change the default fitness metric of optimizer
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class GetFitnessArgsSample : Robot
          {
          protected override void OnStart()
          {
          }

          protected override double GetFitness(GetFitnessArgs args)
          {
          // Here we are using the win rate as fitness
          // You can use any other value by combining the values of GetFitnessArgs object properties
          return args.WinningTrades / args.TotalTrades;
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Optimization" />
      <signature>
        <code>public interface GetFitnessArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GetFitnessArgs.History">
      <summary>
        Gets all the historical trades.
      </summary>
      <signature>
        <code>public History History { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GetFitnessArgs.Positions">
      <summary>
        Gets all open positions.
      </summary>
      <signature>
        <code>public Positions Positions { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GetFitnessArgs.PendingOrders">
      <summary>
        Gets all pending orders.
      </summary>
      <signature>
        <code>public PendingOrders PendingOrders { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GetFitnessArgs.Equity">
      <summary>
        Gets the equity of the account (balance plus unrealized profit and loss).
      </summary>
      <signature>
        <code>public double Equity { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GetFitnessArgs.NetProfit">
      <summary>
        Gets the net profit of all trades in account deposit currency.
      </summary>
      <signature>
        <code>public double NetProfit { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GetFitnessArgs.MaxBalanceDrawdownPercentages">
      <summary>
        Gets the maximum amount of balance drawdown in percentage (ex: 40%).
        It can return a positive value between 0-100.
      </summary>
      <signature>
        <code>public double MaxBalanceDrawdownPercentages { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GetFitnessArgs.MaxEquityDrawdownPercentages">
      <summary>
        Gets the maximum amount of equity drawdown in percentage (ex: 40%).
        It can return a positive value between 0-100.
      </summary>
      <signature>
        <code>public double MaxEquityDrawdownPercentages { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GetFitnessArgs.MaxBalanceDrawdown">
      <summary>
        Gets the maximum amount of balance drawdown in account deposit currency.
      </summary>
      <signature>
        <code>public double MaxBalanceDrawdown { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GetFitnessArgs.MaxEquityDrawdown">
      <summary>
        Gets the maximum amount of equity drawdown in account deposit currency.
      </summary>
      <signature>
        <code>public double MaxEquityDrawdown { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GetFitnessArgs.WinningTrades">
      <summary>
        Gets the total number of winning trades.
      </summary>
      <signature>
        <code>public double WinningTrades { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GetFitnessArgs.LosingTrades">
      <summary>
        Gets total number of losing trades.
      </summary>
      <signature>
        <code>public double LosingTrades { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GetFitnessArgs.TotalTrades">
      <summary>
        Gets the total number of trades taken.
      </summary>
      <signature>
        <code>public double TotalTrades { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GetFitnessArgs.AverageTrade">
      <summary>
        Gets the average profit for all trades in account deposit currency.
      </summary>
      <signature>
        <code>public double AverageTrade { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GetFitnessArgs.ProfitFactor">
      <summary>
        Gets the Profit Factor - the ratio of Total Net Profit divided by the Total Net Loss.
      </summary>
      <signature>
        <code>public double ProfitFactor { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GetFitnessArgs.Swaps">
      <summary>
        Gets the swaps of all trades in account deposit currency.
      </summary>
      <signature>
        <code>public double Swaps { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.GetFitnessArgs.Commissions">
      <summary>
        Gets the commissions of all trades in account deposit currency.
      </summary>
      <signature>
        <code>public double Commissions { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.HistoricalTrade">
      <summary>
        Represents the historical trade interface.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using System.Linq;

          namespace cAlgo
          {
          // A sample indicator that shows how to use HistoricalTrade
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class HistorySample : Indicator
          {
          private Style _textBlocksStyle;
          private StackPanel _stackPanel;
          private Grid _tradesGrid;

          protected override void Initialize()
          {
          _stackPanel = new StackPanel
          {
          Orientation = Orientation.Vertical,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          BackgroundColor = Color.Gold
          };
          _textBlocksStyle = new Style();
          _textBlocksStyle.Set(ControlProperty.Margin, 5);
          _stackPanel.AddChild(new TextBox
          {
          Text = "Your Last 10 Trades",
          FontWeight = FontWeight.ExtraBold,
          HorizontalAlignment = HorizontalAlignment.Center,
          Style = _textBlocksStyle
          });

          Chart.AddControl(_stackPanel);

          UpdateLastTradeTextBlock();

          Positions.Closed += args =&gt; UpdateLastTradeTextBlock();
          }

          public override void Calculate(int index)
          {
          }

          private void UpdateLastTradeTextBlock()
          {
          if (_tradesGrid != null)
          _stackPanel.RemoveChild(_tradesGrid);
          _tradesGrid = new Grid(11, 6);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = "Symbol",
          Style = _textBlocksStyle
          }, 0, 0);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = "Direction",
          Style = _textBlocksStyle
          }, 0, 1);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = "Volume",
          Style = _textBlocksStyle
          }, 0, 2);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = "Open Time",
          Style = _textBlocksStyle
          }, 0, 3);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = "Close Time",
          Style = _textBlocksStyle
          }, 0, 4);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = "Net Profit",
          Style = _textBlocksStyle
          }, 0, 5);

          var lastTenTrades = History.OrderByDescending(iTrade =&gt; iTrade.ClosingTime).Take(10).ToArray();

          for (int iRowIndex = 1; iRowIndex &lt;= lastTenTrades.Length; iRowIndex++)
          {
          var trade = lastTenTrades[iRowIndex - 1];
          _tradesGrid.AddChild(new TextBlock
          {
          Text = trade.SymbolName,
          Style = _textBlocksStyle
          }, iRowIndex, 0);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = trade.TradeType.ToString(),
          Style = _textBlocksStyle
          }, iRowIndex, 1);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = trade.VolumeInUnits.ToString(),
          Style = _textBlocksStyle
          }, iRowIndex, 2);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = trade.EntryTime.ToString("g"),
          Style = _textBlocksStyle
          }, iRowIndex, 3);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = trade.ClosingTime.ToString("g"),
          Style = _textBlocksStyle
          }, iRowIndex, 4);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = trade.NetProfit.ToString(),
          Style = _textBlocksStyle
          }, iRowIndex, 5);
          }
          _stackPanel.AddChild(_tradesGrid);
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.History" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.TradingHistory" />
      <signature>
        <code>public interface HistoricalTrade</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HistoricalTrade.ClosingDealId">
      <summary>
        Gets the unique closing deal identifier.
      </summary>
      <signature>
        <code>public int ClosingDealId { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HistoricalTrade.PositionId">
      <summary>
        Gets the position unique identifier.
      </summary>
      <signature>
        <code>public int PositionId { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HistoricalTrade.SymbolName">
      <summary>
        Gets the symbol name.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public string SymbolName { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HistoricalTrade.TradeType">
      <summary>
        The TradeType of the Opening Deal.
      </summary>
      <signature>
        <code>public TradeType TradeType { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HistoricalTrade.VolumeInUnits">
      <summary>
        The Volume that was closed by the Closing Deal.
      </summary>
      <signature>
        <code>public double VolumeInUnits { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HistoricalTrade.EntryTime">
      <summary>
        Time of the Opening Deal, or the time of the first Opening deal that was closed.
      </summary>
      <signature>
        <code>public DateTime EntryTime { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HistoricalTrade.EntryPrice">
      <summary>
        The VWAP (Volume Weighted Average Price) of the Opening Deals that are closed.
      </summary>
      <signature>
        <code>public double EntryPrice { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HistoricalTrade.ClosingTime">
      <summary>
        Time of the Closing Deal.
      </summary>
      <signature>
        <code>public DateTime ClosingTime { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HistoricalTrade.ClosingPrice">
      <summary>
        The execution price of the Closing Deal.
      </summary>
      <signature>
        <code>public double ClosingPrice { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HistoricalTrade.Label">
      <summary>
        The label.
      </summary>
      <signature>
        <code>public string Label { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HistoricalTrade.Comment">
      <summary>
        The comment
      </summary>
      <signature>
        <code>public string Comment { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HistoricalTrade.Commissions">
      <summary>
        Commission owed
      </summary>
      <signature>
        <code>public double Commissions { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HistoricalTrade.Swap">
      <summary>
        Swap is the overnight interest rate if any, accrued on the position.
      </summary>
      <signature>
        <code>public double Swap { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HistoricalTrade.NetProfit">
      <summary>
        Profit and loss including swaps and commissions
      </summary>
      <signature>
        <code>public double NetProfit { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HistoricalTrade.GrossProfit">
      <summary>
        Profit and loss before swaps and commission
      </summary>
      <signature>
        <code>public double GrossProfit { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HistoricalTrade.Balance">
      <summary>
        Account balance after the Deal was filled
      </summary>
      <signature>
        <code>public double Balance { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HistoricalTrade.Pips">
      <summary>
        Represents the winning or loosing pips
      </summary>
      <signature>
        <code>public double Pips { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HistoricalTrade.Quantity">
      <summary>
        The Quantity (in lots) that was closed by the Closing Deal
      </summary>
      <signature>
        <code>public double Quantity { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HistoricalTrade.Symbol">
      <summary>
        Gets the trade symbol.
      </summary>
      <signature>
        <code>public Symbol Symbol { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.History">
      <summary>
        Provides access to methods of the historical trades collection
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using System.Linq;

          namespace cAlgo
          {
          // A sample indicator that shows how to get historical trades and use the account history data
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class HistorySample : Indicator
          {
          private Style _textBlocksStyle;

          private StackPanel _stackPanel;

          private Grid _tradesGrid;

          protected override void Initialize()
          {
          _stackPanel = new StackPanel
          {
          Orientation = Orientation.Vertical,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          BackgroundColor = Color.Gold
          };

          _textBlocksStyle = new Style();

          _textBlocksStyle.Set(ControlProperty.Margin, 5);

          _stackPanel.AddChild(new TextBox
          {
          Text = "Your Last 10 Trades",
          FontWeight = FontWeight.ExtraBold,
          HorizontalAlignment = HorizontalAlignment.Center,
          Style = _textBlocksStyle
          });

          Chart.AddControl(_stackPanel);

          UpdateLastTradeTextBlock();

          Positions.Closed += args =&gt; UpdateLastTradeTextBlock();
          }

          public override void Calculate(int index)
          {
          }

          private void UpdateLastTradeTextBlock()
          {
          if (_tradesGrid != null)
          _stackPanel.RemoveChild(_tradesGrid);

          _tradesGrid = new Grid(11, 6);

          _tradesGrid.AddChild(new TextBlock
          {
          Text = "Symbol",
          Style = _textBlocksStyle
          }, 0, 0);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = "Direction",
          Style = _textBlocksStyle
          }, 0, 1);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = "Volume",
          Style = _textBlocksStyle
          }, 0, 2);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = "Open Time",
          Style = _textBlocksStyle
          }, 0, 3);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = "Close Time",
          Style = _textBlocksStyle
          }, 0, 4);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = "Net Profit",
          Style = _textBlocksStyle
          }, 0, 5);

          var lastTenTrades = History.OrderByDescending(iTrade =&gt; iTrade.ClosingTime).Take(10).ToArray();

          for (int iRowIndex = 1; iRowIndex &lt;= lastTenTrades.Length; iRowIndex++)
          {
          var trade = lastTenTrades[iRowIndex - 1];

          _tradesGrid.AddChild(new TextBlock
          {
          Text = trade.SymbolName,
          Style = _textBlocksStyle
          }, iRowIndex, 0);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = trade.TradeType.ToString(),
          Style = _textBlocksStyle
          }, iRowIndex, 1);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = trade.VolumeInUnits.ToString(),
          Style = _textBlocksStyle
          }, iRowIndex, 2);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = trade.EntryTime.ToString("g"),
          Style = _textBlocksStyle
          }, iRowIndex, 3);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = trade.ClosingTime.ToString("g"),
          Style = _textBlocksStyle
          }, iRowIndex, 4);
          _tradesGrid.AddChild(new TextBlock
          {
          Text = trade.NetProfit.ToString(),
          Style = _textBlocksStyle
          }, iRowIndex, 5);
          }

          _stackPanel.AddChild(_tradesGrid);
          }
          }
          }

        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.TradingHistory" />
      <signature>
        <code>public interface History</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.History.Item(System.Int32)">
      <summary>
        Find a historical trade by index
      </summary>
      <param name="index">the index in the list</param>
      <signature>
        <code>public HistoricalTrade this[int index] { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.History.Count">
      <summary>
        Total number of historical trades
      </summary>
      <signature>
        <code>public int Count { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.History.FindLast(System.String)">
      <summary>
        Find last historical trade by its label
      </summary>
      <param name="label">Label to search by</param>
      <signature>
        <code>public HistoricalTrade FindLast(string label)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.History.FindLast(System.String,System.String)">
      <summary>
        Find last historical trade by its label, symbol name
      </summary>
      <param name="label">Label to search by</param>
      <param name="symbolName">Symbol name to search by</param>
      <signature>
        <code>public HistoricalTrade FindLast(string label, string symbolName)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.History.FindLast(System.String,System.String,cAlgo.API.TradeType)">
      <summary>
        Find last historical trade by its label, symbol name and trade type
      </summary>
      <param name="label">Label to search by</param>
      <param name="symbolName">Symbol name to search by</param>
      <param name="tradeType">Trade type to search by</param>
      <signature>
        <code>public HistoricalTrade FindLast(string label, string symbolName, TradeType tradeType)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.History.FindAll(System.String)">
      <summary>
        Find all historical trades by the label
      </summary>
      <param name="label">Label to search by</param>
      <signature>
        <code>public HistoricalTrade[] FindAll(string label)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.History.FindAll(System.String,System.String)">
      <summary>
        Find all historical trades by label, symbol name
      </summary>
      <param name="label">Label to search by</param>
      <param name="symbolName">Symbol name to search by</param>
      <signature>
        <code>public HistoricalTrade[] FindAll(string label, string symbolName)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.History.FindAll(System.String,System.String,cAlgo.API.TradeType)">
      <summary>
        Find all historical trades by label, symbol name and trade type
      </summary>
      <param name="label">Label to search by</param>
      <param name="symbolName">Symbol name to search by</param>
      <param name="tradeType">Trade type to search by</param>
      <signature>
        <code>public HistoricalTrade[] FindAll(string label, string symbolName, TradeType tradeType)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.HorizontalAlignment">
      <summary>
        Describes horizontal position related to an anchor point or a parent element
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to use Chart.DrawHorizontalLine method to draw an horizontal line
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class HorizontalLineSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.DrawHorizontalLine("horizontalLine", Bars.ClosePrices.LastValue, Color.Red);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Chart" />
      <signature>
        <code>public enum HorizontalAlignment</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.HorizontalAlignment.Center">
      <summary>
        Center horizontal alignment.
      </summary>
      <signature>
        <code>public static HorizontalAlignment Center;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.HorizontalAlignment.Left">
      <summary>
        Left horizontal alignment.
      </summary>
      <signature>
        <code>public static HorizontalAlignment Left;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.HorizontalAlignment.Right">
      <summary>
        Right horizontal alignment.
      </summary>
      <signature>
        <code>public static HorizontalAlignment Right;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.HorizontalAlignment.Stretch">
      <summary>
        Stretch horizontal alignment.
      </summary>
      <signature>
        <code>public static HorizontalAlignment Stretch;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Http">
      <summary>
        The <c>Https</c> interface contains the methods necessary for sending HTTP requests.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Http" />
      <signature>
        <code>public interface Http</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Http.Get(System.Uri)">
      <summary>
        Performs a GET request to the specified URI.
      </summary>
      <param name="uri">The URI that the GET request should be made to.</param>
      <returns>
        The <c>HttpResponse</c> object representing the result of the request.
      </returns>
      <signature>
        <code>public HttpResponse Get(Uri uri)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Http.Get(System.String)">
      <summary>
        Performs a GET request to the specified URI.
      </summary>
      <param name="uri">The string containing the URI that the GET request should be made to.</param>
      <returns>
        The <c>HttpResponse</c> object representing the result of the request.
      </returns>
      <signature>
        <code>public HttpResponse Get(string uri)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Http.GetAsync(System.Uri,System.Action{cAlgo.API.HttpResponse})">
      <summary>
        Performs a GET request to the specified URI asynchronously.
      </summary>
      <param name="uri">The URI that the GET request should be made to.</param>
      <param name="callback">The method to be invoked when the request is being sent.</param>
      <signature>
        <code>public void GetAsync(Uri uri, Action&lt;HttpResponse&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Http.GetAsync(System.String,System.Action{cAlgo.API.HttpResponse})">
      <summary>
        Performs a GET request to the specified URI asynchronously.
      </summary>
      <param name="uri">The string containing the URI that the GET request should be made to.</param>
      <param name="callback">The method to be invoked when the request is being sent.</param>
      <signature>
        <code>public void GetAsync(string uri, Action&lt;HttpResponse&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Http.Send(cAlgo.API.HttpRequest)">
      <summary>
        Performs a request to the specified URI. The request method depends on the value of the <c>request.Method</c> property.
      </summary>
      <param name="request">
        The <c>HttpRequest</c> object representing the request contents.
      </param>
      <returns>
        The <c>HttpResponse</c> object representing the result of the request.
      </returns>
      <seealso cref="T:cAlgo.API.HttpRequest" />
      <seealso cref="T:cAlgo.API.HttpResponse" />
      <signature>
        <code>public HttpResponse Send(HttpRequest request)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Http.SendAsync(cAlgo.API.HttpRequest,System.Action{cAlgo.API.HttpResponse})">
      <summary>
        Performs a request to the specified URI. The request method depends on the value of the <c>request.Method</c> property.
      </summary>
      <param name="request">
        The <c>HttpRequest</c> object representing the request contents.
      </param>
      <param name="callback">The method to be invoked when the request is being sent.</param>
      <seealso cref="T:cAlgo.API.HttpRequest" />
      <seealso cref="T:cAlgo.API.HttpResponse" />
      <signature>
        <code>public void SendAsync(HttpRequest request, Action&lt;HttpResponse&gt; callback)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.HttpMethod">
      <summary>
        An enumeration of different HTTP Methods.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Http" />
      <signature>
        <code>public enum HttpMethod</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.HttpMethod.Get">
      <summary>
        Represents an HTTP GET protocol method.
      </summary>
      <signature>
        <code>public static HttpMethod Get;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.HttpMethod.Post">
      <summary>
        Represents an HTTP POST protocol method.
      </summary>
      <signature>
        <code>public static HttpMethod Post;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.HttpMethod.Delete">
      <summary>
        Represents an HTTP DELETE protocol method.
      </summary>
      <signature>
        <code>public static HttpMethod Delete;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.HttpMethod.Put">
      <summary>
        Represents an HTTP PUT protocol method.
      </summary>
      <signature>
        <code>public static HttpMethod Put;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.HttpMethod.Patch">
      <summary>
        Represents the HTTP PATCH protocol method.
      </summary>
      <signature>
        <code>public static HttpMethod Patch;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.HttpMethod.Head">
      <summary>
        Represents an HTTP HEAD protocol method.
      </summary>
      <signature>
        <code>public static HttpMethod Head;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.HttpMethod.Options">
      <summary>
        Represents an HTTP OPTIONS protocol method.
      </summary>
      <signature>
        <code>public static HttpMethod Options;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.HttpMethod.Trace">
      <summary>
        Represents an HTTP TRACE protocol method.
      </summary>
      <signature>
        <code>public static HttpMethod Trace;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.HttpRequest">
      <summary>
        The class representing an HTTP request.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Http" />
      <signature>
        <code>public sealed class HttpRequest</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.HttpRequest.#ctor(System.Uri)">
      <summary>
        The default class constructor.
      </summary>
      <signature>
        <code>public HttpRequest(Uri uri)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HttpRequest.Uri">
      <summary>
        Gets or sets the request URI.
      </summary>
      <signature>
        <code>public Uri Uri { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HttpRequest.Body">
      <summary>
        Gets or sets the request body.
        If a GET, TRACE, HEAD, CONNECT, and OPTIONS request is performed, the value of this property is ignored.
      </summary>
      <signature>
        <code>public string Body { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HttpRequest.Headers">
      <summary>
        Gets the request headers.
      </summary>
      <signature>
        <code>public HttpRequestHeaders Headers { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HttpRequest.Timeout">
      <summary>
        Gets or sets the request timeout.
        The default value is 100,000 milliseconds (100 seconds).
      </summary>
      <signature>
        <code>public TimeSpan Timeout { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HttpRequest.Version">
      <summary>
        Gets or sets the request version.
        The default value is 2.0.
      </summary>
      <signature>
        <code>public Version Version { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HttpRequest.VersionPolicy">
      <summary>
        Gets or sets the request version policy.
        The default value is <c>RequestVersionOrLower</c>.
      </summary>
      <signature>
        <code>public HttpVersionPolicy VersionPolicy { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HttpRequest.Method">
      <summary>
        Gets or sets the request method.
        The default value is Get.
      </summary>
      <signature>
        <code>public HttpMethod Method { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.HttpRequestHeaders">
      <summary>
        The class that represents an HTTP request headers collection.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Http" />
      <signature>
        <code>public sealed class HttpRequestHeaders</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.HttpRequestHeaders.Add(System.String,System.String)">
      <summary>
        Adds a new header.
      </summary>
      <param name="name">The Header name</param>
      <param name="value">The Header value</param>
      <signature>
        <code>public void Add(string name, string value)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.HttpRequestHeaders.Update(System.String,System.String)">
      <summary>
        Updates an existing header.
      </summary>
      <param name="name">The Header name</param>
      <param name="value">The new Header value</param>
      <signature>
        <code>public void Update(string name, string value)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.HttpRequestHeaders.Remove(System.String)">
      <summary>
        Removes an existing header.
      </summary>
      <param name="name">Header name</param>
      <returns>true if the header is successfully found and removed; otherwise, false.</returns>
      <signature>
        <code>public bool Remove(string name)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.HttpRequestHeaders.GetValue(System.String)">
      <summary>
        Returns an existing header value.
      </summary>
      <param name="name">The Header name</param>
      <returns>The Header value if the header is successfully found; otherwise, an empty string.</returns>
      <signature>
        <code>public string GetValue(string name)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.HttpRequestHeaders.GetEnumerator">
      <summary>
        Returns an enumerator that iterates through <c>HttpRequestHeaders</c>.
      </summary>
      <returns>
      </returns>
      <signature>
        <code>public IEnumerator&lt;KeyValuePair&lt;string, string&gt;&gt; GetEnumerator()</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.HttpResponse">
      <summary>
        The class representing an HTTP response.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Http" />
      <signature>
        <code>public sealed class HttpResponse</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HttpResponse.StatusCode">
      <summary>
        Gets the response status code.
      </summary>
      <signature>
        <code>public int StatusCode { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HttpResponse.IsSuccessful">
      <summary>
        Gets <c>true</c> if the response is successful, <c>false</c> otherwise.
      </summary>
      <signature>
        <code>public bool IsSuccessful { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HttpResponse.Body">
      <summary>
        Gets the body of the response.
      </summary>
      <signature>
        <code>public string Body { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HttpResponse.Exception">
      <summary>
        Gets the exception thrown when sending HTTP request.
      </summary>
      <signature>
        <code>public HttpException Exception { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.HttpResponse.Headers">
      <summary>
        Gets the headers contained in the response.
      </summary>
      <signature>
        <code>public HttpResponseHeaders Headers { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.HttpResponseHeaders">
      <summary>
        The class that represents an HTTP response headers collection.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Http" />
      <signature>
        <code>public sealed class HttpResponseHeaders</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.HttpResponseHeaders.GetEnumerator">
      <summary>
        Returns an enumerator that iterates through <c>HttpResponseHeaders</c>.
      </summary>
      <returns>
      </returns>
      <signature>
        <code>public IEnumerator&lt;KeyValuePair&lt;string, string&gt;&gt; GetEnumerator()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.HttpResponseHeaders.GetValue(System.String)">
      <summary>
        Returns an existing header value.
      </summary>
      <param name="name">The Header name</param>
      <returns>The Header value if the header is successfully found; otherwise, an empty string.</returns>
      <signature>
        <code>public string GetValue(string name)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.HttpVersionPolicy">
      <summary>
        An enumeration of different HTTP version policies.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Http" />
      <signature>
        <code>public enum HttpVersionPolicy</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.HttpVersionPolicy.RequestVersionOrLower">
      <summary>
        Use the requested version or downgrade to a lower one. This is the default behavior.
      </summary>
      <signature>
        <code>public static HttpVersionPolicy RequestVersionOrLower;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.HttpVersionPolicy.RequestVersionOrHigher">
      <summary>
        Use the highest available version, downgrading only to the requested version but not below.
      </summary>
      <signature>
        <code>public static HttpVersionPolicy RequestVersionOrHigher;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.HttpVersionPolicy.RequestVersionExact">
      <summary>
        Only use the requested version.
      </summary>
      <signature>
        <code>public static HttpVersionPolicy RequestVersionExact;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.IndicatorDataSeries">
      <summary>
        Represents a mutable array of values. An extension of DataSeries used to represent indicator values.
      </summary>
      <example>
        <code>
          //This will be the output result of your indicator
          [Output("Result", Color = Colors.Orange)]
          public IndicatorDataSeries Result { get; set; }
        </code>
      </example>
      <example>
        <code>
          //  The following example is the calculation of the simple moving average
          //  of the median price
          [Output("Result")]
          public IndicatorDataSeries Result { get; set; }

          private IndicatorDataSeries _dataSeries;
          private SimpleMovingAverage _simpleMovingAverage;

          protected override void Initialize()
          {
          _dataSeries = CreateDataSeries();
          _simpleMovingAverage = Indicators.SimpleMovingAverage(_dataSeries, 14);
          }
          public override void Calculate(int index)
          {
          _dataSeries[index] = (MarketSeries.High[index] + MarketSeries.Low[index])/2;
          Result[index] = _simpleMovingAverage.Result[index];
          }
        </code>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use an indicator data series
          [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class IndicatorDataSeriesSample : Indicator
          {
          private IndicatorDataSeries _internalSeries;

          [Output("Main", LineColor = "Yellow", PlotType = PlotType.Line, Thickness = 1)]
          public IndicatorDataSeries Main { get; set; }

          protected override void Initialize()
          {
          // If an indicator data series doesn't has the Output attribute then you must create it manually
          _internalSeries = CreateDataSeries();
          }

          public override void Calculate(int index)
          {
          _internalSeries[index] = Bars.HighPrices[index];

          Main[index] = _internalSeries[index] - Bars.LowPrices[index];
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.CollectionsDataSeries" />
      <signature>
        <code>public interface IndicatorDataSeries</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorDataSeries.Item(System.Int32)">
      <summary>
        Gets or sets the value at the specified index.
      </summary>
      <example>
        <code>
          //  The following example is the calculation of the median price
          [Output("Result")]
          public IndicatorDataSeries Result { get; set; }

          private IndicatorDataSeries _dataSeries;

          protected override void Initialize()
          {
          _dataSeries = CreateDataSeries();
          }
          public override void Calculate(int index)
          {

          _dataSeries[index] = (MarketSeries.High[index] + MarketSeries.Low[index])/2;

          // Get the value of _dataSeries at index
          // and set the value of Result at index
          Result[index] = _dataSeries[index];
          }
        </code>
      </example>
      <signature>
        <code>public double this[int index] { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.IndicatorDataSeries.Line">
      <summary>
        Gets the indicator output line.
      </summary>
      <signature>
        <code>public IndicatorLine Line { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.AcceleratorOscillator">
      <summary>
        Identifies possible trend reversals
      </summary>
      <example>
        <code>
          protected override void Initialize()
          {
          acceleratorOscillator = Indicators.AcceleratorOscillator();
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use an Accelerator Oscillator indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class AcceleratorOscillatorSample : Robot
          {
          private double _volumeInUnits;

          private AcceleratorOscillator _acceleratorOscillator;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _acceleratorOscillator = Indicators.AcceleratorOscillator();
          }

          protected override void OnBar()
          {
          foreach (var position in BotPositions)
          {
          if ((position.TradeType == TradeType.Buy &amp;&amp; _acceleratorOscillator.Result.Last(1) &lt; _acceleratorOscillator.Result.Last(2))
          || (position.TradeType == TradeType.Sell &amp;&amp; _acceleratorOscillator.Result.Last(1) &gt; _acceleratorOscillator.Result.Last(2)))
          {
          ClosePosition(position);
          }
          }

          if (_acceleratorOscillator.Result.Last(1) &amp; 0 &amp;&amp; _acceleratorOscillator.Result.Last(2) &lt;= 0)
          {
          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_acceleratorOscillator.Result.Last(1) &lt; 0 &amp;&amp; _acceleratorOscillator.Result.Last(2) &gt;= 0)
          {
          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface AcceleratorOscillator</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.AcceleratorOscillator.Result">
      <summary>
        AcceleratorOscillator calculation result
      </summary>
      <example>
        <code>
          protected override void OnBar()
          {
          var lastValue = acceleratorOscillator.Result.LastValue;
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.AccumulativeSwingIndex">
      <summary>
        A variation on Wilder's swing index which plots an accumulation of the swing index value of each candlestick or bar.
      </summary>
      <remarks>
        The accumulative swing index is used to gain a longer-term picture than the Wilder's swing index.
        When the accumulative swing index is positive, the long-term trend is up.
        When the accumulative swing index is negative, it signals a downwards long-term trend.
      </remarks>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Indicator
          {
          [Indicator]
          public class AccumSwingIndexReferenceExample:Indicator
          {
          private AccumulativeSwingIndex _accumulativeSwingIndex;

          [Parameter("Limit Move", DefaultValue = 12)]
          public int LimitMove { get; set; }

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          protected override void Initialize()
          {
          _accumulativeSwingIndex = Indicators.AccumulativeSwingIndex(LimitMove);
          }
          public override void Calculate(int index)
          {
          // Display Result of Indicator
          Result[index] = _accumulativeSwingIndex.Result[index];
          }
          }
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use an Accumulative Swing Index indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class AccumulativeSwingIndexSample : Robot
          {
          private double _volumeInUnits;

          private AccumulativeSwingIndex _accumulativeSwingIndex;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _accumulativeSwingIndex = Indicators.AccumulativeSwingIndex(12);
          }

          protected override void OnBar()
          {
          foreach (var position in BotPositions)
          {
          if ((position.TradeType == TradeType.Buy &amp;&amp; _accumulativeSwingIndex.Result.Last(1) &lt; _accumulativeSwingIndex.Result.Last(2))
          || (position.TradeType == TradeType.Sell &amp;&amp; _accumulativeSwingIndex.Result.Last(1) &gt; _accumulativeSwingIndex.Result.Last(2)))
          {
          ClosePosition(position);
          }
          }

          if (_accumulativeSwingIndex.Result.Last(1) &gt; 0 &amp;&amp; _accumulativeSwingIndex.Result.Last(2) &lt;= 0)
          {
          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_accumulativeSwingIndex.Result.Last(1) &lt; 0 &amp;&amp; _accumulativeSwingIndex.Result.Last(2) &gt;= 0)
          {
          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface AccumulativeSwingIndex</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.AccumulativeSwingIndex.Result">
      <summary>
        The time series of AccumulativeSwingIndex.
      </summary>
      <value>The Output Series of AccumulativeSwingIndex.</value>
      <example>
        <code>
          //...

          private AccumulativeSwingIndex _accumulativeSwingIndex;

          //...

          [Parameter("Limit Move", DefaultValue = 12)]
          public int LimitMove { get; set; }

          //...

          protected override void OnStart()
          {
          _accumulativeSwingIndex = Indicators.AccumulativeSwingIndex(LimitMove);
          }
          protected override void OnBar()
          {
          // Print to log
          Print("The Current Accumulative Swing Index is: {0}", _accumulativeSwingIndex.Result.LastValue);
          }

          //...
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.Alligator">
      <summary>
        Legendary trader Bill Williams, an early pioneer of market psychology, developed the trend-following Alligator indicator,
        which follows the premise that financial markets and individual securities trend just 15% to 30% of the time while grinding through sideways ranges the other 70% to 85% of the time.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Alligator indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class AlligatorSample : Robot
          {
          private double _volumeInUnits;

          private Alligator _alligator;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _alligator = Indicators.Alligator(13, 18, 8, 5, 5, 3);
          }

          protected override void OnBar()
          {
          if (_alligator.Lips.Last(1) &gt; _alligator.Teeth.Last(1) &amp;&amp; _alligator.Lips.Last(2) &lt;= _alligator.Teeth.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_alligator.Lips.Last(1) &lt; _alligator.Teeth.Last(1) &amp;&amp; _alligator.Lips.Last(2) &gt;= _alligator.Teeth.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface Alligator</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.Alligator.Jaws">
      <summary>
        The jaw is the x-period (13) smoothed moving average that is moved into the future by x (18) bars.
      </summary>
      <signature>
        <code>public IndicatorDataSeries Jaws { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.Alligator.Teeth">
      <summary>
        The teeth is the x-period (8) smoothed moving average that is moved x (5) bars into the future.
      </summary>
      <signature>
        <code>public IndicatorDataSeries Teeth { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.Alligator.Lips">
      <summary>
        The lips is the x-period (5) smoothed moving average that is moved by x (3) bars into the future
      </summary>
      <signature>
        <code>public IndicatorDataSeries Lips { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.Aroon">
      <summary>
        An indicator for identifying trends in a currency pair, as well as for gauging the probability of a trend reversal.
      </summary>
      <remarks>
        The indicator fluctuates between 0 and 100, with values above 80 signalling an upward trend, and values below 20 signalling a downward trend.
      </remarks>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Indicators
          {
          [Indicator]
          public class AroonReferenceExample:Indicator
          {
          private Aroon _aroon;

          [Parameter("Periods", DefaultValue = 25)]
          public int Periods { get; set; }

          [Output("Up")]
          public IndicatorDataSeries ResultAroonUp { get; set; }

          [Output("Down")]
          public IndicatorDataSeries ResultAroonDown { get; set; }

          protected override void Initialize()
          {
          _aroon = Indicators.Aroon(Periods);
          }

          public override void Calculate(int index)
          {
          ResultAroonUp[index] = _aroon.Up[index];
          ResultAroonDown[index] = _aroon.Down[index];
          }

          }
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use an Aroon indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class AroonSample : Robot
          {
          private double _volumeInUnits;

          private Aroon _accumulativeSwingIndex;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _accumulativeSwingIndex = Indicators.Aroon(25);
          }

          protected override void OnBar()
          {
          if (_accumulativeSwingIndex.Up.Last(1) &gt; _accumulativeSwingIndex.Down.Last(1) &amp;&amp; _accumulativeSwingIndex.Up.Last(2) &lt; _accumulativeSwingIndex.Down.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_accumulativeSwingIndex.Up.Last(1) &lt; _accumulativeSwingIndex.Down.Last(1) &amp;&amp; _accumulativeSwingIndex.Up.Last(2) &gt; _accumulativeSwingIndex.Down.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface Aroon</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.Aroon.Up">
      <summary>
        Aroon Up
      </summary>
      <value>The Aroon Up result.</value>
      <example>
        <code>
          //...

          [Parameter("Periods", DefaultValue = 25)]
          public int Periods { get; set; }

          //...

          private Aroon _aroon;

          //...

          protected override void OnStart()
          {
          _aroon = Indicators.Aroon(Periods);
          }
          protected override void OnBar()
          {
          Print("Current Aroon Up Value is: {0}", _aroon.Up.LastValue);
          }

          //...
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Up { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.Aroon.Down">
      <summary>
        Aroon Down
      </summary>
      <value>The Aroon Down result.</value>
      <example>
        <code>
          //...

          [Parameter("Periods", DefaultValue = 25)]
          public int Periods { get; set; }

          //...

          private Aroon _aroon;

          //...

          protected override void OnStart()
          {
          _aroon = Indicators.Aroon(Periods);
          }
          protected override void OnBar()
          {
          Print("Current Aroon Down Value is: {0}", _aroon.Down.LastValue);
          }

          //...
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Down { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.AverageDirectionalMovementIndexRating">
      <summary>
        The Average Directional Movement Index Rating (ADXR) measures the strength of the Average Directional Movement Index (ADX).
        It's calculated by taking the average of the current ADX and the ADX from one time period before.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Average Directional Movement Index Rating indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class AverageDirectionalMovementIndexRatingSample : Robot
          {
          private double _volumeInUnits;

          private AverageDirectionalMovementIndexRating _averageDirectionalMovementIndexRating;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _averageDirectionalMovementIndexRating = Indicators.AverageDirectionalMovementIndexRating(20);
          }

          protected override void OnBar()
          {
          if (_averageDirectionalMovementIndexRating.ADXR.Last(1) &lt; 25) return;

          if (_averageDirectionalMovementIndexRating.DIPlus.Last(1) &gt; _averageDirectionalMovementIndexRating.DIMinus.Last(1) &amp;&amp; _averageDirectionalMovementIndexRating.DIPlus.Last(2) &lt;= _averageDirectionalMovementIndexRating.DIMinus.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_averageDirectionalMovementIndexRating.DIPlus.Last(1) &lt; _averageDirectionalMovementIndexRating.DIMinus.Last(1) &amp;&amp; _averageDirectionalMovementIndexRating.DIPlus.Last(2) &gt;= _averageDirectionalMovementIndexRating.DIMinus.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <seealso cref="T:cAlgo.API.Indicators.DirectionalMovementSystem" />
      <signature>
        <code>public interface AverageDirectionalMovementIndexRating</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.AverageDirectionalMovementIndexRating.ADX">
      <summary>
        The Average Directional Movement Index (ADX) indicates whether the market is trending or ranging.
      </summary>
      <signature>
        <code>public IndicatorDataSeries ADX { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.AverageDirectionalMovementIndexRating.ADXR">
      <summary>
        The rating of Average Directional Movement Index (ADX)
      </summary>
      <signature>
        <code>public IndicatorDataSeries ADXR { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.AverageDirectionalMovementIndexRating.DIMinus">
      <summary>
        The Positive Direction Indicator (+DI) indicates upward trend movement.
      </summary>
      <signature>
        <code>public IndicatorDataSeries DIMinus { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.AverageDirectionalMovementIndexRating.DIPlus">
      <summary>
        The Negative Direction Indicator (-DI) indicates downward trend movement.
      </summary>
      <signature>
        <code>public IndicatorDataSeries DIPlus { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.AverageTrueRange">
      <summary>
        Average true range. An indicator providing the degree of price volatility.
      </summary>
      <remarks>
        Average true range is a volatility indicator originally developed by J. Welles Wilder. The indicator provides the degree of price volatility. The average true range is an N-day (exponential) moving average of the true range values. Wilder recommended a 14-period smoothing.
      </remarks>
      <example>
        <code>
          private AverageTrueRange averageTrueRange;

          [Parameter(DefaultValue = 14)]
          public int Periods { get; set; }

          [Parameter(DefaultValue = 0.002)]
          public double ATRValue { get; set; }

          [Parameter("MA Type", DefaultValue = MovingAverageType.Exponential)]
          public MovingAverageType MAType { get; set; }

          protected override void OnStart()
          {
          averageTrueRange = Indicators.AverageTrueRange(Periods, MAType);
          }

          protected override void OnTick()
          {
          // if the 14 day Average True Range is higher than 0.002
          if(averageTrueRange.Result.LastValue &gt;= ATRValue)
          {
          // Do Something
          }
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;
          using System;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use an Average True Range indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class AverageTrueRangeSample : Robot
          {
          private double _volumeInUnits;

          private AverageTrueRange _averageTrueRange;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _averageTrueRange = Indicators.AverageTrueRange(14, MovingAverageType.Exponential);
          }

          protected override void OnBar()
          {
          if (Bars.ClosePrices.Last(1) &gt; Bars.OpenPrices.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt; Bars.OpenPrices.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteOrder(TradeType.Buy);
          }
          else if (Bars.ClosePrices.Last(1) &lt; Bars.OpenPrices.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt; Bars.OpenPrices.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteOrder(TradeType.Sell);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }

          private void ExecuteOrder(TradeType tradeType)
          {
          var atrInPips = _averageTrueRange.Result.Last(1) * (Symbol.TickSize / Symbol.PipSize * Math.Pow(10, Symbol.Digits));

          var stopLossInPips = atrInPips * 2;
          var takeProfitInPips = stopLossInPips * 2;

          ExecuteMarketOrder(tradeType, SymbolName, _volumeInUnits, Label, stopLossInPips, takeProfitInPips);
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface AverageTrueRange</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.AverageTrueRange.Result">
      <summary>
        The resulting data series of Average True Range Indicator instance
      </summary>
      <example>
        <code>
          public override void Calculate(int index)
          {
          // Plot the Average True Range of period 14
          Result[index] = averageTrueRange.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.AwesomeOscillator">
      <summary>
        Displays the market momentum as a histogram.
      </summary>
      <example>
        <code>
          protected override void Initialize()
          {
          awesomeOscillator = Indicators.AwesomeOscillator();
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use an Awesome Oscillator indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class AwesomeOscillatorSample : Robot
          {
          private double _volumeInUnits;

          private AwesomeOscillator _awesomeOscillator;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _awesomeOscillator = Indicators.AwesomeOscillator();
          }

          protected override void OnBar()
          {
          foreach (var position in BotPositions)
          {
          if ((position.TradeType == TradeType.Buy &amp;&amp; _awesomeOscillator.Result.Last(1) &lt; _awesomeOscillator.Result.Last(2))
          || (position.TradeType == TradeType.Sell &amp;&amp; _awesomeOscillator.Result.Last(1) &gt; _awesomeOscillator.Result.Last(2)))
          {
          ClosePosition(position);
          }
          }

          if (_awesomeOscillator.Result.Last(1) &gt; 0 &amp;&amp; _awesomeOscillator.Result.Last(2) &lt;= 0)
          {
          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_awesomeOscillator.Result.Last(1) &lt; 0 &amp;&amp; _awesomeOscillator.Result.Last(2) &gt;= 0)
          {
          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface AwesomeOscillator</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.AwesomeOscillator.Result">
      <summary>
        Gets the Awesome Oscillator calculation result.
      </summary>
      <example>
        <code>
          protected override void OnBar()
          {
          var lastValue = awesomeOscillator.Result.LastValue;
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.BollingerBands">
      <summary>
        Bollinger Bands are used to confirm signals. The bands indicate overbought and oversold levels relative to a moving average.
      </summary>
      <remarks>
        Bollinger bands widen in volatile market periods, and contract during less volatile periods. Tightening of the bands is often used a signal that there will shortly be a sharp increase in market volatility.
      </remarks>
      <example>
        <code>
          //...

          [Robot]
          public class SampleRobot : Robot

          //...

          [Parameter("Source")]
          public DataSeries Source { get; set; }

          [Parameter("BandPeriods", DefaultValue = 14)]
          public int BandPeriod { get; set; }

          [Parameter("Std", DefaultValue = 14)]
          public int std { get; set; }

          [Parameter("MAType")]
          public MovingAverageType MAType { get; set; }

          //...

          private BollingerBands boll;

          //...

          protected override void OnStart()
          {
          boll = Indicators.BollingerBands(Source,BandPeriod,std,MAType);
          }
          protected override void OnBar()
          {
          Print("Current Main Bollinger Band's price is: {0}", boll.Main.LastValue);
          Print("Current Bottom Bollinger Band's price is: {0}", boll.Bottom.LastValue);
          Print("Current Top Bollinger Band's price is: {0}", boll.Top.LastValue);
          }
          //...
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          /// <summary>
            /// This sample cBot shows how to use the Bollinger Bands indicator
            ///
          </summary>
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class BollingerBandsSample : Robot
          {
          private double _volumeInUnits;

          private BollingerBands _bollingerBands;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          [Parameter("Source")]
          public DataSeries Source { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _bollingerBands = Indicators.BollingerBands(Source, 14, 2, MovingAverageType.Exponential);
          }

          protected override void OnBar()
          {
          if (Bars.LowPrices.Last(1) &lt;= _bollingerBands.Bottom.Last(1) &amp;&amp; Bars.LowPrices.Last(2) &gt; _bollingerBands.Bottom.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label);
          }
          else if (Bars.HighPrices.Last(1) &gt;= _bollingerBands.Top.Last(1) &amp;&amp; Bars.HighPrices.Last(2) &lt; _bollingerBands.Top.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface BollingerBands</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.BollingerBands.Main">
      <summary>
        Moving Average (Middle Bollinger Band).
      </summary>
      <value>The main result.</value>
      <example>
        <code>
          //...

          [Robot]
          public class SampleRobot : Robot

          //...

          [Parameter("Source")]
          public DataSeries Source { get; set; }

          [Parameter("BandPeriods", DefaultValue = 14)]
          public int BandPeriod { get; set; }

          [Parameter("Std", DefaultValue = 14)]
          public int std { get; set; }

          [Parameter("MAType")]
          public MovingAverageType MAType { get; set; }

          //...

          private BollingerBands boll;

          //...

          protected override void OnStart()
          {
          boll = Indicators.BollingerBands(Source,BandPeriod,std,MAType);
          }
          protected override void OnBar()
          {
          Print("Current Main Bollinger Band's price is: {0}", boll.Main.LastValue);
          }
          //...
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Main { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.BollingerBands.Top">
      <summary>
        Upper Bollinger Band.
      </summary>
      <value>The Upper Bollinger Band result.</value>
      <example>
        <code>
          //...

          [Robot]
          public class SampleRobot : Robot

          //...

          [Parameter("Source")]
          public DataSeries Source { get; set; }

          [Parameter("BandPeriods", DefaultValue = 14)]
          public int BandPeriod { get; set; }

          [Parameter("Std", DefaultValue = 14)]
          public int std { get; set; }

          [Parameter("MAType")]
          public MovingAverageType MAType { get; set; }

          //...

          private BollingerBands boll;

          //...

          protected override void OnStart()
          {
          boll = Indicators.BollingerBands(Source,BandPeriod,std,MAType);
          }
          protected override void OnBar()
          {
          Print("Current Top Bollinger Band's price is: {0}", boll.Top.LastValue);
          }
          //...
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Top { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.BollingerBands.Bottom">
      <summary>
        Lower Bollinger Band.
      </summary>
      <value>The Bottom Bollinger Band result.</value>
      <example>
        <code>
          //...
          [Parameter("Source")]
          public DataSeries Source { get; set; }
          [Parameter("BandPeriods", DefaultValue = 14)]
          public int BandPeriod { get; set; }
          [Parameter("Std", DefaultValue = 14)]
          public int std { get; set; }
          [Parameter("MAType")]
          public MovingAverageType MAType { get; set; }
          //...
          private BollingerBands boll;
          //...
          protected override void OnStart()
          {
          boll = Indicators.BollingerBands(Source,BandPeriod,std,MAType);
          }
          protected override void OnBar()
          {
          Print("Current Bottom Bollinger Band's price is: {0}", boll.Bottom.LastValue);
          }
          //...
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Bottom { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.CenterOfGravity">
      <summary>
        The Center of Gravity (COG) indicator is a technical indicator developed by John Ehlers in 2002, used to identify potential turning points in the price as early as possible.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;
          using cAlgo.API.Internals;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Center Of Gravity indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class CenterOfGravitySample : Robot
          {
          private double _volumeInUnits;

          private CenterOfGravity _centerOfGravity;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _centerOfGravity = Indicators.CenterOfGravity(10);
          }

          protected override void OnBar()
          {
          if (_centerOfGravity.Result.Last(1) &gt; _centerOfGravity.Lag.Last(1) &amp;&amp; _centerOfGravity.Result.Last(2) &lt;= _centerOfGravity.Lag.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_centerOfGravity.Result.Last(1) &lt; _centerOfGravity.Lag.Last(1) &amp;&amp; _centerOfGravity.Result.Last(2) &gt;= _centerOfGravity.Lag.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface CenterOfGravity</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.CenterOfGravity.Result">
      <summary>
        The COG line, by using it you can identify the support and resistance levels and have a more or less clear idea when the price starts moving in a different direction.
      </summary>
      <signature>
        <code>public IndicatorDataSeries Result { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.CenterOfGravity.Lag">
      <summary>
        The lag/signal/trigger line of COG
      </summary>
      <signature>
        <code>public IndicatorDataSeries Lag { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.ChaikinMoneyFlow">
      <summary>
        The Chaikin Money Flow Indicator measures the amount of Money Flow Volume over a specific period. The resulting indicator fluctuates above/below the zero line.
      </summary>
      <example>
        <code>
          private ChaikinMoneyFlow _chaikinMoneyFlow;

          [Parameter("Period", DefaultValue = 21)]
          public int Period { get; set; }

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          protected override void Initialize()
          {
          _chaikinMoneyFlow = Indicators.ChaikinMoneyFlow(Period);
          }
          public override void Calculate(int index)
          {
          // Display Result of Indicator
          Result[index] = _chaikinMoneyFlow.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Chaikin Money Flow indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChaikinMoneyFlowSample : Robot
          {
          private double _volumeInUnits;

          private ChaikinMoneyFlow _chaikinMoneyFlow;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _chaikinMoneyFlow = Indicators.ChaikinMoneyFlow(14);
          }

          protected override void OnBar()
          {
          if (_chaikinMoneyFlow.Result.Last(1) &gt; 0 &amp;&amp; _chaikinMoneyFlow.Result.Last(2) &lt;= 0)
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_chaikinMoneyFlow.Result.Last(1) &lt; 0 &amp;&amp; _chaikinMoneyFlow.Result.Last(2) &gt;= 0)
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface ChaikinMoneyFlow</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.ChaikinMoneyFlow.Result">
      <summary>
        The time series of the Chaikin Money Flow Indicator.
      </summary>
      <example>
        <code>
          private ChaikinMoneyFlow _chaikinMoneyFlow;

          [Parameter("Period", DefaultValue = 21)]
          public int Period { get; set; }

          protected override void OnStart()
          {
          _chaikinMoneyFlow = Indicators.ChaikinMoneyFlow(Period);
          }
          protected override void OnBar()
          {
          var currentValue = _chaikinMoneyFlow.Result.LastValue;
          //...
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.ChaikinVolatility">
      <summary>
        The Chaikin Volatility Indicator interface.
      </summary>
      <remarks>
        The Chaikin Volatility's main purpose is to confirm price trends and to forecast price reversals.
      </remarks>
      <example>
        <code>
          private ChaikinVolatility chaikinVolatility;

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          protected override void Initialize()
          {
          chaikinVolatility = Indicators.ChaikinVolatility(14, 10, MovingAverageType.Simple);
          }
          public override void Calculate(int index)
          {
          // Display Result of Indicator
          Result[index] = _chaikinVolatility.Result[index];

          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Chaikin Volatility indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ChaikinVolatilitySample : Robot
          {
          private double _volumeInUnits;

          private ChaikinVolatility _chaikinVolatility;

          private SimpleMovingAverage _simpleMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _chaikinVolatility = Indicators.ChaikinVolatility(14, 10, MovingAverageType.Simple);

          _simpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 9);
          }

          protected override void OnBar()
          {
          if (_chaikinVolatility.Result.Last(1) &gt; 0)
          {
          if (Bars.ClosePrices.Last(1) &gt; _simpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt; _simpleMovingAverage.Result.Last(2))
          {
          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (Bars.ClosePrices.Last(1) &lt; _simpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt; _simpleMovingAverage.Result.Last(2))
          {
          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          else
          {
          ClosePositions();
          }
          }

          private void ClosePositions()
          {
          foreach (var position in BotPositions)
          {
          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface ChaikinVolatility</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.ChaikinVolatility.Result">
      <summary>
        Chaikin Volatility Result Series.
      </summary>
      <value>The Output Series of ChaikinVolatility.</value>
      <example>
        <code>

          private ChaikinVolatility _chaikinVolatility;

          protected override void OnStart()
          {
          _chaikinVolatility = Indicators.ChaikinVolatility(Periods, _roc, MaType);
          }
          protected override void OnBar()
          {
          // Print to log
          Print("The Current Chaikin Volatility Value is: {0}",
          _chaikinVolatility.Result.LastValue);
          }

        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.CommodityChannelIndex">
      <summary>
        The Commodity Channel Index interface.
      </summary>
      <remarks>
        The Commodity Channel Index is used to determine overbought and oversold conditions relating to a symbol. The Commodity Channel Index can be used to forecast changes in price direction.
      </remarks>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Indicator
          {
          [Indicator]
          public class CommodityChannelIndexReferenceExample:Indicator
          {
          private CommodityChannelIndex _commodityChannelIndex;

          [Parameter("Periods", DefaultValue = 14)]
          public int Periods { get; set; }

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          protected override void Initialize()
          {
          _commodityChannelIndex = Indicators.CommodityChannelIndex(Periods);
          }
          public override void Calculate(int index)
          {
          // Display Result of Indicator
          Result[index] = _commodityChannelIndex.Result[index];
          }
          }
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Commodity Channel Index indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class CommodityChannelIndexSample : Robot
          {
          private double _volumeInUnits;

          private CommodityChannelIndex _commodityChannelIndex;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _commodityChannelIndex = Indicators.CommodityChannelIndex(14);
          }

          protected override void OnBar()
          {
          if (_commodityChannelIndex.Result.Last(1) &gt; 100 &amp;&amp; _commodityChannelIndex.Result.Last(2) &lt;= 100)
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_commodityChannelIndex.Result.Last(1) &lt; -100 &amp;&amp; _commodityChannelIndex.Result.Last(2) &gt;= -100)
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface CommodityChannelIndex</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.CommodityChannelIndex.Result">
      <summary>
        Commodity Channel Index Result Series.
      </summary>
      <value>The Output Series of CommodityChannelIndex.</value>
      <example>
        <code>
          //...

          private CommodityChannelIndex _commodityChannelIndex;

          //...

          protected override void OnStart()
          {
          _commodityChannelIndex = Indicators.CommodityChannelIndex(Periods);
          }
          protected override void OnBar()
          {
          // Print to log
          Print("The Current Commodity Channel Index is: {0}", _commodityChannelIndex.Result.LastValue);
          }

          //...
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.CyberCycle">
      <summary>
        The Cyber Cycles Oscillator is an indicator designed by John Ehlers, it is used for isolating the cycle component of the market from its trend counterpart.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;
          using cAlgo.API.Internals;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Cyber Cycle indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class CyberCycleSample : Robot
          {
          private double _volumeInUnits;

          private CyberCycle _cyberCycle;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _cyberCycle = Indicators.CyberCycle(0.07);
          }

          protected override void OnBar()
          {
          if (_cyberCycle.Cycle.Last(1) &gt; _cyberCycle.Trigger.Last(1) &amp;&amp; _cyberCycle.Cycle.Last(2) &lt;= _cyberCycle.Trigger.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_cyberCycle.Cycle.Last(1) &lt; _cyberCycle.Trigger.Last(1) &amp;&amp; _cyberCycle.Cycle.Last(2) &gt;= _cyberCycle.Trigger.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface CyberCycle</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.CyberCycle.Cycle">
      <summary>
        The Cyber Cycles Oscillator plot.
      </summary>
      <signature>
        <code>public IndicatorDataSeries Cycle { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.CyberCycle.Trigger">
      <summary>
        The CCO plot shifted one bar back; crossovers of the two plots suggest Buy/Sell signals.
      </summary>
      <signature>
        <code>public IndicatorDataSeries Trigger { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.DetrendedPriceOscillator">
      <summary>
        The Detrended Price Oscillator Indicator interface.
      </summary>
      <remarks>
        The Detrended Price Oscillator eliminates trends in prices, showing only absolute changes in price movement.
      </remarks>
      <example>
        <code>
          private DetrendedPriceOscillator _detrendedPriceOscillator;

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          protected override void Initialize()
          {
          _detrendedPriceOscillator = Indicators.DetrendedPriceOscillator(Source, Periods, MaType);
          }
          public override void Calculate(int index)
          {
          // Display Result of Indicator
          Result[index] = _detrendedPriceOscillator.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Detrended Price Oscillator indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class DetrendedPriceOscillatorSample : Robot
          {
          private double _volumeInUnits;

          private DetrendedPriceOscillator _detrendedPriceOscillator;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _detrendedPriceOscillator = Indicators.DetrendedPriceOscillator(Bars.ClosePrices, 14, MovingAverageType.Simple);
          }

          protected override void OnBar()
          {
          if (_detrendedPriceOscillator.Result.Last(1) &gt; 0 &amp;&amp; _detrendedPriceOscillator.Result.Last(2) &lt;= 0)
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_detrendedPriceOscillator.Result.Last(1) &lt; 0 &amp;&amp; _detrendedPriceOscillator.Result.Last(2) &gt;= 0)
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface DetrendedPriceOscillator</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.DetrendedPriceOscillator.Result">
      <summary>
        The resulting time series of Detrended Price Oscillator calculation.
      </summary>
      <example>
        <code>

          private _detrendedPriceOscillator _dpoFast;
          private _detrendedPriceOscillator _dpoSlow;

          protected override void OnStart()
          {
          _dpoFast = Indicators.DetrendedPriceOscillator(Source, PeriodFast, MaType);
          _dpoSlow = Indicators.DetrendedPriceOscillator(Source, PeriodSlow, MaType);
          }

          protected override void OnBar()
          {
          if(_dpoFast.Result.Count &lt; 1)
          return;

          int currentIndex = _dpoFast.Result.Count - 1;
          int prevIndex = currentIndex - 1;

          if (_dpoFast.Result[prevIndex] &gt; _dpoSlow.Result[prevIndex])
          {
          //Do something
          }
          }

        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.DirectionalMovementSystem">
      <summary>
        The Welles Wilder's Directional Movement Indicator calculation.
      </summary>
      <remarks>
        Welles Wilder's Directional Movement System uses three indicators to determine whether the market is trending, and in which direction, and sends trading signals accordingly. A buy signal occurs when +DI line crosses above -DI line. A sell signal occurs when -DI line crosses below +DI line.
      </remarks>
      <example>
        <code>
          //...

          [Indicator(IsOverlay = true)]
          public class SampleADX : Indicator
          {
          private DirectionalMovementSystem _dms;
          private double _dIplus;
          private double _dIminus;

          [Parameter("ADX Period", DefaultValue = 14)]
          public int Period { get; set; }

          [Output("Buy", PlotType = PlotType.Points, Color = Colors.Green, Thickness = 4)]
          public IndicatorDataSeries Buy { get; set; }

          [Output("Sell", PlotType = PlotType.Points, Color = Colors.Red, Thickness = 4)]
          public IndicatorDataSeries Sell { get; set; }

          protected override void Initialize()
          {
          _dms = Indicators.DirectionalMovementSystem(Period);
          }

          public override void Calculate(int index)
          {

          _dIplus = _dms.DIPlus[index];
          _dIminus = _dms.DIMinus[index];

          if (_dIminus &gt; _dIplus)
          {
          Sell[index] = MarketSeries.Close[index] + Symbol.PointSize*100;
          }
          else
          {
          Buy[index] = MarketSeries.Close[index] - Symbol.PointSize*100;
          }
          }
          }

          //...
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Directional Movement System indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class DirectionalMovementSystemSample : Robot
          {
          private double _volumeInUnits;

          private DirectionalMovementSystem _directionalMovementSystem;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _directionalMovementSystem = Indicators.DirectionalMovementSystem(20);
          }

          protected override void OnBar()
          {
          if (_directionalMovementSystem.ADX.Last(1) &lt; 25) return;

          if (_directionalMovementSystem.DIPlus.Last(1) &gt; _directionalMovementSystem.DIMinus.Last(1) &amp;&amp; _directionalMovementSystem.DIPlus.Last(2) &lt;= _directionalMovementSystem.DIMinus.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_directionalMovementSystem.DIPlus.Last(1) &lt; _directionalMovementSystem.DIMinus.Last(1) &amp;&amp; _directionalMovementSystem.DIPlus.Last(2) &gt;= _directionalMovementSystem.DIMinus.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface DirectionalMovementSystem</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.DirectionalMovementSystem.ADX">
      <summary>
        The Average Directional Movement Index (ADX) indicates whether the market is trending or ranging.
      </summary>
      <example>
        <code>
          //...

          [Robot]
          public class SampleRobot : Robot

          //...

          private DirectionalMovementSystem _dms;

          protected override void Initialize()
          {
          _dms = Indicators.DirectionalMovementSystem(Period);
          }
          //...

          protected override void OnBar()
          {
          Print("The Current Average Directional Movement Index is: {0}", _dms.ADX.LastValue);
          }

          //...
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries ADX { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.DirectionalMovementSystem.DIPlus">
      <summary>
        The Positive Direction Indicator (+DI) indicates upward trend movement.
      </summary>
      <example>
        <code>
          //...

          [Robot]
          public class SampleRobot : Robot

          //...

          private DirectionalMovementSystem _dms;

          protected override void Initialize()
          {
          _dms = Indicators.DirectionalMovementSystem(Period);
          }
          //...

          protected override void OnBar()
          {
          Print("The Current Positive Direction Indicator (+DI) is: {0}", _dms.DIPlus.LastValue);
          }

          //...
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries DIPlus { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.DirectionalMovementSystem.DIMinus">
      <summary>
        The Negative Direction Indicator (-DI) indicates downward trend movement.
      </summary>
      <example>
        <code>
          //...

          [Robot]
          public class SampleRobot : Robot

          //...

          private DirectionalMovementSystem _dms;

          protected override void Initialize()
          {
          _dms = Indicators.DirectionalMovementSystem(Period);
          }
          //...

          protected override void OnBar()
          {
          Print("The Current Negative Direction Indicator (-DI) is: {0}", _dms.DIMinus.LastValue);
          }

          //...
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries DIMinus { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.DonchianChannel">
      <summary>
        The Donchian channel is a volatility indicator forming a channel between the highest high and the lowest low of the chosen period.
      </summary>
      <remarks>
        The Donchian channel is mainly used for providing entry signals. A long is established when the price closes above the Donchian Channel. Conversely, if it closes below, then a short is established.
      </remarks>
      <example>
        <code>
          //...
          private DonchianChannel donchian;
          //...
          protected override void OnStart()
          {
          donchian = Indicators.DonchianChannel(Period);
          }
          protected override void OnBar()
          {
          Print("Top Value = {0}", donchian.Top.LastValue);
          Print("Middle Value = {0}", donchian.Middle.LastValue);
          Print("Bottom Value = {0}", donchian.Bottom.LastValue);
          //...
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          /// This sample cBot shows how to use the Donchian Channel indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class DonchianChannelSample : Robot
          {
          private double _volumeInUnits;

          private DonchianChannel _donchianChannel;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          [Parameter("Source")]
          public DataSeries Source { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _donchianChannel = Indicators.DonchianChannel(20);
          }

          protected override void OnBar()
          {
          if (Bars.LowPrices.Last(1) &lt;= _donchianChannel.Bottom.Last(1) &amp;&amp; Bars.LowPrices.Last(2) &gt; _donchianChannel.Bottom.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label);
          }
          else if (Bars.HighPrices.Last(1) &gt;= _donchianChannel.Top.Last(1) &amp;&amp; Bars.HighPrices.Last(2) &lt; _donchianChannel.Top.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface DonchianChannel</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.DonchianChannel.Top">
      <summary>
        Gets or sets the highest high of the period.
      </summary>
      <example>
        <code>
          //...
          private DonchianChannel donchian;
          //...
          Print("Top Value = {0}", donchian.Top.LastValue);
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Top { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.DonchianChannel.Middle">
      <summary>
        Gets or sets the middle of the highest high and the lowest low of the period.
      </summary>
      <example>
        <code>
          //...
          private DonchianChannel donchian;
          //...
          Print("Middle Value = {0}", donchian.Middle.LastValue);
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Middle { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.DonchianChannel.Bottom">
      <summary>
        Gets or sets the lowest low of the period.
      </summary>
      <example>
        <code>
          //...
          private DonchianChannel donchian;
          //...
          Print("Bottom Value = {0}", donchian.Bottom.LastValue);
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Bottom { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.EaseOfMovement">
      <summary>
        Ease of Movement is a volume based oscillator that measures the "ease" of price movement.
      </summary>
      <remarks>
        It quantifies the price/volume relationship. When the oscillator is close to zero it signifies that prices will not move easy. Conversely, prices are advancing or declining with relative ease when the oscillator is positive or negative away from zero.
      </remarks>
      <example>
        <code>
          private EaseOfMovement _easeOfMovement;

          [Parameter("Period", DefaultValue = 14)]
          public int Period { get; set; }

          [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
          public MovingAverageType MAType { get; set; }

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          protected override void Initialize()
          {
          _easeOfMovement = Indicators.EaseOfMovement(Period, MAType);
          }
          public override void Calculate(int index)
          {
          // Display Result of Indicator
          Result[index] = _easeOfMovement.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Ease Of Movement indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class EaseOfMovementSample : Robot
          {
          private double _volumeInUnits;

          private EaseOfMovement _easeOfMovement;

          private SimpleMovingAverage _simpleMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _easeOfMovement = Indicators.EaseOfMovement(14, MovingAverageType.Simple);

          _simpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 9);
          }

          protected override void OnBar()
          {
          if (_easeOfMovement.Result.Last(1) &gt; (Symbol.TickSize * 0.05))
          {
          if (Bars.ClosePrices.Last(1) &gt; _simpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt; _simpleMovingAverage.Result.Last(2))
          {
          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (Bars.ClosePrices.Last(1) &lt; _simpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt; _simpleMovingAverage.Result.Last(2))
          {
          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          else
          {
          ClosePositions();
          }
          }

          private void ClosePositions()
          {
          foreach (var position in BotPositions)
          {
          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface EaseOfMovement</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.EaseOfMovement.Result">
      <summary>
        The time series of the Ease Of Movement Indicator.
      </summary>
      <example>
        <code>
          private EaseOfMovement _easeOfMovement;

          [Parameter("Period", DefaultValue = 21)]
          public int Period { get; set; }

          [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
          public MovingAverageType MAType { get; set; }

          protected override void OnStart()
          {
          _easeOfMovement = Indicators.EaseOfMovement(Period, MAType);
          }
          protected override void OnBar()
          {
          var currentValue = _easeOfMovement.Result.LastValue;
          //...
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.ExponentialMovingAverage">
      <summary>
        The exponential moving average of the price data source over a period of time.
      </summary>
      <remarks>
        The exponential moving average is similar to the simple moving average, but applies more weight to more recent data. The weighting for each older price data decreases exponentially. Therefore the exponential moving average reacts faster to latest price changes than the simple moving average.
      </remarks>
      <example>
        <code>
          [Indicator]
          public class EmaExample : Indicator
          {
          private ExponentialMovingAverage _emaFast;
          private ExponentialMovingAverage _emaSlow;

          [Parameter("Data Source")]
          public DataSeries Price { get; set; }

          [Parameter("Slow Periods", DefaultValue = 10)]
          public int SlowPeriods { get; set; }

          [Parameter("Fast Periods", DefaultValue = 5)]
          public int FastPeriods { get; set; }

          protected override void Initialize()
          {
          // initialize new instances of ExponentialMovingAverage Indicator class
          _emaFast = Indicators.ExponentialMovingAverage(Price, FastPeriods);
          // _emaSlow is the exponential moving average of the emaFast
          _emaSlow = Indicators.ExponentialMovingAverage(_emaFast.Result, SlowPeriods);

          }

          public override void Calculate(int index)
          {
          // If the index is less than SlowPeriods don't calculate
          if(index &lt;= SlowPeriods)
          {
          return;
          }

          if(_emaFast.Result.HasCrossedAbove(_emaSlow.Result,0))
          {
          // Print the index at which the fast ema crossed the slow ema
          Print("Fast EMA Has Crossed Above at index = {0}", index);
          }
          }
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Exponential Moving Average indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ExponentialMovingAverageSample : Robot
          {
          private double _volumeInUnits;

          private ExponentialMovingAverage _fastExponentialMovingAverage;

          private ExponentialMovingAverage _slowExponentialMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _fastExponentialMovingAverage = Indicators.ExponentialMovingAverage(Bars.ClosePrices, 9);

          _slowExponentialMovingAverage = Indicators.ExponentialMovingAverage(Bars.ClosePrices, 20);
          }

          protected override void OnBar()
          {
          if (_fastExponentialMovingAverage.Result.Last(1) &gt; _slowExponentialMovingAverage.Result.Last(1) &amp;&amp; _fastExponentialMovingAverage.Result.Last(2) &lt; _slowExponentialMovingAverage.Result.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_fastExponentialMovingAverage.Result.Last(1) &lt; _slowExponentialMovingAverage.Result.Last(1) &amp;&amp; _fastExponentialMovingAverage.Result.Last(2) &gt; _slowExponentialMovingAverage.Result.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface ExponentialMovingAverage</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.FractalChaosBands">
      <summary>
        The Fractal Chaos Bands indicator attempts to determine whether or not the market is trending.
      </summary>
      <remarks>
        When the market is trending, the bands will have a slope, and if the market is not trending or choppy, the bands will flatten out. The flatter the bands, the stronger the signal that the market is choppy. The more steep the band slopes, the stronger the signal that the market trending or stable.
      </remarks>
      <example>
        <code>
          private FractalChaosBands _fractalChaosBands;

          protected override void Initialize()
          {
          _fractalChaosBands = Indicators.FractalChaosBands();
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Fractal Chaos Bands indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class FractalChaosBandsSample : Robot
          {
          private double _volumeInUnits;

          private FractalChaosBands _fractalChaosBands;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _fractalChaosBands = Indicators.FractalChaosBands();
          }

          protected override void OnBar()
          {
          if (Bars.ClosePrices.Last(1) &gt; _fractalChaosBands.High.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt;= _fractalChaosBands.High.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (Bars.ClosePrices.Last(1) &lt; _fractalChaosBands.Low.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt;= _fractalChaosBands.Low.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface FractalChaosBands</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.FractalChaosBands.High">
      <summary>
        The high limit of the chaos band.
      </summary>
      <example>
        <code>

          public override void Calculate(int index)
          {
          Print("Fractal Chaos Bands High = {0}", _fractalChaosBands.High[index]);
          }

        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries High { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.FractalChaosBands.Low">
      <summary>
        The low limit of the chaos band.
      </summary>
      <example>
        <code>
          public override void Calculate(int index)
          {
          Print("Fractal Chaos Bands Low = {0}", _fractalChaosBands.Low[index]);
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Low { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.Fractals">
      <summary>
        The fractal indicator is a trading indicator used in technical analysis that is used to identify potential trend reversal points in a market.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;
          using cAlgo.API.Internals;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Fractals indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class FractalsSample : Robot
          {
          private double _volumeInUnits;

          private Fractals _fractals;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _fractals = Indicators.Fractals(5);
          }

          protected override void OnBar()
          {
          if (!double.IsNaN(_fractals.DownFractal.Last(1)))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (!double.IsNaN(_fractals.UpFractal.Last(1)))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface Fractals</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.Fractals.UpFractal">
      <summary>
        The up fractals plot/output
      </summary>
      <signature>
        <code>public IndicatorDataSeries UpFractal { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.Fractals.DownFractal">
      <summary>
        The down fractals plot/output
      </summary>
      <signature>
        <code>public IndicatorDataSeries DownFractal { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.HighMinusLow">
      <summary>
        Difference between MarketSeries.High and MarketSeries.Low calculation for each index
      </summary>
      <remarks>
        This volatility indicator works by calculating the difference between the high and the low of each trendbar. The larger the difference between high and low, the more volatile the market during that period.
      </remarks>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Indicators
          {
          [Indicator]
          public class Example : Indicator
          {
          private HighMinusLow _highMinusLow;

          protected override void Initialize()
          {
          _highMinusLow = Indicators.HighMinusLow();
          }

          public override void Calculate(int index)
          {
          // same as MarketSeries.High[index] - MarketSeries.Low[index];
          Print("High minus Low result = {0}", _highMinusLow.Result[index]);
          }
          }
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          /// <summary>
            /// This sample cBot shows how to use the High Minus Low indicator
            ///
          </summary>
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class HighMinusLowSample : Robot
          {
          private double _volumeInUnits;

          private HighMinusLow _highMinusLow;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _highMinusLow = Indicators.HighMinusLow();
          }

          protected override void OnBar()
          {
          if (_highMinusLow.Result.Last(1) &lt; _highMinusLow.Result.Maximum(10)) return;

          if (Bars.ClosePrices.Last(1) &gt; Bars.OpenPrices.Last(1))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (Bars.ClosePrices.Last(1) &lt; Bars.OpenPrices.Last(1))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface HighMinusLow</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.HighMinusLow.Result">
      <summary>
        The resulting time series of the calculation.
      </summary>
      <example>
        <code>
          Print("High minus Low result = {0}", _highMinusLow.Result[index]);
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.HistoricalVolatility">
      <summary>
        The measured price fluctuation over a specified time period.
      </summary>
      <remarks>
        The higher the values of the indicator, the more volatile an instrument is.
      </remarks>
      <example>
        <code>
          private HistoricalVolatility historicalVolatility;

          private const int BarHistory = 252;

          [Parameter("Period", DefaultValue = 14)]
          public int Period { get; set; }

          protected override void Initialize()
          {
          historicalVolatility = Indicators.HistoricalVolatility
          (MarketSeries.Close, Period, BarHistory);
          }

        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Historical Volatility indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class HistoricalVolatilitySample : Robot
          {
          private double _volumeInUnits;

          private HistoricalVolatility _historicalVolatility;

          private SimpleMovingAverage _simpleMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _historicalVolatility = Indicators.HistoricalVolatility(Bars.ClosePrices, 14, 252);

          _simpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 9);
          }

          protected override void OnBar()
          {
          if (_historicalVolatility.Result.Last(1) &lt; _historicalVolatility.Result.Maximum(14)) return;

          if (Bars.ClosePrices.Last(1) &gt; _simpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt; _simpleMovingAverage.Result.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (Bars.ClosePrices.Last(1) &lt; _simpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt; _simpleMovingAverage.Result.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface HistoricalVolatility</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.HistoricalVolatility.Result">
      <summary>
        The result of the HistoricalVolatility Indicator
      </summary>
      <example>
        <code>
          public override void Calculate(int index)
          {
          Print("Historical Volatility = {0}",
          _historicalVolatility.Result[index]);
          }

        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.HullMovingAverage">
      <summary>
        The Hull Moving Average (HMA) is a directional trend indicator. It captures the current state of the market and uses recent price action to determine if conditions are bullish or bearish relative to historical data.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Hull Moving Average indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class HullMovingAverageSample : Robot
          {
          private double _volumeInUnits;

          private HullMovingAverage _fastHull;

          private HullMovingAverage _slowHull;

          [Parameter("Source", Group = "Fast MA")]
          public DataSeries FastMaSource { get; set; }

          [Parameter("Period", DefaultValue = 9, Group = "Fast MA")]
          public int FastMaPeriod { get; set; }

          [Parameter("Source", Group = "Slow MA")]
          public DataSeries SlowMaSource { get; set; }

          [Parameter("Period", DefaultValue = 20, Group = "Slow MA")]
          public int SlowMaPeriod { get; set; }

          [Parameter("Volume (Lots)", DefaultValue = 0.01, Group = "Trade")]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10, Group = "Trade")]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10, Group = "Trade")]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample", Group = "Trade")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _fastHull = Indicators.HullMovingAverage(FastMaSource, FastMaPeriod);
          _slowHull = Indicators.HullMovingAverage(SlowMaSource, SlowMaPeriod);
          }

          protected override void OnBar()
          {
          if (_fastHull.Result.HasCrossedAbove(_slowHull.Result, 0))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_fastHull.Result.HasCrossedBelow(_slowHull.Result, 0))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface HullMovingAverage</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.IchimokuKinkoHyo">
      <summary>
        Ichimoku Kinko Hyo Indicator.
      </summary>
      <remarks>
        Ichimoku is a moving average based trend identification system. It contains more data points than standard candlestick charts and thus provides a clearer picture of potential price action.
      </remarks>
      <example>
        <code>
          //...
          private IchimokuKinkoHyo ichimokuKinkoHyo;
          //...
          protected override void OnStart()
          {
          ichimokuKinkoHyo = Indicators.IchimokuKinkoHyo
          (tenkanSenPeriods, kijunSenPeriods, senkouSpanBPeriods);
          }
          protected override void OnBar()
          {
          Print("ChikouSpan Value = {0}", ichimokuKinkoHyo.ChikouSpan.LastValue);
          Print("KijunSen Value = {0}", ichimokuKinkoHyo.KijunSen.LastValue);
          Print("SenkouSpanA Value = {0}", ichimokuKinkoHyo.SenkouSpanA.LastValue);
          Print("SenkouSpanB Value = {0}", ichimokuKinkoHyo.SenkouSpanB.LastValue);
          Print("TenkanSen Value = {0}", ichimokuKinkoHyo.TenkanSen.LastValue);

          //...
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          /// <summary>
            /// This sample cBot shows how to use the Ichimoku Kinko Hyo indicator
            ///
          </summary>
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class IchimokuKinkoHyoSample : Robot
          {
          private double _volumeInUnits;

          private IchimokuKinkoHyo _ichimokuKinkoHyo;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _ichimokuKinkoHyo = Indicators.IchimokuKinkoHyo(9, 26, 52);
          }

          protected override void OnBar()
          {
          if (Bars.ClosePrices.Last(1) &gt; _ichimokuKinkoHyo.SenkouSpanB.Last(1))
          {
          ClosePositions(TradeType.Sell);

          if (_ichimokuKinkoHyo.TenkanSen.Last(1) &gt; _ichimokuKinkoHyo.KijunSen.Last(1) &amp;&amp; _ichimokuKinkoHyo.TenkanSen.Last(2) &lt;= _ichimokuKinkoHyo.KijunSen.Last(2))
          {
          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          else if (Bars.ClosePrices.Last(1) &lt; _ichimokuKinkoHyo.SenkouSpanA.Last(1))
          {
          ClosePositions(TradeType.Buy);

          if (_ichimokuKinkoHyo.TenkanSen.Last(1) &lt; _ichimokuKinkoHyo.KijunSen.Last(1) &amp;&amp; _ichimokuKinkoHyo.TenkanSen.Last(2) &gt;= _ichimokuKinkoHyo.KijunSen.Last(2))
          {
          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface IchimokuKinkoHyo</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.IchimokuKinkoHyo.KijunSen">
      <summary>
        This is a confirmation line, a support-resistance line, and can be used as a trailing stop line.
      </summary>
      <example>
        <code>
          Print("KijunSen Value = {0}", ichimokuKinkoHyo.KijunSen.LastValue);
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries KijunSen { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.IchimokuKinkoHyo.TenkanSen">
      <summary>
        It is primarily used as a signal line and a minor support-resistance line.
      </summary>
      <example>
        <code>
          Print("TenkanSen Value = {0}", ichimokuKinkoHyo.TenkanSen.LastValue);
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries TenkanSen { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.IchimokuKinkoHyo.ChikouSpan">
      <summary>
        It is used as a support-resistance aid.
      </summary>
      <example>
        <code>
          Print("ChikouSpan Value = {0}", ichimokuKinkoHyo.ChikouSpan.LastValue);
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries ChikouSpan { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.IchimokuKinkoHyo.SenkouSpanA">
      <summary>
        Leading span 1, this line forms one edge of the kumo, or cloud.
        If the price is above the Senkou span, the top line serves as the first support level while the bottom line serves as the second support level.
      </summary>
      <example>
        <code>
          Print("SenkouSpanA Value = {0}", ichimokuKinkoHyo.SenkouSpanA.LastValue);
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries SenkouSpanA { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.IchimokuKinkoHyo.SenkouSpanB">
      <summary>
        Leading span 2, this line forms the other edge of the kumo.
      </summary>
      <example>
        <code>
          Print("SenkouSpanB Value = {0}", ichimokuKinkoHyo.SenkouSpanB.LastValue);
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries SenkouSpanB { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.KeltnerChannels">
      <summary>
        The Keltner Channels are volatility-based envelopes set above and below an exponential moving average.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Keltner Channels indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class KeltnerChannelsSample : Robot
          {
          private double _volumeInUnits;

          private KeltnerChannels _keltnerChannels;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          [Parameter("Source")]
          public DataSeries Source { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _keltnerChannels = Indicators.KeltnerChannels(20, MovingAverageType.Exponential, 10, MovingAverageType.Simple, 2);
          }

          protected override void OnBar()
          {
          if (Bars.LowPrices.Last(1) &lt;= _keltnerChannels.Bottom.Last(1) &amp;&amp; Bars.LowPrices.Last(2) &gt; _keltnerChannels.Bottom.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label);
          }
          else if (Bars.HighPrices.Last(1) &gt;= _keltnerChannels.Top.Last(1) &amp;&amp; Bars.HighPrices.Last(2) &lt; _keltnerChannels.Top.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface KeltnerChannels</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.KeltnerChannels.Main">
      <summary>
        Moving Average Line
      </summary>
      <signature>
        <code>public IndicatorDataSeries Main { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.KeltnerChannels.Top">
      <summary>
        Moving Average + ATR * BandDistance
      </summary>
      <signature>
        <code>public IndicatorDataSeries Top { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.KeltnerChannels.Bottom">
      <summary>
        Moving Average - ATR * BandDistance
      </summary>
      <signature>
        <code>public IndicatorDataSeries Bottom { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.LinearRegressionForecast">
      <summary>
        Linear Regression Forecast is one of the indicators calculated by the Linear Regression approach.
      </summary>
      <remarks>
        The Linear Regression Forecast is used for identifying trends and trend direction, and shows the statistical trend of a financial instrument over a specified time period. The calculation uses a Linear Regression Line.
      </remarks>
      <example>
        <code>

          private LinearRegressionForecast _linearRegressionForecast;

          [Parameter("Period", DefaultValue = 14)]
          public int Period { get; set; }

          protected override void Initialize()
          {
          // initialize a new instance of LinearRegressionForecastIndicator class
          _linearRegressionForecast = Indicators.LinearRegressionForecast(MarketSeries.Close, Period);
          }

        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;
          using cAlgo.API.Internals;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Linear Regression Forecast indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class LinearRegressionForecastSample : Robot
          {
          private double _volumeInUnits;

          private LinearRegressionForecast _linearRegressionForecast;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _linearRegressionForecast = Indicators.LinearRegressionForecast(Bars.ClosePrices, 20);
          }

          protected override void OnBar()
          {
          if (Bars.ClosePrices.Last(1) &gt; _linearRegressionForecast.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt;= _linearRegressionForecast.Result.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (Bars.ClosePrices.Last(1) &lt; _linearRegressionForecast.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt;= _linearRegressionForecast.Result.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface LinearRegressionForecast</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.LinearRegressionForecast.Result">
      <summary>
        The Result Series of the Linear Regression Forecast Indicator
      </summary>
      <example>
        <code>
          public override void Calculate(int index)
          {
          // Print the current result of the Linear Regression Forecast to the log
          Print("Linear Regression Forecast at the current index is = {0}", _linearRegressionForecast.Result[index]);
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.LinearRegressionIntercept">
      <summary>
        Linear Regression Intercept is one of the indicators calculated by the Linear Regression approach.
      </summary>
      <remarks>
        Linear regression is a statistical tool used to predict the future from past data.
      </remarks>
      <example>
        <code>
          [Parameter("Period", DefaultValue = 14)]
          public int Period { get; set; }

          protected override void OnStart()
          {
          // initialize a new instance of LinearRegressionIntercept indicator class
          _linearRegressionIntercept = Indicators.LinearRegressionIntercept(MarketSeries.Close, Period);
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;
          using cAlgo.API.Internals;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Linear Regression Intercept indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class LinearRegressionInterceptSample : Robot
          {
          private double _volumeInUnits;

          private LinearRegressionIntercept _linearRegressionIntercept;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _linearRegressionIntercept = Indicators.LinearRegressionIntercept(Bars.ClosePrices, 20);
          }

          protected override void OnBar()
          {
          if (Bars.ClosePrices.Last(1) &gt; _linearRegressionIntercept.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt;= _linearRegressionIntercept.Result.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (Bars.ClosePrices.Last(1) &lt; _linearRegressionIntercept.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt;= _linearRegressionIntercept.Result.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface LinearRegressionIntercept</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.LinearRegressionIntercept.Result">
      <summary>
        The Result Series of the Linear Regression Intercept Indicator
      </summary>
      <example>
        <code>

          public override void Calculate(int index)
          {
          // Result of _linearRegressionIntercept at the current index
          double result = _linearRegressionIntercept.Result[index];
          // Print the current result to the log
          Print("Linear Regression Intercept at the current index is = {0}", result);
          }

        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.LinearRegressionRSquared">
      <summary>
        The Linear Regression R Squared is used to confirm the strength of the market trend.
      </summary>
      <remarks>
        A higher value of R-Squared means that the stronger the trend.
      </remarks>
      <example>
        <code>
          private LinearRegressionRSquared rSquared;

          protected override void OnStart()
          {
          // initialize rSquared indicator
          rSquared = Indicators.LinearRegressionRSquared(Source, Period);
          }
          protected override void OnTick()
          {
          Print("{0}", rSquared.Result.LastValue);
          }

        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;
          using cAlgo.API.Internals;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Linear Regression R Squared indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class LinearRegressionRSquaredSample : Robot
          {
          private double _volumeInUnits;

          private LinearRegressionRSquared _linearRegressionRSquared;

          private SimpleMovingAverage _simpleMovingAverage;

          private ExponentialMovingAverage _exponentialMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _linearRegressionRSquared = Indicators.LinearRegressionRSquared(Bars.ClosePrices, 20);

          _simpleMovingAverage = Indicators.SimpleMovingAverage(_linearRegressionRSquared.Result, 10);

          _exponentialMovingAverage = Indicators.ExponentialMovingAverage(Bars.ClosePrices, 20);
          }

          protected override void OnBar()
          {
          if (Bars.ClosePrices.Last(1) &gt; _exponentialMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt;= _exponentialMovingAverage.Result.Last(2))
          {
          ClosePositions(TradeType.Sell);

          if (_linearRegressionRSquared.Result.Last(1) &gt; _simpleMovingAverage.Result.Last(1))
          {
          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          else if (Bars.ClosePrices.Last(1) &lt; _exponentialMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt;= _exponentialMovingAverage.Result.Last(2))
          {
          ClosePositions(TradeType.Buy);

          if (_linearRegressionRSquared.Result.Last(1) &gt; _simpleMovingAverage.Result.Last(1))
          {
          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface LinearRegressionRSquared</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.LinearRegressionRSquared.Result">
      <summary>
        The Result Series of the Linear Regression R Squared indicator.
      </summary>
      <example>
        <code>
          private LinearRegressionRSquared rSquared;

          protected override void OnStart()
          {
          // initialize rSquared indicator
          rSquared = Indicators.LinearRegressionRSquared(MarketSeries.Close, 9);
          }
          protected override void OnTick()
          {
          // Print the last value of rSquared indicator to the log
          Print("The current value of R Squared is {0}", rSquared.Result.LastValue);
          }

        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.LinearRegressionSlope">
      <summary>
        The calculation of the Linear Regression Slope Indicator.
      </summary>
      <remarks>
        Linear Regression Slope refers to the slope of the Least Squares Line. This slope represents how prices change per unit of time.
      </remarks>
      <example>
        <code>
          private LinearRegressionSlope _lrSlope;
          protected override void Initialize()
          {
          _lrSlope = Indicators.LinearRegressionSlope(MarketSeries.Close, 14);
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;
          using cAlgo.API.Internals;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Linear Regression Slope indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class LinearRegressionSlopeSample : Robot
          {
          private double _volumeInUnits;

          private LinearRegressionSlope _linearRegressionSlope;

          private SimpleMovingAverage _simpleMovingAverage;

          private ExponentialMovingAverage _exponentialMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _linearRegressionSlope = Indicators.LinearRegressionSlope(Bars.ClosePrices, 20);

          _simpleMovingAverage = Indicators.SimpleMovingAverage(_linearRegressionSlope.Result, 10);

          _exponentialMovingAverage = Indicators.ExponentialMovingAverage(Bars.ClosePrices, 20);
          }

          protected override void OnBar()
          {
          if (Bars.ClosePrices.Last(1) &gt; _exponentialMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt;= _exponentialMovingAverage.Result.Last(2))
          {
          ClosePositions(TradeType.Sell);

          if (_linearRegressionSlope.Result.Last(1) &gt; _simpleMovingAverage.Result.Last(1))
          {
          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          else if (Bars.ClosePrices.Last(1) &lt; _exponentialMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt;= _exponentialMovingAverage.Result.Last(2))
          {
          ClosePositions(TradeType.Buy);

          if (_linearRegressionSlope.Result.Last(1) &gt; _simpleMovingAverage.Result.Last(1))
          {
          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface LinearRegressionSlope</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.LinearRegressionSlope.Result">
      <summary>
        The resulting time series of the calculation of the Linear Regression Slope indicator.
      </summary>
      <example>
        <code>
          public override void Calculate(int index)
          {
          double lr = _lrSlope.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.MacdCrossOver">
      <summary>
        Calculates the MACD (Moving Average Convergence/Divergence) indicator.
      </summary>
      <remarks>
        MACD (Moving Average Convergence/Divergence) is used to spot changes in the strength, direction, momentum, and duration of a trend.
      </remarks>
      <example>
        <code>
          //...
          private MacdCrossOver _macdCrossOver;

          [Output("MACD")]
          public IndicatorDataSeries Macd { get; set; }

          protected override void Initialize()
          {
          _macdCrossOver = Indicators.MacdCrossOver(LongCycle, ShortCycle, Period);
          //...
          }

          public override void Calculate(int index)
          {
          Macd[index] = _macdCrossOver.MACD[index];
          //...
          }

        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;
          using cAlgo.API.Internals;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the MACD Cross Over indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class MacdCrossOverSample : Robot
          {
          private double _volumeInUnits;

          private MacdCrossOver _macdCrossOver;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _macdCrossOver = Indicators.MacdCrossOver(Bars.ClosePrices, 26, 12, 9);
          }

          protected override void OnBar()
          {
          if (_macdCrossOver.MACD.Last(1) &gt; _macdCrossOver.Signal.Last(1) &amp;&amp; _macdCrossOver.MACD.Last(2) &lt;= _macdCrossOver.Signal.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_macdCrossOver.MACD.Last(1) &lt; _macdCrossOver.Signal.Last(1) &amp;&amp; _macdCrossOver.MACD.Last(2) &gt;= _macdCrossOver.Signal.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface MacdCrossOver</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.MacdCrossOver.Histogram">
      <summary>
        Gets the Histogram (bar graph).
      </summary>
      <remarks>
        The histogram of MACD: difference between the blue and red lines.
      </remarks>
      <example>
        <code>
          //...
          private MacdCrossOver _macdCrossOver;

          [Output("Histogram")]
          public IndicatorDataSeries Histogram { get; set; }

          protected override void Initialize()
          {
          _macdCrossOver = Indicators.MacdCrossOver(LongCycle, ShortCycle, Period);
          }

          public override void Calculate(int index)
          {
          Histogram[index] = _macdCrossOver.Histogram[index];
          //...
          }

        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Histogram { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.MacdCrossOver.MACD">
      <summary>
        Gets the main MACD line (blue line).
      </summary>
      <remarks>
        MACD line: difference between the 12 and 26 days EMAs
      </remarks>
      <example>
        <code>
          //...
          private MacdCrossOver _macdCrossOver;

          [Output("MACD")]
          public IndicatorDataSeries Macd { get; set; }

          protected override void Initialize()
          {
          _macdCrossOver = Indicators.MacdCrossOver(LongCycle, ShortCycle, Period);
          }

          public override void Calculate(int index)
          {
          Macd[index] = _macdCrossOver.MACD[index];
          //...
          }

        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries MACD { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.MacdCrossOver.Signal">
      <summary>
        Gets the Signal line of MACD (red line).
      </summary>
      <remarks>
        Signal: 9 day EMA of the blue line
      </remarks>
      <example>
        <code>
          //...
          private MacdCrossOver _macdCrossOver;

          [Output("Signal")]
          public IndicatorDataSeries Signal { get; set; }

          protected override void Initialize()
          {
          _macdCrossOver = Indicators.MacdCrossOver(LongCycle, ShortCycle, Period);
          }

          public override void Calculate(int index)
          {
          Signal[index] = _macdCrossOver.Signal[index];
          //...
          }

        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Signal { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.MacdHistogram">
      <summary>
        The calculation of the MACD Histogram.
      </summary>
      <remarks>
        MACD (moving average convergence/divergence) is used to spot changes in the strength, direction, momentum, and duration of a trend.
      </remarks>
      <example>
        <code>
          //...
          private MacdHistogram macd;
          //...
          macd = Indicators.MacdHistogram(LongCycle, ShortCycle, Period);
          //...
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;
          using cAlgo.API.Internals;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the MACD Histogram indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class MacdHistogramSample : Robot
          {
          private double _volumeInUnits;

          private MacdHistogram _macdHistogram;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _macdHistogram = Indicators.MacdHistogram(Bars.ClosePrices, 26, 12, 9);
          }

          protected override void OnBar()
          {
          if (_macdHistogram.Histogram.Last(1) &gt; 0 &amp;&amp; _macdHistogram.Histogram.Last(2) &lt;= 0)
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_macdHistogram.Histogram.Last(1) &lt; 0 &amp;&amp; _macdHistogram.Histogram.Last(2) &gt;= 0)
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface MacdHistogram</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.MacdHistogram.Histogram">
      <summary>
        The histogram (bar graph). The difference between the short and long cycles.
      </summary>
      <example>
        <code>
          //...
          private MacdHistogram macd;
          macd = Indicators.MacdHistogram(LongCycle, ShortCycle, Period);
          //...
          public override void Calculate(int index)
          {
          double macdHistogramResult = macd.Histogram[index];
          //...
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Histogram { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.MacdHistogram.Signal">
      <summary>
        The signal (red line). The exponential moving average of the MACD histogram.
      </summary>
      <example>
        <code>
          //...
          private MacdHistogram macd;
          macd = Indicators.MacdHistogram(LongCycle, ShortCycle, Period);
          //...
          public override void Calculate(int index)
          {
          double macdSignalResult = macd.Signal[index];
          //...
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Signal { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.MassIndex">
      <summary>
        The Mass Index Indicator interface.
      </summary>
      <remarks>
        The Mass Index Indicator can be a great tool to identify future price reversal. It is expected for a reversal to occur when Mass index is rising.
      </remarks>
      <example>
        <code>
          private MassIndex _massIndex;
          protected override void Initialize()
          {
          _massIndex = Indicators.MassIndex(14);
          }

          public override void Calculate(int index)
          {
          double massIndex = _massIndex.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Mass Index indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class MassIndexSample : Robot
          {
          private double _volumeInUnits;

          private MassIndex _massIndex;

          private SimpleMovingAverage _simpleMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _massIndex = Indicators.MassIndex(9);

          _simpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 20);
          }

          protected override void OnBar()
          {
          if (_massIndex.Result.Last(1) &lt; 9) return;

          if (Bars.ClosePrices.Last(1) &gt; _simpleMovingAverage.Result.Last(1))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (Bars.ClosePrices.Last(1) &lt; _simpleMovingAverage.Result.Last(1))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface MassIndex</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.MassIndex.Result">
      <summary>
        Gets the resulting series of the calculation of the Mass Index indicator.
      </summary>
      <example>
        <code>
          public override void Calculate(int index)
          {
          double massIndex = _massIndex.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.MedianPrice">
      <summary>
        A Median Price is an average of one period’s high and low values.
      </summary>
      <remarks>
        A Median Price is often used as a component for calculating other indicators.
      </remarks>
      <example>
        <code>
          private MedianPrice _price;
          protected override void Initialize()
          {
          _price = Indicators.MedianPrice();
          }
          public override void Calculate(int index)
          {
          double price = _price.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Momentum Oscillator indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class MedianPriceSample : Robot
          {
          private double _volumeInUnits;

          private MedianPrice _medianPrice;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _medianPrice = Indicators.MedianPrice();
          }

          protected override void OnBar()
          {
          if (Bars.ClosePrices.Last(1) &gt; _medianPrice.Result.Last(1))
          {
          ClosePositions(TradeType.Sell);

          if (BotPositions.Length == 0)
          {
          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          else if (Bars.ClosePrices.Last(1) &lt; _medianPrice.Result.Last(1))
          {
          ClosePositions(TradeType.Buy);

          if (BotPositions.Length == 0)
          {
          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface MedianPrice</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.MedianPrice.Result">
      <summary>
        The resulting series of the calculation of Median Price
      </summary>
      <example>
        <code>
          private MedianPrice _price;
          protected override void Initialize()
          {
          _price = Indicators.MedianPrice();
          }
          public override void Calculate(int index)
          {
          double price = _price.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.MomentumOscillator">
      <summary>
        The calculation of the Momentum Oscillator indicator.
      </summary>
      <remarks>
        Momentum measures the rate of price change over time and provides a leading indicator of changes in trend. It gives signals before price action happens. The momentum oscillator is unbounded i.e. there is no maximum or minimum value. It is calculated as the closing price now minus the closing price n periods ago.
      </remarks>
      <example>
        <code>
          private MomentumOscillator _momentum;
          protected override void Initialize()
          {
          _momentum = Indicators.MomentumOscillator(MarketSeries.Close, 14);
          }

          public override void Calculate(int index)
          {
          double momentum = _momentum.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Momentum Oscillator indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class MomentumOscillatorSample : Robot
          {
          private double _volumeInUnits;

          private MomentumOscillator _momentumOscillator;

          private SimpleMovingAverage _simpleMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _momentumOscillator = Indicators.MomentumOscillator(Bars.ClosePrices, 14);

          _simpleMovingAverage = Indicators.SimpleMovingAverage(_momentumOscillator.Result, 14);
          }

          protected override void OnBar()
          {
          if (_momentumOscillator.Result.Last(1) &gt; _simpleMovingAverage.Result.Last(1))
          {
          ClosePositions(TradeType.Sell);

          if (_momentumOscillator.Result.Last(2) &lt;= _simpleMovingAverage.Result.Last(2))
          {
          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          else if (_momentumOscillator.Result.Last(1) &lt; _simpleMovingAverage.Result.Last(1))
          {
          ClosePositions(TradeType.Buy);

          if (_momentumOscillator.Result.Last(2) &gt;= _simpleMovingAverage.Result.Last(2))
          {
          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface MomentumOscillator</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.MomentumOscillator.Result">
      <summary>
        Gets the resulting series of the Momentum Oscillator indicator calculation.
      </summary>
      <example>
        <code>
          public override void Calculate(int index)
          {
          double momentum = _momentum.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.MoneyFlowIndex">
      <summary>
        The Money Flow Index is an oscillator that calculates buying and selling pressure using typical price and volume. It oscillates between zero and one hundred. It is typically used to identify trend reversals and price extremes.
      </summary>
      <example>
        <code>
          private MoneyFlowIndex _moneyFlow;

          [Parameter("Period", DefaultValue = 14)]
          public int Period { get; set; }

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          protected override void Initialize()
          {
          _moneyFlow = Indicators.MoneyFlowIndex(Period);
          }
          public override void Calculate(int index)
          {
          // Display Result of Indicator
          Result[index] = _moneyFlow.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Money Flow Index indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class MoneyFlowIndexSample : Robot
          {
          private double _volumeInUnits;

          private MoneyFlowIndex _moneyFlowIndex;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _moneyFlowIndex = Indicators.MoneyFlowIndex(14);
          }

          protected override void OnBar()
          {
          if (_moneyFlowIndex.Result.Last(1) &gt; 80)
          {
          ClosePositions(TradeType.Buy);

          if (BotPositions.Length == 0)
          {
          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          else if (_moneyFlowIndex.Result.Last(1) &lt; 20)
          {
          ClosePositions(TradeType.Sell);

          if (BotPositions.Length == 0)
          {
          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface MoneyFlowIndex</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.MoneyFlowIndex.Result">
      <summary>
        The time series of the Money Flow Index indicator.
      </summary>
      <example>
        <code>
          private MoneyFlowIndex _moneyFlow;

          [Parameter("Period", DefaultValue = 21)]
          public int Period { get; set; }

          protected override void OnStart()
          {
          _moneyFlow = Indicators.MoneyFlowIndex(Period);
          }
          protected override void OnBar()
          {
          var currentValue = _moneyFlow.Result.LastValue;
          //...
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.MovingAverage">
      <summary>
        The Moving Average Indicator calculation.
      </summary>
      <remarks>
        Used to smooth the price data to form a trend following indicator
      </remarks>
      <example>
        <code>
          private MovingAverage ma;

          protected override void Initialize()
          {
          ma = Indicators.MovingAverage(Source, MAPeriods, MAType);
          }
          //...
          public override void Calculate(int index)
          {
          MA[index] = ma.Result[index];
          //...
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Moving Average indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class MovingAverageSample : Robot
          {
          private double _volumeInUnits;

          private MovingAverage _fastMa;

          private MovingAverage _slowMa;

          [Parameter("Source", Group = "Fast MA")]
          public DataSeries FastMaSource { get; set; }

          [Parameter("Period", DefaultValue = 9, Group = "Fast MA")]
          public int FastMaPeriod { get; set; }

          [Parameter("Type", DefaultValue = MovingAverageType.Exponential, Group = "Fast MA")]
          public MovingAverageType FastMaType { get; set; }

          [Parameter("Source", Group = "Slow MA")]
          public DataSeries SlowMaSource { get; set; }

          [Parameter("Period", DefaultValue = 20, Group = "Slow MA")]
          public int SlowMaPeriod { get; set; }

          [Parameter("Type", DefaultValue = MovingAverageType.Exponential, Group = "Slow MA")]
          public MovingAverageType SlowMaType { get; set; }

          [Parameter("Volume (Lots)", DefaultValue = 0.01, Group = "Trade")]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10, Group = "Trade")]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10, Group = "Trade")]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample", Group = "Trade")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _fastMa = Indicators.MovingAverage(FastMaSource, FastMaPeriod, FastMaType);
          _slowMa = Indicators.MovingAverage(SlowMaSource, SlowMaPeriod, SlowMaType);
          }

          protected override void OnBar()
          {
          if (_fastMa.Result.HasCrossedAbove(_slowMa.Result, 0))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_fastMa.Result.HasCrossedBelow(_slowMa.Result, 0))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface MovingAverage</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.MovingAverage.Result">
      <summary>
        The resulting time series of the calculation.
      </summary>
      <example>
        <code>
          //...

          [Output]
          public IndicatorDataSeries Result { get; set; }

          private MovingAverage ma;

          protected override void Initialize()
          {
          ma = Indicators.MovingAverage(Source, MAPeriods, MAType);
          }
          public override void Calculate(int index)
          {
          Result[index] = ma.Result[index];

          //...
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.NegativeVolumeIndex">
      <summary>
        Dysart's Negative Volume Index assumes that the smart money is active on days when volume decreases and the not-so-smart money is active on days when volume increases (measured by the Positive Volume Index).
      </summary>
      <example>
        <code>
          private NegativeVolumeIndex _negativeVolume;

          [Parameter]
          public DataSeries Source { get; set; }

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          protected override void Initialize()
          {
          _negativeVolume = Indicators.NegativeVolumeIndex(Source);
          }
          public override void Calculate(int index)
          {
          // Display Result of Indicator
          Result[index] = _negativeVolume.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Positive/Negative Volume Index indicators
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class VolumeIndexSample : Robot
          {
          private double _volumeInUnits;

          private PositiveVolumeIndex _positiveVolumeIndex;
          private NegativeVolumeIndex _negativeVolumeIndex;

          private SimpleMovingAverage _simpleMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _positiveVolumeIndex = Indicators.PositiveVolumeIndex(Bars.ClosePrices);
          _negativeVolumeIndex = Indicators.NegativeVolumeIndex(Bars.ClosePrices);

          _simpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 20);
          }

          protected override void OnBar()
          {
          if (Bars.ClosePrices.Last(1) &gt; _simpleMovingAverage.Result.Last(1))
          {
          ClosePositions(TradeType.Sell);

          if (BotPositions.Length == 0 &amp;&amp; _negativeVolumeIndex.Result.Last(1) &gt; _positiveVolumeIndex.Result.Last(1))
          {
          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          else if (Bars.ClosePrices.Last(1) &lt; _simpleMovingAverage.Result.Last(1))
          {
          ClosePositions(TradeType.Buy);

          if (BotPositions.Length == 0 &amp;&amp; _negativeVolumeIndex.Result.Last(1) &gt; _positiveVolumeIndex.Result.Last(1))
          {
          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface NegativeVolumeIndex</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.NegativeVolumeIndex.Result">
      <summary>
        The time series of the Negative Volume Index indicator.
      </summary>
      <example>
        <code>
          private NegativeVolumeIndex _negativeVolume;

          [Parameter]
          public DataSeries Source { get; set; }

          protected override void OnStart()
          {
          _negativeVolume = Indicators.NegativeVolumeIndex(Source);
          }
          protected override void OnBar()
          {
          var currentValue = _negativeVolume.Result.LastValue;
          //...
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.OnBalanceVolume">
      <summary>
        On Balance Volume measures buying and selling pressure as a cumulative indicator that adds volume on up days and subtracts volume on down days.
      </summary>
      <example>
        <code>
          private OnBalanceVolume _onBalanceVolume;

          [Parameter]
          public DataSeries Source { get; set; }

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          protected override void Initialize()
          {
          _onBalanceVolume = Indicators.OnBalanceVolume(Source);
          }
          public override void Calculate(int index)
          {
          // Display Result of Indicator
          Result[index] = _onBalanceVolume.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the On Balance Volume indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class OnBalanceVolumeSample : Robot
          {
          private double _volumeInUnits;

          private OnBalanceVolume _onBalanceVolume;

          private SimpleMovingAverage _simpleMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _onBalanceVolume = Indicators.OnBalanceVolume(Bars.ClosePrices);
          _simpleMovingAverage = Indicators.SimpleMovingAverage(_onBalanceVolume.Result, 9);
          }

          protected override void OnBar()
          {
          if (_onBalanceVolume.Result.HasCrossedAbove(_simpleMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_onBalanceVolume.Result.HasCrossedBelow(_simpleMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface OnBalanceVolume</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.OnBalanceVolume.Result">
      <summary>
        Gets or sets the time series of the On Balance Volume indicator.
      </summary>
      <example>
        <code>
          private OnBalanceVolume _onBalanceVolume;

          [Parameter]
          public DataSeries Source { get; set; }

          protected override void OnStart()
          {
          _onBalanceVolume = Indicators.OnBalanceVolume(Source);
          }
          protected override void OnBar()
          {
          var currentValue = _onBalanceVolume.Result.LastValue;
          //...
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.ParabolicSAR">
      <summary>
        The calculation of the Parabolic SAR Indicator.
      </summary>
      <remarks>
        Developed by Welles Wilder, SAR stands for stop and reverse and is based on a concept similar to time decay,
        unless a security can continue to generate more profits over time, it should be liquidated.

        SAR trails prices as the trend extends over time, being below prices when they are increasing and above prices
        when they are decreasing. In this view, the indicator stops and reverses when the price trend reverses and breaks
        above or below the indicator. The indicator generally works well in trending markets, but not during non-trending,
        sideways phases. Therefore, Wilder recommended establishing the strength and direction of the trend first through the use of other indicators and then using the Parabolic SAR to trade that trend.The indicator is below prices when
        prices are rising and above prices when prices are falling. In this regard, the indicator stops and reverses when
        the price trend reverses and breaks above or below the indicator.
      </remarks>
      <example>
        <code>
          private ParabolicSAR _parabolic;
          protected override void Initialize()
          {
          _parabolic = Indicators.ParabolicSAR(minaf, maxaf);
          }
          public override void Calculate(int index)
          {
          double parabolic = _parabolic.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Parabolic SAR indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ParabolicSARSample : Robot
          {
          private double _volumeInUnits;

          private ParabolicSAR _parabolicSAR;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _parabolicSAR = Indicators.ParabolicSAR(0.02, 0.2);
          }

          protected override void OnBar()
          {
          if (_parabolicSAR.Result.Last(1) &lt; Bars.LowPrices.Last(1) &amp;&amp; _parabolicSAR.Result.Last(2) &gt; Bars.HighPrices.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_parabolicSAR.Result.Last(1) &gt; Bars.HighPrices.Last(1) &amp;&amp; _parabolicSAR.Result.Last(2) &lt; Bars.LowPrices.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface ParabolicSAR</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.ParabolicSAR.Result">
      <summary>
        Gets the resulting series of the Parabolic SAR indicator.
      </summary>
      <example>
        <code>
          private ParabolicSAR _parabolic;
          protected override void Initialize()
          {
          _parabolic = Indicators.ParabolicSAR(minaf, maxaf);
          }
          public override void Calculate(int index)
          {
          double parabolic = _parabolic.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.PolynomialRegressionChannels">
      <summary>
        Polynomial Regression Channel (PRC) is an RTX Extension indicator that draws a best fit n-degree polynomial regression line through a recent period of data.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Polynomial Regression Channels indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PolynomialRegressionChannelsSample : Robot
          {
          private double _volumeInUnits;

          private PolynomialRegressionChannels _polynomialRegressionChannels;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          [Parameter("Source")]
          public DataSeries Source { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _polynomialRegressionChannels = Indicators.PolynomialRegressionChannels(3, 120, 1.62, 2);
          }

          protected override void OnBar()
          {
          if (Bars.LowPrices.Last(1) &lt;= _polynomialRegressionChannels.Sql.Last(1) &amp;&amp; Bars.LowPrices.Last(2) &gt; _polynomialRegressionChannels.Sql.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label);
          }
          else if (Bars.HighPrices.Last(1) &gt;= _polynomialRegressionChannels.Sqh.Last(1) &amp;&amp; Bars.HighPrices.Last(2) &lt; _polynomialRegressionChannels.Sqh.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface PolynomialRegressionChannels</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.PolynomialRegressionChannels.Prc">
      <summary>
        Get the Polynomial Regression Channels Prc data series
      </summary>
      <signature>
        <code>public IndicatorDataSeries Prc { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.PolynomialRegressionChannels.Sqh">
      <summary>
        Get the Polynomial Regression Channels Sqh data series
      </summary>
      <signature>
        <code>public IndicatorDataSeries Sqh { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.PolynomialRegressionChannels.Sql">
      <summary>
        Get the Polynomial Regression Channels Sql data series
      </summary>
      <signature>
        <code>public IndicatorDataSeries Sql { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.PolynomialRegressionChannels.Sql2">
      <summary>
        Get the Polynomial Regression Channels Sql2 data series
      </summary>
      <signature>
        <code>public IndicatorDataSeries Sql2 { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.PolynomialRegressionChannels.Sqh2">
      <summary>
        Get the Polynomial Regression Channels Sqh2 data series
      </summary>
      <signature>
        <code>public IndicatorDataSeries Sqh2 { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.PositiveVolumeIndex">
      <summary>
        The positive volume index measures the trend of the stock prices for days when volume increases from previous day's volume.
      </summary>
      <remarks>
        Assumes that the smart money is active on days when volume decreases (measured by the Negative Volume Index)
        and the not-so-smart money is active on days when volume increases.
      </remarks>
      <example>
        <code>
          private PositiveVolumeIndex _positiveVolume;

          [Parameter]
          public DataSeries Source { get; set; }

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          protected override void Initialize()
          {
          _positiveVolume = Indicators.PositiveVolumeIndex(Source);
          }
          public override void Calculate(int index)
          {
          // Display Result of Indicator
          Result[index] = _positiveVolume.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Positive/Negative Volume Index indicators
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class VolumeIndexSample : Robot
          {
          private double _volumeInUnits;

          private PositiveVolumeIndex _positiveVolumeIndex;
          private NegativeVolumeIndex _negativeVolumeIndex;

          private SimpleMovingAverage _simpleMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _positiveVolumeIndex = Indicators.PositiveVolumeIndex(Bars.ClosePrices);
          _negativeVolumeIndex = Indicators.NegativeVolumeIndex(Bars.ClosePrices);

          _simpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 20);
          }

          protected override void OnBar()
          {
          if (Bars.ClosePrices.Last(1) &gt; _simpleMovingAverage.Result.Last(1))
          {
          ClosePositions(TradeType.Sell);

          if (BotPositions.Length == 0 &amp;&amp; _negativeVolumeIndex.Result.Last(1) &gt; _positiveVolumeIndex.Result.Last(1))
          {
          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          else if (Bars.ClosePrices.Last(1) &lt; _simpleMovingAverage.Result.Last(1))
          {
          ClosePositions(TradeType.Buy);

          if (BotPositions.Length == 0 &amp;&amp; _negativeVolumeIndex.Result.Last(1) &gt; _positiveVolumeIndex.Result.Last(1))
          {
          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface PositiveVolumeIndex</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.PositiveVolumeIndex.Result">
      <summary>
        Gets or sets the time series result of the Positive Volume Index indicator instance.
      </summary>
      <example>
        <code>
          protected override void OnBar()
          {
          var currentValue = _positiveVolume.Result.LastValue;
          //...
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.PriceOscillator">
      <summary>
        The Price Oscillator calculates the spread between a short-period moving average and a long-period moving average.
      </summary>
      <example>
        <code>
          //...
          private PriceOscillator priceOscillator;

          protected override void Initialize()
          {
          priceOscillator = Indicators.PriceOscillator
          (Price, LongCycle, ShortCycle, MAType);
          }

          public override void Calculate(int index)
          {
          double current = priceOscillator.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Price Oscillator indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PriceOscillatorSample : Robot
          {
          private double _volumeInUnits;

          private PriceOscillator _priceOscillator;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _priceOscillator = Indicators.PriceOscillator(Bars.ClosePrices, 22, 9, MovingAverageType.Simple);
          }

          protected override void OnBar()
          {
          if (_priceOscillator.Result.Last(1) &gt; 0 &amp;&amp; _priceOscillator.Result.Last(2) &lt;= 0)
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_priceOscillator.Result.Last(1) &lt; 0 &amp;&amp; _priceOscillator.Result.Last(2) &gt;= 0)
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface PriceOscillator</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.PriceOscillator.Result">
      <summary>
        Gets the resulting time series of the Price Oscillator indicator calculation.
      </summary>
      <example>
        <code>
          private PriceOscillator priceOscillator;

          protected override void Initialize()
          {
          priceOscillator = Indicators.PriceOscillator
          (MarketSeries.Close, 14, 5, MovingAverageType.Simple);
          }

          public override void Calculate(int index)
          {
          double result = priceOscillator.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.PriceROC">
      <summary>
        The Price ROC calculates the percentage change between the most recent price and the n-periods of the past price.
      </summary>
      <remarks>
        Can be used to determine whether an instrument is overbought or oversold.
      </remarks>
      <example>
        <code>
          private PriceROC _result;
          protected override void Initialize()
          {
          _result = Indicators.PriceROC(MarketSeries.Close, 14);
          }
          public override void Calculate(int index)
          {
          double result = _result.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Price ROC indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PriceROCSample : Robot
          {
          private double _volumeInUnits;

          private PriceROC _priceROC;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _priceROC = Indicators.PriceROC(Bars.ClosePrices, 12);
          }

          protected override void OnBar()
          {
          if (_priceROC.Result.Last(1) &gt; 0 &amp;&amp; _priceROC.Result.Last(2) &lt;= 0)
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_priceROC.Result.Last(1) &lt; 0 &amp;&amp; _priceROC.Result.Last(2) &gt;= 0)
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface PriceROC</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.PriceROC.Result">
      <summary>
        Gets the resulting time series of the Price ROC indicator calculation.
      </summary>
      <example>
        <code>
          private PriceROC _result;
          protected override void Initialize()
          {
          _result = Indicators.PriceROC(MarketSeries.Close, 14);
          }
          public override void Calculate(int index)
          {
          double result = _result.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.PriceVolumeTrend">
      <summary>
        Price and Volume Trend is a variation of On Balance Volume, used to determine the strength of trends and warn of reversals.
      </summary>
      <example>
        <code>
          private PriceVolumeTrend _priceVolumeTrend;

          [Parameter]
          public DataSeries Source { get; set; }

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          protected override void Initialize()
          {
          _priceVolumeTrend = Indicators.PriceVolumeTrend(Source);
          }
          public override void Calculate(int index)
          {
          // Display Result of Indicator
          Result[index] = _priceVolumeTrend.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Price Volume Trend indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PriceVolumeTrendSample : Robot
          {
          private double _volumeInUnits;

          private PriceVolumeTrend _priceVolumeTrend;

          private SimpleMovingAverage _simpleMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _priceVolumeTrend = Indicators.PriceVolumeTrend(Bars.ClosePrices);
          _simpleMovingAverage = Indicators.SimpleMovingAverage(_priceVolumeTrend.Result, 20);
          }

          protected override void OnBar()
          {
          if (_priceVolumeTrend.Result.HasCrossedAbove(_simpleMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_priceVolumeTrend.Result.HasCrossedBelow(_simpleMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface PriceVolumeTrend</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.PriceVolumeTrend.Result">
      <summary>
        Gets or sets the time series of the Price Volume Trend indicator.
      </summary>
      <example>
        <code>
          //...
          private PriceVolumeTrend _priceVolumeTrend;
          //...
          protected override void OnBar()
          {
          var currentValue = _priceVolumeTrend.Result.LastValue;
          //...
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.RainbowOscillator">
      <summary>
        Developed by Mel Widner, Rainbow Oscillator is based on multiple moving averages and helps to identify trends and provides overbought/oversold levels.
      </summary>
      <example>
        <code>
          //...
          private RainbowOscillator rainbow;
          //...
          protected override void Initialize()
          {
          rainbow = Indicators.RainbowOscillator
          (MarketSeries.Close, 9, MovingAverageType.Simple);
          //...
          }
          public override void Calculate(int index)
          {
          double result = rainbow.Result[index];
          //...
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Rainbow Oscillator indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class RainbowOscillatorSample : Robot
          {
          private double _volumeInUnits;

          private RainbowOscillator _rainbowOscillator;

          private SimpleMovingAverage _simpleMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _rainbowOscillator = Indicators.RainbowOscillator(Bars.ClosePrices, 9, MovingAverageType.Simple);
          _simpleMovingAverage = Indicators.SimpleMovingAverage(_rainbowOscillator.Result, 9);
          }

          protected override void OnBar()
          {
          if (_rainbowOscillator.Result.HasCrossedAbove(_simpleMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_rainbowOscillator.Result.HasCrossedBelow(_simpleMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface RainbowOscillator</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.RainbowOscillator.Result">
      <summary>
        Gets the resulting time series of the Rainbow Oscillator indicator calculation.
      </summary>
      <example>
        <code>
          //...
          private RainbowOscillator rainbow;
          //...
          protected override void Initialize()
          {
          rainbow = Indicators.RainbowOscillator
          (MarketSeries.Close, 9, MovingAverageType.Simple);
          //...
          }
          public override void Calculate(int index)
          {
          double result = rainbow.Result[index];
          //...
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.RelativeStrengthIndex">
      <summary>
        The RSI (Wilder) is momentum oscillator, measuring the velocity and magnitude of directional price movements.
      </summary>
      <remarks>
        The RSI is most typically used on a 14 day timeframe, measured on a scale from 0 to 100, with high and low levels marked at 70 and 30, respectively. Shorter or longer timeframes are used for alternately shorter or longer outlooks. More extreme high and low levels�80 and 20, or 90 and 10�occur less frequently but indicate stronger momentum.
      </remarks>
      <example>
        <code>
          private RelativeStrengthIndex _rsi;
          protected override void Initialize()
          {
          _rsi = Indicators.RelativeStrengthIndex(MarketSeries.Close, 14);
          }
          public override void Calculate(int index)
          {
          double result = _rsi.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Relative Strength Index indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class RelativeStrengthIndexSample : Robot
          {
          private double _volumeInUnits;

          private RelativeStrengthIndex _relativeStrengthIndex;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _relativeStrengthIndex = Indicators.RelativeStrengthIndex(Bars.ClosePrices, 20);
          }

          protected override void OnBar()
          {
          if (_relativeStrengthIndex.Result.Last(1) &gt; 70 &amp;&amp; _relativeStrengthIndex.Result.Last(2) &lt; 70)
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_relativeStrengthIndex.Result.Last(1) &lt; 20 &amp;&amp; _relativeStrengthIndex.Result.Last(2) &gt; 20)
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface RelativeStrengthIndex</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.RelativeStrengthIndex.Result">
      <summary>
        Gets the resulting time series of the Relative Strength Index indicator calculation.
      </summary>
      <example>
        <code>
          private RelativeStrengthIndex _rsi;
          protected override void Initialize()
          {
          _rsi = Indicators.RelativeStrengthIndex(MarketSeries.Close, 14);
          }
          public override void Calculate(int index)
          {
          double result = _rsi.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.SimpleMovingAverage">
      <summary>
        The simple moving average is an average of price within n previous periods.
      </summary>
      <remarks>
        The simple moving average is the unweighted mean of the previous n price data,
        where n is the period used for the calculation and price data the price data source, e.g. The closing price.
      </remarks>
      <example>
        <code>

          [Indicator]
          public class SimpleMovingAverageExample : Indicator
          {
          [Parameter]
          public DataSeries Source { get; set; }

          [Parameter(DefaultValue = 14, MinValue = 2)]
          public int Periods { get; set; }

          [Output("Result", Color = Colors.Orange)]
          public IndicatorDataSeries Result { get; set; }


          private SimpleMovingAverage _simpleMovingAverage;

          protected override void Initialize()
          {
          _simpleMovingAverage = Indicators.SimpleMovingAverage(Source, Periods);
          }

          public override void Calculate(int index)
          {
          var average = _simpleMovingAverage.Result[index];

          double sum = 0;

          for (var period = 0; period &lt; Periods; period++)
          {
          sum += Math.Pow(Source[index - period] - average, 2.0);
          }

          Result[index] = Math.Sqrt(sum / Periods);
          }
          }

        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Simple Moving Average indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class SimpleMovingAverageSample : Robot
          {
          private double _volumeInUnits;

          private SimpleMovingAverage _fastSimpleMovingAverage;

          private SimpleMovingAverage _slowSimpleMovingAverage;

          [Parameter("Source", Group = "Fast MA")]
          public DataSeries FastMaSource { get; set; }

          [Parameter("Period", DefaultValue = 9, Group = "Fast MA")]
          public int FastMaPeriod { get; set; }

          [Parameter("Source", Group = "Slow MA")]
          public DataSeries SlowMaSource { get; set; }

          [Parameter("Period", DefaultValue = 20, Group = "Slow MA")]
          public int SlowMaPeriod { get; set; }

          [Parameter("Volume (Lots)", DefaultValue = 0.01, Group = "Trade")]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10, Group = "Trade")]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10, Group = "Trade")]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample", Group = "Trade")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _fastSimpleMovingAverage = Indicators.SimpleMovingAverage(FastMaSource, FastMaPeriod);
          _slowSimpleMovingAverage = Indicators.SimpleMovingAverage(SlowMaSource, SlowMaPeriod);
          }

          protected override void OnBar()
          {
          if (_fastSimpleMovingAverage.Result.HasCrossedAbove(_slowSimpleMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_fastSimpleMovingAverage.Result.HasCrossedBelow(_slowSimpleMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface SimpleMovingAverage</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.StandardDeviation">
      <summary>
        Standard Deviation measures the market volatility with a commonly used statisctical function.
      </summary>
      <example>
        <code>
          private StandardDeviation _standardDeviation;
          protected override void Initialize()
          {
          _standardDeviation = Indicators.StandardDeviation(MarketSeries.Close, 14, MovingAverageType.Simple);
          }
          public override void Calculate(int index)
          {
          double result = _standardDeviation.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;
          using System;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Standard Deviation indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class StandardDeviationSample : Robot
          {
          private double _volumeInUnits;

          private StandardDeviation _standardDeviation;

          private SimpleMovingAverage _simpleMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _standardDeviation = Indicators.StandardDeviation(Bars.ClosePrices, 20, MovingAverageType.Simple);
          _simpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 14);
          }

          protected override void OnBar()
          {
          if (Bars.ClosePrices.HasCrossedAbove(_simpleMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Sell);

          ExecuteOrder(TradeType.Buy);
          }
          else if (Bars.ClosePrices.HasCrossedBelow(_simpleMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Buy);

          ExecuteOrder(TradeType.Sell);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }

          private void ExecuteOrder(TradeType tradeType)
          {
          var standardDeviationInPips = _standardDeviation.Result.Last(1) * (Symbol.TickSize / Symbol.PipSize * Math.Pow(10, Symbol.Digits));

          var stopLossInPips = standardDeviationInPips * 2;
          var takeProfitInPips = stopLossInPips * 2;

          ExecuteMarketOrder(tradeType, SymbolName, _volumeInUnits, Label, stopLossInPips, takeProfitInPips);
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface StandardDeviation</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.StandardDeviation.Result">
      <summary>
        Gets the resulting time series of the Standard Deviation indicator calculation.
      </summary>
      <example>
        <code>
          private StandardDeviation _standardDeviation;
          protected override void Initialize()
          {
          _standardDeviation = Indicators.StandardDeviation(MarketSeries.Close, 14, MovingAverageType.Simple);
          }
          public override void Calculate(int index)
          {
          double result = _standardDeviation.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.StochasticOscillator">
      <summary>
        The Stochastic Oscillator is a momentum indicator that aims to show price reversals by comparing the closing price to the price range.
      </summary>
      <remarks>
        Calculates the range between the high and low price during a given period of time. The current price is then expressed as a percentage of this range with 0% indicating the bottom of the range and 100% indicating the top of the range over this time period.
        Based on the theory that prices tend to close near the boundaries of the recent range.
      </remarks>
      <example>
        <code>
          private StochasticOscillator _stochastic;
          protected override void Initialize()
          {
          // Initialize the Stochastic Oscillator indicator
          _stochastic = Indicators.StochasticOscillator(kPeriods, kSlowing, dPeriods, maType);
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Stochastic Oscillator indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class StochasticOscillatorSample : Robot
          {
          private double _volumeInUnits;

          private StochasticOscillator _stochasticOscillator;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _stochasticOscillator = Indicators.StochasticOscillator(9, 3, 9, MovingAverageType.Simple);
          }

          protected override void OnBar()
          {
          if (_stochasticOscillator.PercentK.HasCrossedAbove(_stochasticOscillator.PercentD, 0) &amp;&amp; _stochasticOscillator.PercentK.Last(1) &lt;= 20)
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_stochasticOscillator.PercentK.HasCrossedBelow(_stochasticOscillator.PercentD, 0) &amp;&amp; _stochasticOscillator.PercentK.Last(1) &gt;= 80)
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface StochasticOscillator</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.StochasticOscillator.PercentD">
      <summary>
        %D is 3 Period Exponential Moving Average of %K.
      </summary>
      <example>
        <code>
          double result = _stochastic.PercentK[index];
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries PercentD { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.StochasticOscillator.PercentK">
      <summary>
        Calculation of %K is 100 multiplied by the ratio of the closing price minus the lowest price over the last N periods over the highest price over the last N minus the lowest price over the last N periods.
      </summary>
      <example>
        <code>
          double result = _stochastic.PercentD[index];
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries PercentK { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.Supertrend">
      <summary>
        Supertrend is one of the most popular trend trading indicators
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Supertrend indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class SupertrendSample : Robot
          {
          private double _volumeInUnits;

          private Supertrend _supertrend;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _supertrend = Indicators.Supertrend(10, 3);
          }

          protected override void OnBar()
          {
          if (_supertrend.UpTrend.Last(1) &lt; Bars.LowPrices.Last(1) &amp;&amp; _supertrend.DownTrend.Last(2) &gt; Bars.HighPrices.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_supertrend.DownTrend.Last(1) &gt; Bars.HighPrices.Last(1) &amp;&amp; _supertrend.UpTrend.Last(2) &lt; Bars.LowPrices.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface Supertrend</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.Supertrend.UpTrend">
      <summary>
        Gets the Supertrend Up trend data series
      </summary>
      <signature>
        <code>public IndicatorDataSeries UpTrend { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.Supertrend.DownTrend">
      <summary>
        Gets the Supertrend Down trend data series
      </summary>
      <signature>
        <code>public IndicatorDataSeries DownTrend { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.SwingIndex">
      <summary>
        Developed by Welles Wilder, the Swing Index compares current Open, high, Low and Close prices to find of current and previous periods to find "real" price.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Indicators
          {
          [Indicator]
          public class Test:Indicator
          {
          private SwingIndex _swingIndex;

          [Parameter(DefaultValue = 12)]
          public int LimitMoveValue { get; set; }

          protected override void Initialize()
          {
          _swingIndex = Indicators.SwingIndex(LimitMoveValue);
          }

          public override void Calculate(int index)
          {
          //Print the current value of SwingIndex to the log
          Print("The current value of SwingIndex is {0}", _swingIndex.Result[index]);
          }
          }
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Swing Index indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class SwingIndexSample : Robot
          {
          private double _volumeInUnits;

          private SwingIndex _swingIndex;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _swingIndex = Indicators.SwingIndex(12);
          }

          protected override void OnBar()
          {
          if (_swingIndex.Result.Last(1) &gt; 0 &amp;&amp; _swingIndex.Result.Last(2) &lt;= 0)
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_swingIndex.Result.Last(1) &lt; 0 &amp;&amp; _swingIndex.Result.Last(2) &gt;= 0)
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface SwingIndex</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.SwingIndex.Result">
      <summary>
        Gets the Result Series of the Swing Index indicator.
      </summary>
      <example>
        <code>
          public override void Calculate(int index)
          {
          //Print the current value of SwingIndex to the log
          Print("The current value of SwingIndex is {0}", _swingIndex.Result[index]);
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.TickVolume">
      <summary>
        The Tick Volume indicator shows number of ticks for each bar.
      </summary>
      <remarks>
        Tick Volume is the number of ticks per bar.
      </remarks>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Tick Volume indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TickVolumeSample : Robot
          {
          private double _volumeInUnits;

          private TickVolume _tickVolume;

          [Parameter("Volume (Lots)", DefaultValue = 0.01, Group = "Trade")]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10, Group = "Trade")]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10, Group = "Trade")]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample", Group = "Trade")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _tickVolume = Indicators.TickVolume();
          }

          protected override void OnBar()
          {
          if (Bars.Last(1).ClosePrice &gt; Bars.Last(2).ClosePrice)
          {
          ClosePositions(TradeType.Sell);

          if (_tickVolume.Result.Last(1) &gt; _tickVolume.Result.Last(2))
          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (Bars.Last(1).ClosePrice &lt; Bars.Last(2).ClosePrice)
          {
          ClosePositions(TradeType.Buy);

          if (_tickVolume.Result.Last(1) &gt; _tickVolume.Result.Last(2))
          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface TickVolume</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.TickVolume.Result">
      <summary>
        The resulting time series of the calculation.
      </summary>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.TimeSeriesMovingAverage">
      <summary>
        A Time Series Moving Average is moving average based on linear regression forecast.
      </summary>
      <example>
        <code>
          private TimeSeriesMovingAverage _timeSeriesMovingAverage;

          protected override void Initialize()
          {
          _timeSeriesMovingAverage = Indicators.TimeSeriesMovingAverage(MarketSeries.Close, 9);
          }

          public override void Calculate(int index)
          {
          //Print the current value of TimeSeries Moving Average to the log
          Print("The current TimeSeries Moving Average  is {0}", _timeSeriesMovingAverage.Result[index]);
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Time Series Moving Average indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TimeSeriesMovingAverageSample : Robot
          {
          private double _volumeInUnits;

          private TimeSeriesMovingAverage _fastTimeSeriesMovingAverage;

          private TimeSeriesMovingAverage _slowTimeSeriesMovingAverage;

          [Parameter("Source", Group = "Fast MA")]
          public DataSeries FastMaSource { get; set; }

          [Parameter("Period", DefaultValue = 9, Group = "Fast MA")]
          public int FastMaPeriod { get; set; }

          [Parameter("Source", Group = "Slow MA")]
          public DataSeries SlowMaSource { get; set; }

          [Parameter("Period", DefaultValue = 20, Group = "Slow MA")]
          public int SlowMaPeriod { get; set; }

          [Parameter("Volume (Lots)", DefaultValue = 0.01, Group = "Trade")]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10, Group = "Trade")]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10, Group = "Trade")]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample", Group = "Trade")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _fastTimeSeriesMovingAverage = Indicators.TimeSeriesMovingAverage(FastMaSource, FastMaPeriod);
          _slowTimeSeriesMovingAverage = Indicators.TimeSeriesMovingAverage(SlowMaSource, SlowMaPeriod);
          }

          protected override void OnBar()
          {
          if (_fastTimeSeriesMovingAverage.Result.HasCrossedAbove(_slowTimeSeriesMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_fastTimeSeriesMovingAverage.Result.HasCrossedBelow(_slowTimeSeriesMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface TimeSeriesMovingAverage</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.TradeVolumeIndex">
      <summary>
        Trade Volume Index measures the amount of money flowing in and out of an asset.
      </summary>
      <remarks>
        The underlying assumption of this indicator is that there is buying pressure when the price trades near the asking price and selling pressure when it trades near the bid.
      </remarks>
      <example>
        <code>
          private TradeVolumeIndex _tradeVolume;

          [Parameter]
          public DataSeries Source { get; set; }

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          protected override void Initialize()
          {
          _tradeVolume = Indicators.TradeVolumeIndex(Source);
          }
          public override void Calculate(int index)
          {
          // Display Result of Indicator
          Result[index] = _tradeVolume.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Trade Volume Index indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TradeVolumeIndexSample : Robot
          {
          private double _volumeInUnits;

          private TradeVolumeIndex _tradeVolumeIndex;

          private SimpleMovingAverage _simpleMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _tradeVolumeIndex = Indicators.TradeVolumeIndex(Bars.ClosePrices);

          _simpleMovingAverage = Indicators.SimpleMovingAverage(_tradeVolumeIndex.Result, 14);
          }

          protected override void OnBar()
          {
          if (_tradeVolumeIndex.Result.HasCrossedAbove(_simpleMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_tradeVolumeIndex.Result.HasCrossedBelow(_simpleMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface TradeVolumeIndex</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.TradeVolumeIndex.Result">
      <summary>
        Gets the time series of Trade Volume Index indicator.
      </summary>
      <example>
        <code>
          //...
          private TradeVolumeIndex _tradeVolume;
          //...
          protected override void OnBar()
          {
          var currentValue = _tradeVolume.Result.LastValue;
          //...
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.TriangularMovingAverage">
      <summary>
        The Triangular Moving Average is a moving average that gives more weith to values located in the middle of aggregated period.
      </summary>
      <example>
        <code>
          private TriangularMovingAverage _triangularMovingAverage;
          protected override void Initialize()
          {
          _triangularMovingAverage = Indicators.TriangularMovingAverage(MarketSeries.Close, 9);
          }

          public override void Calculate(int index)
          {
          //Print the current value of _triangularMovingAverage to the log
          Print("The current Triangular Moving Average is {0}", _triangularMovingAverage.Result[index]);
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Triangular Moving Average indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TriangularMovingAverageSample : Robot
          {
          private double _volumeInUnits;

          private TriangularMovingAverage _fastTriangularMovingAverage;

          private TriangularMovingAverage _slowTriangularMovingAverage;

          [Parameter("Source", Group = "Fast MA")]
          public DataSeries FastMaSource { get; set; }

          [Parameter("Period", DefaultValue = 9, Group = "Fast MA")]
          public int FastMaPeriod { get; set; }

          [Parameter("Source", Group = "Slow MA")]
          public DataSeries SlowMaSource { get; set; }

          [Parameter("Period", DefaultValue = 20, Group = "Slow MA")]
          public int SlowMaPeriod { get; set; }

          [Parameter("Volume (Lots)", DefaultValue = 0.01, Group = "Trade")]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10, Group = "Trade")]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10, Group = "Trade")]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample", Group = "Trade")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _fastTriangularMovingAverage = Indicators.TriangularMovingAverage(FastMaSource, FastMaPeriod);
          _slowTriangularMovingAverage = Indicators.TriangularMovingAverage(SlowMaSource, SlowMaPeriod);
          }

          protected override void OnBar()
          {
          if (_fastTriangularMovingAverage.Result.HasCrossedAbove(_slowTriangularMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_fastTriangularMovingAverage.Result.HasCrossedBelow(_slowTriangularMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface TriangularMovingAverage</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.Trix">
      <summary>
        TRIX was developed by Jack Huton. It is a momentum oscillator that will help you filter unimportant price movement.
      </summary>
      <remarks>
        When TRIX is rising, it is a good signal to buy, whether when TRIX is falling, it is a good signal to sell.
      </remarks>
      <example>
        <code>
          private Trix _result;
          protected override void Initialize()
          {
          _result = Indicators.Trix(MarketSeries.Close, 14);
          }
          public override void Calculate(int index)
          {
          double result = _result.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Trix indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TrixSample : Robot
          {
          private double _volumeInUnits;

          private Trix _trix;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _trix = Indicators.Trix(Bars.ClosePrices, 9);
          }

          protected override void OnBar()
          {
          if (_trix.Result.Last(1) &gt; 0 &amp;&amp; _trix.Result.Last(2) &lt;= 0)
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_trix.Result.Last(1) &lt; 0 &amp;&amp; _trix.Result.Last(2) &gt;= 0)
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface Trix</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.Trix.Result">
      <summary>
        Gets the resulting time series of the Trix indicator calculation.
      </summary>
      <example>
        <code>
          private Trix _result;
          protected override void Initialize()
          {
          _result = Indicators.Trix(MarketSeries.Close, 14);
          }
          public override void Calculate(int index)
          {
          double result = _result.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.TrueRange">
      <summary>
        The Average True Range is a measure of market volatility developed by Wilder.
      </summary>
      <example>
        <code>
          private TrueRange tri;

          protected override void Initialize()
          {
          tri = Indicators.TrueRange();
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;
          using System;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the True Range indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TrueRangeSample : Robot
          {
          private double _volumeInUnits;

          private TrueRange _trueRange;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _trueRange = Indicators.TrueRange();
          }

          protected override void OnBar()
          {
          if (Bars.ClosePrices.Last(1) &gt; Bars.OpenPrices.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt; Bars.OpenPrices.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteOrder(TradeType.Buy);
          }
          else if (Bars.ClosePrices.Last(1) &lt; Bars.OpenPrices.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt; Bars.OpenPrices.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteOrder(TradeType.Sell);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }

          private void ExecuteOrder(TradeType tradeType)
          {
          var trueRangeInPips = _trueRange.Result.Last(1) * (Symbol.TickSize / Symbol.PipSize * Math.Pow(10, Symbol.Digits));

          var stopLossInPips = trueRangeInPips * 2;
          var takeProfitInPips = stopLossInPips * 2;

          ExecuteMarketOrder(tradeType, SymbolName, _volumeInUnits, Label, stopLossInPips, takeProfitInPips);
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface TrueRange</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.TrueRange.Result">
      <summary>
        Gets the resulting time series of the True Range indicator calculation.
      </summary>
      <example>
        <code>
          public override void Calculate(int index)
          {
          Result[index] = tri.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.TypicalPrice">
      <summary>
        A Typical Price is an average of high, low and close values for a single period.
      </summary>
      <remarks>
        Typical Price gives a simplified view of all prices for a period as a single series.
      </remarks>
      <example>
        <code>
          private TypicalPrice _result;
          protected override void Initialize()
          {
          _result = Indicators.TypicalPrice();
          }
          public override void Calculate(int index)
          {
          double result = _result.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Typical Price indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TypicalPriceSample : Robot
          {
          private double _volumeInUnits;

          private TypicalPrice _typicalPrice;

          private SimpleMovingAverage _simpleMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _typicalPrice = Indicators.TypicalPrice();

          _simpleMovingAverage = Indicators.SimpleMovingAverage(_typicalPrice.Result, 14);
          }

          protected override void OnBar()
          {
          if (_typicalPrice.Result.HasCrossedAbove(_simpleMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_typicalPrice.Result.HasCrossedBelow(_simpleMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface TypicalPrice</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.TypicalPrice.Result">
      <summary>
        Gets the resulting time series of the Typical Price indicator calculation.
      </summary>
      <example>
        <code>
          private TypicalPrice _result;
          protected override void Initialize()
          {
          _result = Indicators.TypicalPrice();
          }
          public override void Calculate(int index)
          {
          double result = _result.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.UltimateOscillator">
      <summary>
        The Ultimate Oscillator is a technical analysis oscillator based on a notion of buying or selling "pressure".
      </summary>
      <remarks>
        It uses the weighted average of three different time periods to reduce the volatility and false transaction signals that are associated with many other indicators that mainly rely on a single time period.
      </remarks>
      <example>
        <code>
          private UltimateOscillator ultimateOscillator;

          [Parameter("Cycle 1", DefaultValue = 7)]
          public int Cycle1 { get; set; }

          [Parameter("Cycle 2", DefaultValue = 14)]
          public int Cycle2 { get; set; }

          [Parameter("Cycle 3", DefaultValue = 28)]
          public int Cycle3 { get; set; }

          [Output("Main", Color = Colors.Green)]
          public IndicatorDataSeries Result { get; set; }

          protected override void Initialize()
          {
          ultimateOscillator = Indicators.UltimateOscillator(Cycle1,Cycle2,Cycle3);
          }
          public override void Calculate(int index)
          {
          Result[index] = ultimateOscillator.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Ultimate Oscillator indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class UltimateOscillatorSample : Robot
          {
          private double _volumeInUnits;

          private UltimateOscillator _ultimateOscillator;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _ultimateOscillator = Indicators.UltimateOscillator(7, 14, 28);
          }

          protected override void OnBar()
          {
          if (_ultimateOscillator.Result.Last(1) &gt; 70 &amp;&amp; _ultimateOscillator.Result.Last(2) &lt; 70)
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_ultimateOscillator.Result.Last(1) &lt; 30 &amp;&amp; _ultimateOscillator.Result.Last(2) &gt; 30)
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface UltimateOscillator</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.UltimateOscillator.Result">
      <summary>
        Gets the resulting time series of the Ultimate Oscillator indicator calculation.
      </summary>
      <example>
        <code>
          public override void Calculate(int index)
          {
          double result = ultimateOscillator.Result[index];

          //...
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.VerticalHorizontalFilter">
      <summary>
        Vertical Horizontal Filter determines whether a price is going through a congestion phase or a trending phase.
      </summary>
      <remarks>
        Vertical Horizontal Filter rises when trend is strong and falls when trend is weak.
      </remarks>
      <example>
        <code>
          //...
          private VerticalHorizontalFilter VHFilter;
          //...
          protected override void Initialize()
          {
          VHFilter = Indicators.VerticalHorizontalFilter(MarketSeries.Open, 28);
          //...
          }
          public override void Calculate(int index)
          {
          double value = VHFilter.Result[index];
          //...
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Vertical Horizontal Filter indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class VerticalHorizontalFilterSample : Robot
          {
          private double _volumeInUnits;

          private VerticalHorizontalFilter _verticalHorizontalFilter;

          private SimpleMovingAverage _priceSimpleMovingAverage;
          private SimpleMovingAverage _verticalHorizontalFilterSimpleMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _verticalHorizontalFilter = Indicators.VerticalHorizontalFilter(Bars.ClosePrices, 28);

          _verticalHorizontalFilterSimpleMovingAverage = Indicators.SimpleMovingAverage(_verticalHorizontalFilter.Result, 14);

          _priceSimpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 14);
          }

          protected override void OnBar()
          {
          if (_verticalHorizontalFilter.Result.Last(1) &lt; _verticalHorizontalFilterSimpleMovingAverage.Result.Last(1)) return;

          if (Bars.ClosePrices.Last(1) &gt; _priceSimpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt;= _priceSimpleMovingAverage.Result.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (Bars.ClosePrices.Last(1) &lt; _priceSimpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt;= _priceSimpleMovingAverage.Result.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface VerticalHorizontalFilter</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.VerticalHorizontalFilter.Result">
      <summary>
        Gets the resulting time series of the Vertical Horizontal Filter indicator calculation.
      </summary>
      <example>
        <code>
          public override void Calculate(int index)
          {
          double result = VHFilter.Result[index];
          //...
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.Vidya">
      <summary>
        Volatility Index Dynamic Average (VIDYA) is a smoothing (moving average) based on dynamically changing periods.
      </summary>
      <example>
        <code>
          [Parameter]
          public DataSeries Price { get; set; }

          [Parameter("Period", DefaultValue = 14)]
          public int Period { get; set; }

          [Parameter("Sigma", DefaultValue = 0.65, MinValue = 0.1, MaxValue = 0.95)]
          public double Sigma { get; set; }

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          private Vidya vidya;

          protected override void Initialize()
          {
          vidya = Indicators.Vidya(Price, Period, Sigma);
          }
          public override void Calculate(int index)
          {
          // Plot VIDYA to the chart
          Result[index] = vidya.Result.LastValue;
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Vidya indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class VidyaSample : Robot
          {
          private double _volumeInUnits;

          private Vidya _fastVidya;

          private Vidya _slowVidya;

          [Parameter("Source", Group = "Fast MA")]
          public DataSeries FastMaSource { get; set; }

          [Parameter("Period", DefaultValue = 9, Group = "Fast MA")]
          public int FastMaPeriod { get; set; }

          [Parameter("Source", Group = "Slow MA")]
          public DataSeries SlowMaSource { get; set; }

          [Parameter("Period", DefaultValue = 20, Group = "Slow MA")]
          public int SlowMaPeriod { get; set; }

          [Parameter("Volume (Lots)", DefaultValue = 0.01, Group = "Trade")]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10, Group = "Trade")]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10, Group = "Trade")]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample", Group = "Trade")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _fastVidya = Indicators.Vidya(FastMaSource, FastMaPeriod, 0.65);
          _slowVidya = Indicators.Vidya(SlowMaSource, SlowMaPeriod, 0.6);
          }

          protected override void OnBar()
          {
          if (_fastVidya.Result.HasCrossedAbove(_slowVidya.Result, 0))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_fastVidya.Result.HasCrossedBelow(_slowVidya.Result, 0))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface Vidya</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.VolumeOscillator">
      <summary>
        The Volume Oscillator identifies trends in volume using a two moving average system. A strong trend is signaled when it is positive. Falling volume indicates trend weakness.
      </summary>
      <example>
        <code>
          private VolumeOscillator _volumeOscillator;

          [Parameter("Short Term", DefaultValue = 9)]
          public int ShortTerm { get; set; }

          [Parameter("Long Term", DefaultValue = 21)]
          public int LongTerm { get; set; }

          protected override void Initialize()
          {
          _volumeOscillator = Indicators.VolumeOscillator(ShortTerm, LongTerm);
          }
          public override void Calculate(int index)
          {
          // Display Result of Indicator
          Result[index] = _volumeOscillator.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Volume Oscillator indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class VolumeOscillatorSample : Robot
          {
          private double _volumeInUnits;

          private VolumeOscillator _volumeOscillator;

          private SimpleMovingAverage _priceSimpleMovingAverage;
          private SimpleMovingAverage _volumeOscillatorSimpleMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _volumeOscillator = Indicators.VolumeOscillator(9, 21);

          _volumeOscillatorSimpleMovingAverage = Indicators.SimpleMovingAverage(_volumeOscillator.Result, 14);

          _priceSimpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 14);
          }

          protected override void OnBar()
          {
          if (_volumeOscillator.Result.Last(1) &lt; _volumeOscillatorSimpleMovingAverage.Result.Last(1)) return;

          if (Bars.ClosePrices.Last(1) &gt; _priceSimpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt;= _priceSimpleMovingAverage.Result.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (Bars.ClosePrices.Last(1) &lt; _priceSimpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt;= _priceSimpleMovingAverage.Result.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface VolumeOscillator</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.VolumeOscillator.Result">
      <summary>
        Gets or sets the time series of the Volume Oscillator indicator.
      </summary>
      <example>
        <code>
          //...
          private VolumeOscillator _volumeOscillator;
          //...
          protected override void OnBar()
          {
          var currentValue = _volumeOscillator.Result.LastValue;
          //...
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.VolumeROC">
      <summary>
        The Volume Rate of Change indicator measures the Rate Of Change of the tick volume.
      </summary>
      <remarks>
        It shows whether or not a volume trend is developing and can be used to confirm price moves.
      </remarks>
      <example>
        <code>
          private VolumeROC _volumeROC;

          [Parameter("Period", DefaultValue = 14)]
          public int Period { get; set; }

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          protected override void Initialize()
          {
          _volumeROC = Indicators.VolumeROC(Period);
          }
          public override void Calculate(int index)
          {
          // Display Result of Indicator
          Result[index] = _volumeROC.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          /// <summary>
            /// This sample cBot shows how to use the Volume ROC indicator
            ///
          </summary>
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class VolumeROCSample : Robot
          {
          private double _volumeInUnits;

          private VolumeROC _volumeROC;

          private SimpleMovingAverage _priceSimpleMovingAverage;
          private SimpleMovingAverage _volumeROCSimpleMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _volumeROC = Indicators.VolumeROC(14);

          _volumeROCSimpleMovingAverage = Indicators.SimpleMovingAverage(_volumeROC.Result, 14);

          _priceSimpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 14);
          }

          protected override void OnBar()
          {
          if (_volumeROC.Result.Last(1) &lt; _volumeROCSimpleMovingAverage.Result.Last(1)) return;

          if (Bars.ClosePrices.Last(1) &gt; _priceSimpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &lt;= _priceSimpleMovingAverage.Result.Last(2))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (Bars.ClosePrices.Last(1) &lt; _priceSimpleMovingAverage.Result.Last(1) &amp;&amp; Bars.ClosePrices.Last(2) &gt;= _priceSimpleMovingAverage.Result.Last(2))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface VolumeROC</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.VolumeROC.Result">
      <summary>
        Gets or sets the time series of the Volume ROC indicator.
      </summary>
      <example>
        <code>
          //...
          private VolumeROC _volumeROC;
          //...
          protected override void OnBar()
          {
          var currentValue = _volumeROC.Result.LastValue;
          //...
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.WeightedClose">
      <summary>
        Weighted Close is an average of high, low and close prices where close has greater weight.
      </summary>
      <remarks>
        Like a Typical price indicator weighted Close gives a simplified view of all prices for a period as a single series.
      </remarks>
      <example>
        <code>
          //...
          private WeightedClose weightedCloseSeries;
          //...
          protected override void Initialize()
          {
          weightedCloseSeries = Indicators.WeightedClose();
          //...
          }
          public override void Calculate(int index)
          {
          double weightedCloseValue = weightedCloseSeries.Result[index];
          //...
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Weighted Close indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class WeightedCloseSample : Robot
          {
          private double _volumeInUnits;

          private WeightedClose _weightedClose;

          private SimpleMovingAverage _simpleMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _weightedClose = Indicators.WeightedClose();

          _simpleMovingAverage = Indicators.SimpleMovingAverage(_weightedClose.Result, 14);
          }

          protected override void OnBar()
          {
          if (_weightedClose.Result.HasCrossedAbove(_simpleMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_weightedClose.Result.HasCrossedBelow(_simpleMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface WeightedClose</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.WeightedClose.Result">
      <summary>
        Gets the resulting time series of the Weighted Close indicator calculation.
      </summary>
      <example>
        <code>
          double weightedCloseValue = weightedCloseSeries.Result[index];
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.WeightedMovingAverage">
      <summary>
        The Weighted Moving Average is a moving average that gives more weith to the latest values.
      </summary>
      <example>
        <code>
          private WeightedMovingAverage _weightedMovingAverage;

          protected override void OnStart()
          {
          _weightedMovingAverage = Indicators.WeightedMovingAverage(Source, Period);
          }

          protected override void OnTick()
          {
          if(Trade.IsExecuting)
          return;

          int index = MarketSeries.Close.Count - 1;

          if(Symbol.Bid &gt; _weightedMovingAverage.Result[index])
          {
          Trade.CreateMarketOrder(TradeType.Buy, Symbol, Volume);
          }
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Weighted Moving Average indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class WeightedMovingAverageSample : Robot
          {
          private double _volumeInUnits;

          private WeightedMovingAverage _fastWeightedMovingAverage;

          private WeightedMovingAverage _slowWeightedMovingAverage;

          [Parameter("Source", Group = "Fast MA")]
          public DataSeries FastMaSource { get; set; }

          [Parameter("Period", DefaultValue = 9, Group = "Fast MA")]
          public int FastMaPeriod { get; set; }

          [Parameter("Source", Group = "Slow MA")]
          public DataSeries SlowMaSource { get; set; }

          [Parameter("Period", DefaultValue = 20, Group = "Slow MA")]
          public int SlowMaPeriod { get; set; }

          [Parameter("Volume (Lots)", DefaultValue = 0.01, Group = "Trade")]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10, Group = "Trade")]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10, Group = "Trade")]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample", Group = "Trade")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _fastWeightedMovingAverage = Indicators.WeightedMovingAverage(FastMaSource, FastMaPeriod);
          _slowWeightedMovingAverage = Indicators.WeightedMovingAverage(SlowMaSource, SlowMaPeriod);
          }

          protected override void OnBar()
          {
          if (_fastWeightedMovingAverage.Result.HasCrossedAbove(_slowWeightedMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_fastWeightedMovingAverage.Result.HasCrossedBelow(_slowWeightedMovingAverage.Result, 0))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface WeightedMovingAverage</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.WeightedMovingAverage.Result">
      <summary>
        Gets the resulting time series of the Weighted Moving Average indicator calculation.
      </summary>
      <example>
        <code>
          private WeightedMovingAverage _weightedMovingAverage;

          protected override void OnStart()
          {
          _weightedMovingAverage = Indicators.WeightedMovingAverage(Source, Period);
          }

          protected override void OnTick()
          {
          if(Trade.IsExecuting)
          return;

          int index = MarketSeries.Close.Count - 1;

          if(Symbol.Bid &gt; _weightedMovingAverage.Result[index])
          {
          Trade.CreateMarketOrder(TradeType.Buy, Symbol, Volume);
          }
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.WellesWilderSmoothing">
      <summary>
        The Welles Wilder's Smoothing indicator is an exponential moving average, but it has different alpha ration. As a result it responds to price changes slower.
      </summary>
      <remarks>
        Usage is the same as EMA usage. Please mind the different in alpha ration.
      </remarks>
      <example>
        <code>
          private WellesWilderSmoothing _result;
          protected override void Initialize()
          {
          _result = Indicators.WellesWilderSmoothing(MarketSeries.Close, 14);
          }
          public override void Calculate(int index)
          {
          double result = _result.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Welles Wilder Smoothing indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class WellesWilderSmoothingSample : Robot
          {
          private double _volumeInUnits;

          private WellesWilderSmoothing _fastWellesWilderSmoothing;

          private WellesWilderSmoothing _slowWellesWilderSmoothing;

          [Parameter("Source", Group = "Fast MA")]
          public DataSeries FastMaSource { get; set; }

          [Parameter("Period", DefaultValue = 9, Group = "Fast MA")]
          public int FastMaPeriod { get; set; }

          [Parameter("Source", Group = "Slow MA")]
          public DataSeries SlowMaSource { get; set; }

          [Parameter("Period", DefaultValue = 20, Group = "Slow MA")]
          public int SlowMaPeriod { get; set; }

          [Parameter("Volume (Lots)", DefaultValue = 0.01, Group = "Trade")]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10, Group = "Trade")]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10, Group = "Trade")]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample", Group = "Trade")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _fastWellesWilderSmoothing = Indicators.WellesWilderSmoothing(FastMaSource, FastMaPeriod);
          _slowWellesWilderSmoothing = Indicators.WellesWilderSmoothing(SlowMaSource, SlowMaPeriod);
          }

          protected override void OnBar()
          {
          if (_fastWellesWilderSmoothing.Result.HasCrossedAbove(_slowWellesWilderSmoothing.Result, 0))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_fastWellesWilderSmoothing.Result.HasCrossedBelow(_slowWellesWilderSmoothing.Result, 0))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface WellesWilderSmoothing</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.WilliamsAccumulationDistribution">
      <summary>
        William's Accumulation Distribution is an oscillator that can identify if the market is driven by buyers (accumulation) or by sellers (distribution)
      </summary>
      <remarks>
        The divergence between price and the William's Accumulation Distribution. When price is falling and WAD is rising, it is a buying opportunity
      </remarks>
      <example>
        <code>
          private WilliamsAccumulationDistribution _result;
          protected override void Initialize()
          {
          _result = Indicators.WilliamsAccumulationDistribution();
          }
          public override void Calculate(int index)
          {
          double result = _result.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;
          using System;
          using System.Linq;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Williams Accumulation Distribution indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class WilliamsAccumulationDistributionSample : Robot
          {
          private double _volumeInUnits;

          private WilliamsAccumulationDistribution _williamsAccumulationDistribution;

          private SimpleMovingAverage _simpleMovingAverage;

          [Parameter("Volume (Lots)", DefaultValue = 0.01, Group = "Trade")]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10, Group = "Trade")]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10, Group = "Trade")]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample", Group = "Trade")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _williamsAccumulationDistribution = Indicators.WilliamsAccumulationDistribution();

          _simpleMovingAverage = Indicators.SimpleMovingAverage(Bars.ClosePrices, 14);
          }

          protected override void OnBar()
          {
          var correlation = GetCorrelation(14);

          if (correlation &gt; 0.85) return;

          if (Bars.ClosePrices.Last(1) &gt; _simpleMovingAverage.Result.Last(1))
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (Bars.ClosePrices.Last(1) &lt; _simpleMovingAverage.Result.Last(1))
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }

          private double GetCorrelation(int period)
          {
          var x = _williamsAccumulationDistribution.Result.Skip(_williamsAccumulationDistribution.Result.Count - period).ToArray();
          var y = Bars.ClosePrices.Skip(Bars.ClosePrices.Count - period).ToArray();

          if (!x.Any() || !y.Any())
          {
          return double.NaN;
          }

          var xSum = x.Sum();
          var ySum = y.Sum();

          var xSumSquared = Math.Pow(xSum, 2);
          var ySumSquared = Math.Pow(ySum, 2);

          var xSquaredSum = x.Select(value =&gt; Math.Pow(value, 2)).Sum();
          var ySquaredSum = y.Select(value =&gt; Math.Pow(value, 2)).Sum();

          var xAndyProductSum = x.Zip(y, (value1, value2) =&gt; value1 * value2).Sum();

          double n = x.Count();

          return (n * xAndyProductSum - xSum * ySum) / Math.Sqrt((n * xSquaredSum - xSumSquared) * (n * ySquaredSum - ySumSquared));
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface WilliamsAccumulationDistribution</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.WilliamsAccumulationDistribution.Result">
      <summary>
        Gets the resulting time series of the Williams Accumulation Distribution indicator calculation.
      </summary>
      <example>
        <code>
          private WilliamsAccumulationDistribution _result;
          protected override void Initialize()
          {
          _result = Indicators.WilliamsAccumulationDistribution();
          }
          public override void Calculate(int index)
          {
          double result = _result.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicators.WilliamsPctR">
      <summary>
        Williams %R is an effective momentum oscillator and was described by Larry Williams for the first time in 1973.
      </summary>
      <remarks>
        It shows the relationship of the close relative to the high-low range over a set period of time.
      </remarks>
      <example>
        <code>
          private WilliamsPctR _result;
          protected override void Initialize()
          {
          _result = Indicators.WilliamsPctR(14);
          }
          public override void Calculate(int index)
          {
          double result = _result.Result[index];
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the Williams % R indicator
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class WilliamsPctRSample : Robot
          {
          private double _volumeInUnits;

          private WilliamsPctR _williamsPctR;

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Label", DefaultValue = "Sample")]
          public string Label { get; set; }

          public Position[] BotPositions
          {
          get
          {
          return Positions.FindAll(Label);
          }
          }

          protected override void OnStart()
          {
          _volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          _williamsPctR = Indicators.WilliamsPctR(14);
          }

          protected override void OnBar()
          {
          if (_williamsPctR.Result.Last(1) &gt; -20 &amp;&amp; _williamsPctR.Result.Last(2) &lt; -20)
          {
          ClosePositions(TradeType.Buy);

          ExecuteMarketOrder(TradeType.Sell, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          else if (_williamsPctR.Result.Last(1) &lt; -80 &amp;&amp; _williamsPctR.Result.Last(2) &gt; -80)
          {
          ClosePositions(TradeType.Sell);

          ExecuteMarketOrder(TradeType.Buy, SymbolName, _volumeInUnits, Label, StopLossInPips, TakeProfitInPips);
          }
          }

          private void ClosePositions(TradeType tradeType)
          {
          foreach (var position in BotPositions)
          {
          if (position.TradeType != tradeType) continue;

          ClosePosition(position);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface WilliamsPctR</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicators.WilliamsPctR.Result">
      <summary>
        Gets the resulting time series of the Williams PctR indicator calculation.
      </summary>
      <example>
        <code>
          private WilliamsPctR _result;
          protected override void Initialize()
          {
          _result = Indicators.WilliamsPctR(14);
          }
          public override void Calculate(int index)
          {
          double result = _result.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries Result { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Indicator">
      <summary>
        Base class for Indicators.
      </summary>
      <remarks>
        Contains all necessary market information, provides access to built-in indicators and provides framework for
        convenient indicators' creation.
      </remarks>
      <example>
        <code>
          //...
          public override void Calculate(int index)
          {
          //This is where we place our indicator's calculation logic.
          }
          //...
        </code>
      </example>
      <example>
        <code>
          //...
          protected override void Initialize()
          {
          //Place your Initialization logic here
          }
          //...
        </code>
      </example>
      <example>
        <code>
          private IndicatorDataSeries input;

          protected override void Initialize()
          {
          input = CreateDataSeries();
          }
          public override void Calculate(int index)
          {
          input[index] = (MarketSeries.Close[index] + MarketSeries.Open[index]) / 2;
          }
        </code>
      </example>
      <example>
        <code>
          //...
          public override void Calculate(int index)
          {
          if (IsRealTime)
          {
          //Place the code-logic that you want to be calculated on incoming live data
          }
          }
          //...
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.General" />
      <signature>
        <code>public abstract class Indicator : Algo</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.#ctor">
      <summary>
        Indicator class constructor
      </summary>
      <signature>
        <code>public Indicator()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicator.IsLastBar">
      <summary>
        Returns true, if Calculate is invoked for the last bar
      </summary>
      <example>
        <code>
          public override void Calculate(int index)
          {
          if (IsLastBar)
          {
          // this is the current (last) index
          }
          }

        </code>
      </example>
      <signature>
        <code>public bool IsLastBar { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicator.IndicatorArea">
      <summary>
        Defines the area where the indicator is placed.
      </summary>
      <signature>
        <code>public IndicatorArea IndicatorArea { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicator.Account">
      <summary>
        Contains information of the current account.
      </summary>
      <example>
        <code>
          if (Account.Balance &lt; 10000)
          Print(Account.Balance);
        </code>
      </example>
      <signature>
        <code>public IAccount Account { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.Calculate(System.Int32)">
      <summary>
        Calculate the value(s) of indicator for the given index.
      </summary>
      <param name="index">The index of calculated value.</param>
      <example>
        <code>
          //...

          public override void Calculate(int index)
          {
          //This is where we place our indicator's calculation logic.
          }

          //...
        </code>
      </example>
      <signature>
        <code>public abstract void Calculate(int index)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.Initialize">
      <summary>
        Custom initialization for the Indicator. This method is invoked when an indicator is launched.
      </summary>
      <example>
        <code>
          //...
          protected override void Initialize()
          {
          //Place your Initialization logic here
          }
          //...
        </code>
      </example>
      <signature>
        <code>public void Initialize()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.OnDestroy">
      <summary>
        Called when Indicator is destroyed.
      </summary>
      <example>
        <code>
          protected override void OnDestroy()
          {
          //This method is called when the Indicator is destroyed
          }
        </code>
      </example>
      <signature>
        <code>public void OnDestroy()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ToString">
      <summary>
        The name of the indicator derived class.
      </summary>
      <returns>Indicator Class Name</returns>
      <example>
        <code>
          private SampleSMA sma;
          //...
          sma = Indicators.GetIndicator&lt;SampleSMA&gt;(Source, Period);
          Print(sma.ToString());
        </code>
      </example>
      <signature>
        <code>public string ToString()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.AddToChart">
      <summary>
        Adds current indicator to chart if not added yet.
      </summary>
      <remarks>
        If Indicator with same parameter values already added then it will return existing indicator instance.
      </remarks>
      <returns>Chart Indicator</returns>
      <signature>
        <code>public ChartIndicator AddToChart()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicator.Permissions">
      <summary>
        Contains all Permissions information
      </summary>
      <signature>
        <code>public Permissions Permissions { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.SetLineAppearance(cAlgo.API.IndicatorLine,System.Int32,cAlgo.API.Color)">
      <summary>
        Sets appearance of an indicator output line from startIndex to last index.
      </summary>
      <param name="line">Indicator Output Line</param>
      <param name="startIndex">Start Index</param>
      <param name="color">Color</param>
      <signature>
        <code>public void SetLineAppearance(IndicatorLine line, int startIndex, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.SetLineAppearance(cAlgo.API.IndicatorLine,System.Int32,cAlgo.API.Color,System.Int32)">
      <summary>
        Sets appearance of an indicator output line from startIndex to last index.
      </summary>
      <param name="line">Indicator Output Line</param>
      <param name="startIndex">Start Index</param>
      <param name="color">Color</param>
      <param name="thickness">Thickness</param>
      <signature>
        <code>public void SetLineAppearance(IndicatorLine line, int startIndex, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.SetLineAppearance(cAlgo.API.IndicatorLine,System.Int32,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Sets appearance of an indicator output line from startIndex to last index.
      </summary>
      <param name="line">Indicator Output Line</param>
      <param name="startIndex">Start Index</param>
      <param name="color">Color</param>
      <param name="thickness">Thickness</param>
      <param name="lineStyle">LineStyle</param>
      <signature>
        <code>public void SetLineAppearance(IndicatorLine line, int startIndex, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.SetLineAppearance(cAlgo.API.IndicatorLine,System.Int32,System.Int32,cAlgo.API.Color)">
      <summary>
        Sets appearance of an indicator output line from startIndex to startIndex + count.
      </summary>
      <param name="line">Indicator Output Line</param>
      <param name="startIndex">Start Index</param>
      <param name="count">Index count</param>
      <param name="color">Color</param>
      <signature>
        <code>public void SetLineAppearance(IndicatorLine line, int startIndex, int count, Color color)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.SetLineAppearance(cAlgo.API.IndicatorLine,System.Int32,System.Int32,cAlgo.API.Color,System.Int32)">
      <summary>
        Sets appearance of an indicator output line from startIndex to startIndex + count.
      </summary>
      <param name="line">Indicator Output Line</param>
      <param name="startIndex">Start Index</param>
      <param name="count">Index count</param>
      <param name="color">Color</param>
      <param name="thickness">Thickness</param>
      <signature>
        <code>public void SetLineAppearance(IndicatorLine line, int startIndex, int count, Color color, int thickness)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.SetLineAppearance(cAlgo.API.IndicatorLine,System.Int32,System.Int32,cAlgo.API.Color,System.Int32,cAlgo.API.LineStyle)">
      <summary>
        Sets appearance of an indicator output line from startIndex to startIndex + count.
      </summary>
      <param name="line">Indicator Output Line</param>
      <param name="startIndex">Start Index</param>
      <param name="count">Index count</param>
      <param name="color">Color</param>
      <param name="thickness">Thickness</param>
      <param name="lineStyle">LineStyle</param>
      <signature>
        <code>public void SetLineAppearance(IndicatorLine line, int startIndex, int count, Color color, int thickness, LineStyle lineStyle)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Indicator.LastResult">
      <summary>
        The latest trade result
      </summary>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 20000, null, 10, null);
          if(LastResult.IsSuccessful)
          Print(LastResult.Position.StopLoss);
        </code>
      </example>
      <signature>
        <code>public TradeResult LastResult { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double)">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String)">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="label">Label representing the order</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 100000,
          Symbol.Bid - 2*Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 200000,
          Symbol.Bid - 2*Symbol.PipSize, "myLabel");
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 5*Symbol.PipSize, "112", 10, 10);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry, "first order");
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean)">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 100000,
          Symbol.Bid - 2*Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 200000,
          Symbol.Bid - 2*Symbol.PipSize, "myLabel");
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 5*Symbol.PipSize, "112", 10, 10);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry, "first order");
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry, "first order", HasTrailingStop);
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 100000,
          Symbol.Bid - 2*Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 200000,
          Symbol.Bid - 2*Symbol.PipSize, "myLabel");
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 5*Symbol.PipSize, "112", 10, 10);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry, "first order");
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry, "first order", HasTrailingStop);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry, "first order", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="label">Label that represents the order</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="label">Label that represents the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="label">Label that represents the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="label">Label that represents the order</param>
      <param name="stopLossPips">Stop loss in pips from target price</param>
      <param name="takeProfitPips">Take profit in pips from target price</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel");
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10,10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, Symbol.Bid, LimitOrderOnPlaced);
          }
          private void LimitOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Limit order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="label">Label that represents the order</param>
      <param name="stopLossPips">Stop loss in pips from target price</param>
      <param name="takeProfitPips">Take profit in pips from target price</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel");
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10,10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, Symbol.Bid, LimitOrderOnPlaced);
          }
          private void LimitOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Limit order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", HasTrailingStop);
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="label">Label that represents the order</param>
      <param name="stopLossPips">Stop loss in pips from target price</param>
      <param name="takeProfitPips">Take profit in pips from target price</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel");
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10,10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, Symbol.Bid, LimitOrderOnPlaced);
          }
          private void LimitOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Limit order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", HasTrailingStop);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double)">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String)">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask,
          "myStopOrder");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20);
        </code>
      </example>
      <example>
        <code>
          DateTime expiration = Server.Time.AddHours(1);
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, expiration);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment");
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean)">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask,
          "myStopOrder");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20);
        </code>
      </example>
      <example>
        <code>
          DateTime expiration = Server.Time.AddHours(1);
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, expiration);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment", HasTrailingStop);
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask,
          "myStopOrder");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20);
        </code>
      </example>
      <example>
        <code>
          DateTime expiration = Server.Time.AddHours(1);
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, expiration);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment", HasTrailingStop);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod)">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask,
          "myStopOrder");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20);
        </code>
      </example>
      <example>
        <code>
          DateTime expiration = Server.Time.AddHours(1);
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, expiration);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment", HasTrailingStop);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod stopOrderTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          bool hasTrailingStop = true;
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", hasTrailingStop);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed with HasTrailingStop: {0}", tradeResult.PendingOrder.HasTrailingStop);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          bool hasTrailingStop = true;
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", hasTrailingStop);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed with HasTrailingStop: {0}", tradeResult.PendingOrder.HasTrailingStop);
          }
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          bool hasTrailingStop = true;
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry,
          "order comment", hasTrailingStop, StopTriggerMethod.Trade);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed with stop trigger method: {0}", tradeResult.PendingOrder.StopTriggerMethod);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          bool hasTrailingStop = true;
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", hasTrailingStop);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed with HasTrailingStop: {0}", tradeResult.PendingOrder.HasTrailingStop);
          }
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          bool hasTrailingStop = true;
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry,
          "order comment", hasTrailingStop, StopTriggerMethod.Trade);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed with stop loss trigger method: {0}", tradeResult.PendingOrder.StopLossTriggerMethod);
          }
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          bool hasTrailingStop = true;
          StopTriggerMethod stopLossTriggerMethod = StopTriggerMethod.Trade;
          StopTriggerMethod stopOrderTriggerMethod = StopTriggerMethod.Trade;
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry,
          "order comment", hasTrailingStop, stopLossTriggerMethod, stopOrderTriggerMethod);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed with stop order trigger method: {0}", tradeResult.PendingOrder.StopOrderTriggerMethod);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod stopOrderTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ExecuteMarketOrder(TradeType tradeType, string symbolName, double volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double,System.String)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Representing label</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ExecuteMarketOrder(TradeType tradeType, string symbolName, double volume, string label)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ExecuteMarketOrder(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">order comment</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
        </code>
      </example>
      <signature>
        <code>public TradeResult ExecuteMarketOrder(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, string comment)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment", HasTrailingStop);
        </code>
      </example>
      <signature>
        <code>public TradeResult ExecuteMarketOrder(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment", HasTrailingStop);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage,
          "this is a comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeResult ExecuteMarketOrder(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ExecuteMarketOrderAsync(TradeType tradeType, string symbolName, double volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Label representing the order</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ExecuteMarketOrderAsync(TradeType tradeType, string symbolName, double volume, string label, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ExecuteMarketOrderAsync(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">Order comment</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", OnOpened);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ExecuteMarketOrderAsync(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, string comment, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", OnOpened);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", HasTrailingStop, OnOpened);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ExecuteMarketOrderAsync(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", OnOpened);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", HasTrailingStop, OnOpened);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage,
          "this is a comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ExecuteMarketOrderAsync(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ExecuteMarketRangeOrder(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Representing label</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ExecuteMarketRangeOrder(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ExecuteMarketRangeOrder(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">order comment</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
        </code>
      </example>
      <signature>
        <code>public TradeResult ExecuteMarketRangeOrder(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, string comment)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment", HasTrailingStop);
        </code>
      </example>
      <signature>
        <code>public TradeResult ExecuteMarketRangeOrder(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment", HasTrailingStop);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage,
          "this is a comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeResult ExecuteMarketRangeOrder(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ExecuteMarketRangeOrderAsync(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Label representing the order</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ExecuteMarketRangeOrderAsync(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ExecuteMarketRangeOrderAsync(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">Order comment</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", OnOpened);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ExecuteMarketRangeOrderAsync(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, string comment, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", OnOpened);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", HasTrailingStop, OnOpened);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ExecuteMarketRangeOrderAsync(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", OnOpened);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", HasTrailingStop, OnOpened);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage,
          "this is a comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ExecuteMarketRangeOrderAsync(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double)">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String)">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean)">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod)">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopLimitOrder</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod stopOrderTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopLimitOrder</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod stopOrderTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ReversePosition(cAlgo.API.Position)">
      <summary>
        Modify the direction of trade at position
      </summary>
      <param name="position">Position which is affected</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          ReversePosition(position);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ReversePosition(Position position)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPosition(cAlgo.API.Position,System.Double)">
      <summary>
        Modify the volume of a position
      </summary>
      <param name="position">Position which is affected</param>
      <param name="volume">Volume (in units) of Trade</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          ModifyPosition(position, 20000);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPosition(Position position, double volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ReversePosition(cAlgo.API.Position,System.Double)">
      <summary>
        Modify the direction of trade and volume of a position
      </summary>
      <param name="position">Position which is affected</param>
      <param name="volume">Volume (in units) of Trade</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          ReversePosition(position, 20000);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ReversePosition(Position position, double volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPosition(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Modify the protection of a position
      </summary>
      <param name="position">Position which is affected</param>
      <param name="stopLoss">New stop loss price</param>
      <param name="takeProfit">New take profit price</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          ModifyPosition(position, stopLoss,  takeProfit);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPosition(Position position, double? stopLoss, double? takeProfit)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPosition(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean)">
      <summary>
        Modify the protection of a position
      </summary>
      <param name="position">Position which is affected</param>
      <param name="stopLoss">New stop loss price</param>
      <param name="takeProfit">New take profit price</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          ModifyPosition(position, stopLoss,  takeProfit);
          }
        </code>
      </example>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          bool hasTrailingStop = true;
          ModifyPosition(position, stopLoss,  takeProfit, hasTrailingStop);
          Print("Position was modified, has Trailing Stop = {0}", result.Position.HasTrailingStop);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPosition(Position position, double? stopLoss, double? takeProfit, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPosition(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Modify the protection of a position
      </summary>
      <param name="position">Position which is affected</param>
      <param name="stopLoss">New stop loss price</param>
      <param name="takeProfit">New take profit price</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          ModifyPosition(position, stopLoss,  takeProfit);
          }
        </code>
      </example>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          bool hasTrailingStop = true;
          ModifyPosition(position, stopLoss,  takeProfit, hasTrailingStop);
          Print("Position was modified, has Trailing Stop = {0}", result.Position.HasTrailingStop);
          }
        </code>
      </example>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          bool hasTrailingStop = true;
          ModifyPosition(position, stopLoss,  takeProfit, hasTrailingStop, StopTriggerMethod.Opposite);
          Print("Position was modified, stop loss trigger method = {0}", result.Position.StopLossTriggerMethod);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPosition(Position position, double? stopLoss, double? takeProfit, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ClosePosition(cAlgo.API.Position)">
      <summary>
        Close a position
      </summary>
      <param name="position">Position to close</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ClosePosition(Position position)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ClosePosition(cAlgo.API.Position,System.Int64)">
      <summary>
        Close a position
      </summary>
      <param name="position">Position to close</param>
      <param name="volume">Volume which is closed</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ClosePosition(position);
        </code>
      </example>
      <example>
        <code>
          if (position.Volume &gt;= 20000)
          ClosePosition(position, 10000);
        </code>
      </example>
      <signature>
        <code>public TradeResult ClosePosition(Position position, long volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ClosePosition(cAlgo.API.Position,System.Double)">
      <summary>
        Close a position
      </summary>
      <param name="position">Position to close</param>
      <param name="volume">Volume which is closed</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ClosePosition(position);
        </code>
      </example>
      <example>
        <code>
          if (position.Volume &gt;= 20000)
          ClosePosition(position, 10000);
        </code>
      </example>
      <signature>
        <code>public TradeResult ClosePosition(Position position, double volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ClosePositionAsync(cAlgo.API.Position,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Close a position in asynchronous execution mode
      </summary>
      <param name="position">The position to close</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ClosePositionAsync(Position position, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ClosePositionAsync(cAlgo.API.Position,System.Int64,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Close a position in asynchronous execution mode
      </summary>
      <param name="position">The position to close</param>
      <param name="volume">The volume to close</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ClosePositionAsync(position);
        </code>
      </example>
      <example>
        <code>
          if (position.Volume &gt;= 20000)
          ClosePositionAsync(position, 10000);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ClosePositionAsync(Position position, long volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ClosePositionAsync(cAlgo.API.Position,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Close a position in asynchronous execution mode
      </summary>
      <param name="position">The position to close</param>
      <param name="volume">The volume to close</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ClosePositionAsync(position);
        </code>
      </example>
      <example>
        <code>
          if (position.Volume &gt;= 20000)
          ClosePositionAsync(position, 10000);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ClosePositionAsync(Position position, double volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ReversePositionAsync(cAlgo.API.Position,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify Position in asynchronous execution mode
      </summary>
      <param name="position">Position to modify</param>
      <param name="callback">Method that is called when position is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          ReversePositionAsync(position, TradeType.Sell);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ReversePositionAsync(Position position, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPositionAsync(cAlgo.API.Position,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify Position in asynchronous execution mode
      </summary>
      <param name="position">Position to modify</param>
      <param name="volume">New volume</param>
      <param name="callback">Method that is called when position is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          ModifyPositionAsync(position, 20000);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPositionAsync(Position position, double volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ReversePositionAsync(cAlgo.API.Position,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify Position in asynchronous execution mode
      </summary>
      <param name="position">Position to modify</param>
      <param name="volume">New volume</param>
      <param name="callback">Method that is called when position is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          ReversePositionAsync(position, 20000);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ReversePositionAsync(Position position, double volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPositionAsync(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify Position in asynchronous execution mode
      </summary>
      <param name="position">Position to modify</param>
      <param name="stopLoss">New stop loss price</param>
      <param name="takeProfit">New take profit price</param>
      <param name="callback">Method that is called when position is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          ModifyPositionAsync(position, stopLoss,  takeProfit);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPositionAsync(Position position, double? stopLoss, double? takeProfit, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPositionAsync(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify Position in asynchronous execution mode
      </summary>
      <param name="position">Position to modify</param>
      <param name="stopLoss">New stop loss price</param>
      <param name="takeProfit">New take profit price</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">Method that is called when position is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          ModifyPositionAsync(position, stopLoss,  takeProfit);
          }
        </code>
      </example>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          bool hasTrailingStop = true;
          ModifyPositionAsync(position, stopLoss,  takeProfit, hasTrailingStop);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPositionAsync(Position position, double? stopLoss, double? takeProfit, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPositionAsync(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify Position in asynchronous execution mode
      </summary>
      <param name="position">Position to modify</param>
      <param name="stopLoss">New stop loss price</param>
      <param name="takeProfit">New take profit price</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">Method that is called when position is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          ModifyPositionAsync(position, stopLoss,  takeProfit);
          }
        </code>
      </example>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          bool hasTrailingStop = true;
          ModifyPositionAsync(position, stopLoss,  takeProfit, hasTrailingStop);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPositionAsync(Position position, double? stopLoss, double? takeProfit, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.CancelPendingOrder(cAlgo.API.PendingOrder)">
      <summary>
        Cancel a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          CancelPendingOrder(order);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult CancelPendingOrder(PendingOrder pendingOrder)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double)">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Int64)">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <param name="volume">New volume in units for the order</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, long volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double)">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <param name="volume">New volume in units for the order</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean)">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, hasTrailingStop);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 10000, hasTrailingStop, StopTriggerMethod.Trade);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop, StopTriggerMethod.Trade, StopTriggerMethod.Trade);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod? stopOrderTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{System.Double})">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop, StopTriggerMethod.Trade, StopTriggerMethod.Trade, 2);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod? stopOrderTriggerMethod, double? stopLimitRangePips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.CancelPendingOrderAsync(cAlgo.API.PendingOrder,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Cancel a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to cancel</param>
      <param name="callback">Method that is called when pending order is cancelled</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          if (PendingOrders.Count &gt; 0)
          {
          var pendingOrder = PendingOrders[0];
          CancelPendingOrderAsync(pendingOrder);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation CancelPendingOrderAsync(PendingOrder pendingOrder, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Int64,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, long volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop, StopTriggerMethod.Trade, StopTriggerMethod.Opposite);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod? stopOrderTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop, StopTriggerMethod.Trade);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Indicator.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, hasTrailingStop);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, hasTrailingStop, StopTriggerMethod.Trade);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, hasTrailingStop, 5, StopTriggerMethod.Trade, StopTriggerMethod.Opposite);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod? stopOrderTriggerMethod, double? stopLimitRangePips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.StandardIndicator">
      <summary>
        Base type for standard indicators.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.General" />
      <signature>
        <code>public interface StandardIndicator</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.StandardIndicator.AddToChart">
      <summary>
        Adds current indicator to chart if not added yet.
      </summary>
      <remarks>
        If Indicator with same parameter values already added then it will return existing indicator instance.
      </remarks>
      <returns>Chart Indicator</returns>
      <signature>
        <code>public ChartIndicator AddToChart()</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Internals.AccountType">
      <summary>
        Returns current account type
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This example shows how to use the AccountType
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class AccountTypeSample : Indicator
          {
          protected override void Initialize()
          {
          var text = string.Format("Account Type: {0}", Account.AccountType);

          Chart.DrawStaticText("text", text, VerticalAlignment.Top, HorizontalAlignment.Right, Color.Red);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Internals.IAccount" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Account" />
      <signature>
        <code>public enum AccountType</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Internals.AccountType.Hedged">
      <summary>
        Account type that allows hedged positions
      </summary>
      <signature>
        <code>public static AccountType Hedged;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Internals.AccountType.Netted">
      <summary>
        Account type that allows only single net position per symbol
      </summary>
      <signature>
        <code>public static AccountType Netted;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Internals.Algo">
      <summary>
        The container class for the main cAlgo.API Interfaces.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.General" />
      <signature>
        <code>public class Algo</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.InstanceId">
      <summary>
        Returns unique ID of current running instance.
      </summary>
      <signature>
        <code>public string InstanceId { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.LocalStorage">
      <summary>
        Access the local storage API.
      </summary>
      <signature>
        <code>public LocalStorage LocalStorage { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.Indicators">
      <summary>
        Access to the built-in Indicators.
      </summary>
      <example>
        <code>

          protected override void Initialize()
          {
          //Use MarketSeries price data as parameters to indicators
          _ma = Indicators.SimpleMovingAverage(MarketSeries.Close, 20);
          }

        </code>
      </example>
      <signature>
        <code>public IIndicatorsAccessor Indicators { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.Notifications">
      <summary>
        Represents the notifications, such as sounds and email.
      </summary>
      <example>
        <code>
          Notifications.PlaySound(@"C:\Windows\Media\notify.wav");
        </code>
      </example>
      <example>
        <code>
          string emailBody = "this is the message send";
          Notifications.SendEmail("from@example.com", "to@example.com", "my subject", emailBody);
        </code>
      </example>
      <signature>
        <code>public INotifications Notifications { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.TimeFrame">
      <summary>
        Access to the TimeFrame values.
      </summary>
      <example>
        <code>
          if(TimeFrame == TimeFrame.Daily)
          {
          //...
          }
        </code>
      </example>
      <signature>
        <code>public TimeFrame TimeFrame { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.Server">
      <summary>
        Server related information.
      </summary>
      <example>
        <code>
          protected override void OnTick()
          {
          Print("The server time is: {0}", Server.Time);
          }
        </code>
      </example>
      <signature>
        <code>public IServer Server { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.TimeZone">
      <summary>
        TimeZone of a cBot or an Indicator.
      </summary>
      <signature>
        <code>public TimeZoneInfo TimeZone { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.Positions">
      <summary>
        The list of all open positions of the account.
      </summary>
      <example>
        <code>
          foreach (var position in Positions)
          {
          if (position.StopLoss == null)
          ModifyPosition(position, 10, position.TakeProfit);
          }
        </code>
      </example>
      <example>
        var position = Positions.Find("myLabel", Symbol, TradeType.Sell);
      </example>
      <signature>
        <code>public Positions Positions { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.PendingOrders">
      <summary>
        The array of all Pending Orders of the account.
      </summary>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfit,
          order.ExpirationTime);
          }
        </code>
      </example>
      <signature>
        <code>public PendingOrders PendingOrders { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.History">
      <summary>
        Represents the collection of all historical trades of the account.
      </summary>
      <example>
        <code>
          foreach (HistoricalTrade trade in History)
          {
          Print(trade.EntryTime);
          }
        </code>
      </example>
      <signature>
        <code>public History History { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.Timer">
      <summary>
        Access to the Timer object.
      </summary>
      <example>
        <code>
          protected override void OnStart()
          {
          Timer.Start(1);//start timer with 1 second interval
          }

          protected override void OnTimer()
          {
          ChartObjects.DrawText("time", Time.ToString("HH:mm:ss"), StaticPosition.TopLeft);
          }
        </code>
      </example>
      <signature>
        <code>public Timer Timer { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.Time">
      <summary>
        Returns the current server time. The shortcut to the Server.Time property.
      </summary>
      <example>
        <code>
          protected override void OnTick()
          {
          Print("The Server Time is: {0}", Time);
          }
        </code>
      </example>
      <signature>
        <code>public DateTime Time { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.TimeInUtc">
      <summary>
        Returns the current server time in UTC. The shortcut to the Server.TimeInUtc property.
      </summary>
      <example>
        <code>
          protected override void OnTick()
          {
          Print("The Server Time in UTC is: {0}", TimeInUtc);
          }
        </code>
      </example>
      <signature>
        <code>public DateTime TimeInUtc { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.RunningMode">
      <summary>
        Defines if a cBot is running in real time, in the silent backtesting mode, in the visual backtesting mode, or in
        the optimization mode.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public RunningMode RunningMode { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.IsBacktesting">
      <summary>
        True if a cBot is in the Backtesting mode, otherwise False.
      </summary>
      <example>
        <code>
          if(IsBacktesting)
          {
          Print(MarketSeries.OpenTime.LastValue);
          }
        </code>
      </example>
      <signature>
        <code>public bool IsBacktesting { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.Application">
      <summary>
        Represents the application.
      </summary>
      <signature>
        <code>public Application Application { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.AssetConverter">
      <summary>
        Converts an asset to another asset.
      </summary>
      <signature>
        <code>public IAssetConverter AssetConverter { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Algo.OnException(System.Exception)">
      <summary>
        Called on each unhandled exception.
      </summary>
      <example>
        <code>
          protected override void OnException(Exception exception)
          {
          // Place your exception handling code here
          Print(exception.Message);
          }
        </code>
      </example>
      <signature>
        <code>public void OnException(Exception exception)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Algo.OnTimer">
      <summary>
        Called when the timer interval has elapsed.
      </summary>
      <example>
        <code>
          protected override void OnStart()
          {
          Timer.Start(1);//start timer with 1 second interval
          }

          protected override void OnTimer()
          {
          ChartObjects.DrawText("time", Time.ToString("HH:mm:ss"), StaticPosition.TopLeft);
          }
        </code>
      </example>
      <signature>
        <code>public void OnTimer()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Algo.BeginInvokeOnMainThread(System.Action)">
      <summary>
        Invokes asynchronously the specified code on the main cBot or Indicator thread.
      </summary>
      <param name="action">The code to invoke on the main cBot/Indicator thread</param>
      <signature>
        <code>public void BeginInvokeOnMainThread(Action action)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Algo.RefreshData">
      <summary>
        Updates MarketSeries, Positions, PendingOrders, History, etc.
        And sends postponed events after Thread sleep call.
        If you put the main thread on sleep by calling Thread sleep method
        then you have to call RefreshData after Thread wakes up to send
        the postponed events while thread was sleeping.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using System.Linq;
          using System.Threading;

          namespace NewcBot
          {
          [Robot(AccessRights = AccessRights.None)]
          public class NewcBot : Robot
          {
          protected override void OnStart()
          {
          var executionResults = new TradeOperation[50];
          for (var i = 0; i &lt; 50; i++)
          {
          executionResults[i] = ExecuteMarketOrderAsync(i % 2 == 0 ? TradeType.Buy : TradeType.Sell, SymbolName, Symbol.VolumeInUnitsMin);
          }

          Print("All orders sent");
          while (executionResults.Any(operation =&gt; operation.IsExecuting))
          {
          Print("Waiting...");
          Thread.Sleep(100);
          // If you remove the RefreshData method call
          // cBot main thread will stuck and the rest
          // of the code will not be executed
          RefreshData();

          }

          Print("Closing Positions");
          foreach (var position in Positions)
          {

          if (position.TradeType == TradeType.Sell) continue;
          _ = ClosePositionAsync(position);
          }
          }
          }
        </code>
      </example>
      <signature>
        <code>public void RefreshData()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.MarketSessions">
      <summary>
        Returns current market sessions.
      </summary>
      <signature>
        <code>public MarketSession MarketSessions { get; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Internals.Algo.MarketSessionsChanged">
      <summary>
        Occurs when market sessions change.
      </summary>
      <signature>
        <code>public event Action&lt;MarketSessionChangedEventArgs&gt; MarketSessionsChanged;</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.Chart">
      <summary>
        Represents the chart where cBot or Indicator is launched.
      </summary>
      <remarks>Chart can be null for indicators that were run by a plugin.</remarks>
      <signature>
        <code>public Chart Chart { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.Assets">
      <summary>
        Returns list of all available assets.
      </summary>
      <signature>
        <code>public Assets Assets { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.SymbolName">
      <summary>
        Gets or sets the symbol name.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public string SymbolName { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.Symbols">
      <summary>
        Gets the symbol names.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public Symbols Symbols { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.Symbol">
      <summary>
        Represents the current symbol provides access to its properties and certain methods
      </summary>
      <example>
        <code>
          var ask = Symbol.Ask;
          var bid = Symbol.Bid;
          var digits = Symbol.Digits;
          var pip = Symbol.PipSize;
          var maxVolume = Symbol.VolumeMax;
          var minVolume = Symbol.VolumeMin;
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          volume = Symbol.NormalizeVolume(volume, RoundingMode.Down);
        </code>
      </example>
      <signature>
        <code>public Symbol Symbol { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.Bid">
      <summary>
        Gets the symbol bid price.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public double Bid { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.Ask">
      <summary>
        Gets the symbol ask price.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public double Ask { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.Watchlists">
      <summary>
        Gets the watchlist.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public Watchlists Watchlists { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.Bars">
      <summary>
        The collection of Bar objects.
      </summary>
      <signature>
        <code>public Bars Bars { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.MarketData">
      <summary>
        Provides access to the Depth of Market Data.
      </summary>
      <example>
        <code>
          private MarketDepth _md;
          _md = MarketData.GetMarketDepth("GBPUSD");
        </code>
      </example>
      <signature>
        <code>public MarketData MarketData { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Algo.CreateDataSeries">
      <summary>
        Initialization of an IndicatorDataSeries.
      </summary>
      <example>
        <code>
          private IndicatorDataSeries series;

          protected override void Initialize()
          {
          series = CreateDataSeries();
          }
          public override void Calculate(int index)
          {
          series[index] = (MarketSeries.Close[index] + MarketSeries.Open[index]) / 2;
          }
        </code>
      </example>
      <signature>
        <code>public IndicatorDataSeries CreateDataSeries()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.Http">
      <summary>
        Send HTTP requests.
      </summary>
      <signature>
        <code>public Http Http { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Algo.Sleep(System.TimeSpan)">
      <summary>
        Suspends the algorithm until the specified <c>timespan</c> elapses.
      </summary>
      <param name="timespan">
        The <c>Timespan</c> during which the algorithm should not react to any events.
      </param>
      <signature>
        <code>public void Sleep(TimeSpan timespan)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Algo.Sleep(System.Int32)">
      <summary>
        Suspends the algorithm until the specified number of milliseconds elapses.
      </summary>
      <param name="milliseconds">The number of milliseconds for which the algorithm should be suspended.</param>
      <signature>
        <code>public void Sleep(int milliseconds)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Algo.Sleep(System.DateTime)">
      <summary>
        Suspends the algorithm until the specified <c>datetime</c>.
      </summary>
      <param name="dateTime">
        The <c>DateTime</c> until the algorithm should be suspended.
      </param>
      <signature>
        <code>public void Sleep(DateTime dateTime)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.ChartIndicators">
      <summary>
        Gets the <c>ChartIndicators</c> of an algorithm.
      </summary>
      <signature>
        <code>public ChartIndicators ChartIndicators { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.ChartRobots">
      <summary>
        Gets the <c>ChartRobots</c> of an algorithm.
      </summary>
      <signature>
        <code>public ChartRobots ChartRobots { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Algo.AlgoRegistry">
      <summary>
        Provides access to installed Algorithms.
      </summary>
      <signature>
        <code>public AlgoRegistry AlgoRegistry { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Algo.Print(System.Object)">
      <summary>
        Prints text representation of the specified object to the log.
      </summary>
      <param name="value">Object to print.</param>
      <example>
        <code>
          Print(Account.Positions.Count);
        </code>
      </example>
      <signature>
        <code>public void Print(object value)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Algo.Print(System.Object[])">
      <summary>
        Prints a message to the Log
      </summary>
      <param name="parameters">Parameters to print</param>
      <example>
        <code>
          Print(Account.Balance, " ", Account.Equity);
        </code>
      </example>
      <signature>
        <code>public void Print(object[] parameters)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Algo.Print(System.String,System.Object[])">
      <summary>
        Prints a message to the Log.
      </summary>
      <param name="message">Message to print.</param>
      <param name="parameters">Parameters (optional)</param>
      <example>
        <code>
          Print("Current Balance is {0}, Equity is {1}.", Account.Balance, Account.Equity);
        </code>
      </example>
      <signature>
        <code>public void Print(string message, object[] parameters)</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.Account">
      <summary>
        Account
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.AlgoRegistry">
      <summary>
        AlgoRegistry
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.Application">
      <summary>
        Application
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.Attributes">
      <summary>
        Attributes
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.Chart">
      <summary>
        Chart
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawings">
      <summary>
        Chart/Drawings
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawingsShapes">
      <summary>
        Chart/Drawings/Shapes
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.ChartDrawingsFibonacci">
      <summary>
        Chart/Drawings/Fibonacci
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.ChartIndicators">
      <summary>
        Chart/Indicators
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.ChartRobots">
      <summary>
        Chart/Robots
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.Collections">
      <summary>
        Collections
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.CollectionsDataSeries">
      <summary>
        Collections/Data Series
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.Controls">
      <summary>
        Controls
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayout">
      <summary>
        Controls/Layout
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayoutScrollViewer">
      <summary>
        Controls/Layout/ScrollViewer
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayoutGrid">
      <summary>
        Controls/Layout/Grid
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsLayoutShapes">
      <summary>
        Controls/Layout/Shapes
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsStyles">
      <summary>
        Controls/Styles
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsWindows">
      <summary>
        Controls/Windows
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.EventArgs">
      <summary>
        EventArgs
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.General">
      <summary>
        General
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.Http">
      <summary>
        HTTP
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators">
      <summary>
        Indicators
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.LocalStorage">
      <summary>
        Local storage
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.MarketData">
      <summary>
        Market Data
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataAssets">
      <summary>
        Market Data/Assets
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataBars">
      <summary>
        Market Data/Bars
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataMarketDepth">
      <summary>
        Market Data/Market Depth
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataSymbols">
      <summary>
        Market Data/Symbols
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataTicks">
      <summary>
        Market Data/Ticks
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.Notifications">
      <summary>
        Notifications
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.Optimization">
      <summary>
        Optimization
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.Period">
      <summary>
        Period
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.Permissions">
      <summary>
        Permissions
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin">
      <summary>
        Plugin
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.Timer">
      <summary>
        Timer
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.Trading">
      <summary>
        Trading
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.TradingOrders">
      <summary>
        Trading/Orders
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.TradingPositions">
      <summary>
        Trading/Positions
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.TradingHistory">
      <summary>
        Trading/History
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.Utility">
      <summary>
        Utility
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.Watchlists">
      <summary>
        Watchlists
      </summary>
    </member>
    <member name="F:cAlgo.API.Internals.ApiReferenceGroup.WebSocket">
      <summary>
        WebSocket
      </summary>
    </member>
    <member name="T:cAlgo.API.Internals.IAccount">
      <summary>
        Contains the current account information.
      </summary>
      <example>
        <code>

          // Account Properties

          // Current Account Balance
          double balance = Account.Balance;

          // Current Account Currency e.g. EUR
          string currency = Account.Currency;

          // Current Account Equity
          double equity = Account.Equity;

          // Current Account Free Margin
          double freemargin = Account.FreeMargin;

          // Current Account Margin
          double margin = Account.Margin;

          //Margin Level = Equity / Margin * 100
          double? marginlevel = Account.MarginLevel;
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to use Account object properties to get your trading account data
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class AccountSample : Indicator
          {
          protected override void Initialize()
          {
          var grid = new Grid(16, 2)
          {
          BackgroundColor = Color.Gold,
          Opacity = 0.6,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          };

          var style = new Style();

          style.Set(ControlProperty.Padding, 5);
          style.Set(ControlProperty.Margin, 5);
          style.Set(ControlProperty.FontWeight, FontWeight.ExtraBold);
          style.Set(ControlProperty.BackgroundColor, Color.Black);

          grid.AddChild(new TextBlock { Text = "Account Info", Style = style, HorizontalAlignment = HorizontalAlignment.Center }, 0, 0, 1, 2);

          grid.AddChild(new TextBlock { Text = "Type", Style = style }, 1, 0);
          grid.AddChild(new TextBlock { Text = Account.AccountType.ToString(), Style = style }, 1, 1);

          grid.AddChild(new TextBlock { Text = "Is Live", Style = style }, 2, 0);
          grid.AddChild(new TextBlock { Text = Account.IsLive.ToString(), Style = style }, 2, 1);

          grid.AddChild(new TextBlock { Text = "Balance", Style = style }, 3, 0);
          grid.AddChild(new TextBlock { Text = Account.Balance.ToString(), Style = style }, 3, 1);

          grid.AddChild(new TextBlock { Text = "Broker Name", Style = style }, 4, 0);
          grid.AddChild(new TextBlock { Text = Account.BrokerName, Style = style }, 4, 1);

          grid.AddChild(new TextBlock { Text = "Currency", Style = style }, 5, 0);
          grid.AddChild(new TextBlock { Text = Account.Currency, Style = style }, 5, 1);

          grid.AddChild(new TextBlock { Text = "Number", Style = style }, 6, 0);
          grid.AddChild(new TextBlock { Text = Account.Number.ToString(), Style = style }, 6, 1);

          grid.AddChild(new TextBlock { Text = "Equity", Style = style }, 7, 0);
          grid.AddChild(new TextBlock { Text = Account.Equity.ToString(), Style = style }, 7, 1);

          grid.AddChild(new TextBlock { Text = "Free Margin", Style = style }, 8, 0);
          grid.AddChild(new TextBlock { Text = Account.FreeMargin.ToString(), Style = style }, 8, 1);

          grid.AddChild(new TextBlock { Text = "Margin", Style = style }, 9, 0);
          grid.AddChild(new TextBlock { Text = Account.Margin.ToString(), Style = style }, 9, 1);

          grid.AddChild(new TextBlock { Text = "Margin Level", Style = style }, 10, 0);
          grid.AddChild(new TextBlock { Text = Account.MarginLevel.ToString(), Style = style }, 10, 1);

          grid.AddChild(new TextBlock { Text = "Precise Leverage", Style = style }, 11, 0);
          grid.AddChild(new TextBlock { Text = Account.PreciseLeverage.ToString(), Style = style }, 11, 1);

          grid.AddChild(new TextBlock { Text = "Stop Out Level", Style = style }, 12, 0);
          grid.AddChild(new TextBlock { Text = Account.StopOutLevel.ToString(), Style = style }, 12, 1);

          grid.AddChild(new TextBlock { Text = "Unrealized Gross Profit", Style = style }, 13, 0);
          grid.AddChild(new TextBlock { Text = Account.UnrealizedGrossProfit.ToString(), Style = style }, 13, 1);

          grid.AddChild(new TextBlock { Text = "Unrealized Net Profit", Style = style }, 14, 0);
          grid.AddChild(new TextBlock { Text = Account.UnrealizedNetProfit.ToString(), Style = style }, 14, 1);

          grid.AddChild(new TextBlock { Text = "User Id", Style = style }, 15, 0);
          grid.AddChild(new TextBlock { Text = Account.UserId.ToString(), Style = style }, 15, 1);

          Chart.AddControl(grid);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Account" />
      <signature>
        <code>public interface IAccount</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IAccount.AccountType">
      <summary>
        Returns the current account type.
      </summary>
      <signature>
        <code>public AccountType AccountType { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IAccount.Balance">
      <summary>
        Returns the balance of the current account.
      </summary>
      <example>
        <code>
          double balancebefore;
          double balanceafter;

          protected override void OnStart()
          {
          // store the balance upon start up of the robot
          balancebefore = Account.Balance;
          }


          protected override void OnStop()
          {
          // Store the balance upon stop of the robot.
          balanceafter = Account.Balance;
          // print the difference
          Print("The difference of balancebefore and balanceafter is: {0}", balancebefore-balanceafter);
          }
        </code>
      </example>
      <example>
        <code>
          if ( Account.Balance &lt; 0 )
          Stop();
        </code>
      </example>
      <signature>
        <code>public double Balance { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IAccount.Equity">
      <summary>
        Represents the equity of the current account (balance minus Unrealized Net Loss plus Unrealized Net Profit plus Bonus).
      </summary>
      <example>
        <code>
          Print("The equity of this account is: {0}", Account.Equity);
        </code>
      </example>
      <signature>
        <code>public double Equity { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IAccount.Margin">
      <summary>
        Represents the margin of the current account.
      </summary>
      <example>
        <code>
          Print("The margin of this account is: {0}", Account.Margin);
        </code>
      </example>
      <signature>
        <code>public double Margin { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IAccount.FreeMargin">
      <summary>
        Represents the free margin of the current account.
      </summary>
      <example>
        <code>
          Print("The free margin of this account is: {0}", Account.FreeMargin);
        </code>
      </example>
      <signature>
        <code>public double FreeMargin { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IAccount.MarginLevel">
      <summary>
        Represents the margin level of the current account.
        Margin Level (in %) is calculated using this formula:
        Equity / Margin * 100
      </summary>
      <example>
        <code>
          Print("The marginlevel of this account is: {0}", Account.MarginLevel);
        </code>
      </example>
      <signature>
        <code>public double? MarginLevel { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IAccount.IsLive">
      <summary>
        Defines if the account is Live or Demo. True if the Account is Live, False if it is a Demo.
      </summary>
      <example>
        <code>
          if (Account.IsLive)
          Print("Live Account");
          else
          Print("Demo Account");
        </code>
      </example>
      <signature>
        <code>public bool IsLive { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IAccount.Number">
      <summary>
        Returns the number of the current account, e.g. 123456.
      </summary>
      <signature>
        <code>public int Number { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IAccount.BrokerName">
      <summary>
        Returns the broker name of the current account.
      </summary>
      <signature>
        <code>public string BrokerName { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IAccount.UnrealizedGrossProfit">
      <summary>
        Gets the Unrealized Gross profit value.
      </summary>
      <signature>
        <code>public double UnrealizedGrossProfit { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IAccount.UnrealizedNetProfit">
      <summary>
        Gets the Unrealized Net profit value.
      </summary>
      <signature>
        <code>public double UnrealizedNetProfit { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IAccount.PreciseLeverage">
      <summary>
        Gets the precise account leverage value.
      </summary>
      <example>
        <code>
          var leverage = Account.Leverage;
        </code>
      </example>
      <signature>
        <code>public double PreciseLeverage { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IAccount.StopOutLevel">
      <summary>
        Stop Out level is a lowest allowed Margin Level for account. If Margin Level is less than Stop Out, position will be closed sequentially until Margin Level is greater than Stop Out.
      </summary>
      <signature>
        <code>public double StopOutLevel { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IAccount.UserId">
      <summary>
        Gets the user ID.
      </summary>
      <signature>
        <code>public long UserId { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IAccount.Asset">
      <summary>
        Gets the account deposit asset/currency
      </summary>
      <signature>
        <code>public Asset Asset { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IAccount.TotalMarginCalculationType">
      <summary>
        Type of total margin requirements per Symbol.
      </summary>
      <signature>
        <code>public TotalMarginCalculationType TotalMarginCalculationType { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IAccount.Credit">
      <summary>
        Gets the credit of the current account.
      </summary>
      <signature>
        <code>public double Credit { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IAccount.UserNickName">
      <summary>
        Gets the user nick name.
      </summary>
      <signature>
        <code>public string UserNickName { get; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Internals.IAccount.Switched">
      <summary>
        Occurs when user switch his account.
      </summary>
      <signature>
        <code>public event Action&lt;AccountSwitchedEventArgs&gt; Switched;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Internals.IAssetConverter">
      <summary>
        Its an interface for converting an asset / currency value to another asset / currency value.
      </summary>
      <example>
        <code>
          var convertResult = AssetConverter.Convert(10, "USD", "CAD");
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketData" />
      <signature>
        <code>public interface IAssetConverter</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IAssetConverter.Convert(System.Double,cAlgo.API.Asset,cAlgo.API.Asset)">
      <summary>
        Converts an asset to another asset.
      </summary>
      <param name="value">The value you want to convert from Asset</param>
      <param name="from">Actual or current asset of the value</param>
      <param name="to">Target asset</param>
      <returns>Value in to / target asset</returns>
      <signature>
        <code>public double Convert(double value, Asset from, Asset to)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IAssetConverter.Convert(System.Double,System.String,System.String)">
      <summary>
        Converts an asset to another asset.
      </summary>
      <param name="value">The value you want to convert from Asset</param>
      <param name="from">Actual or current asset of the value</param>
      <param name="to">Target asset</param>
      <returns>Value in to / target asset</returns>
      <signature>
        <code>public double Convert(double value, string from, string to)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IAssetConverter.Convert(System.Double,cAlgo.API.Asset,System.String)">
      <summary>
        Converts an asset to another asset.
      </summary>
      <param name="value">The value you want to convert from Asset</param>
      <param name="from">Actual or current asset of the value</param>
      <param name="to">Target asset name</param>
      <returns>Value in to / target asset</returns>
      <signature>
        <code>public double Convert(double value, Asset from, string to)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IAssetConverter.Convert(System.Double,System.String,cAlgo.API.Asset)">
      <summary>
        Converts an asset to another asset.
      </summary>
      <param name="value">The value you want to convert from Asset</param>
      <param name="from">Actual or current asset name of the value</param>
      <param name="to">Target asset</param>
      <returns>Value in to / target asset</returns>
      <signature>
        <code>public double Convert(double value, string from, Asset to)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Internals.IIndicatorsAccessor">
      <summary>
        Accessor to Indicators
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public interface IIndicatorsAccessor</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.GetIndicator``1(System.Object[])">
      <summary>
        Initializes the custom indicator
      </summary>
      <typeparam name="TIndicator">The custom indicator name</typeparam>
      <param name="parameterValues">The custom indicator parameters</param>
      <returns>Custom indicator instance</returns>
      <example>
        <code>
          private SampleSMA sma;

          protected override void Initialize()
          {
          sma = Indicators.GetIndicator&lt;SampleSMA&gt;(Source, Period);
          }
          public override void Calculate(int index)
          {
          // Display the sma result on the chart
          Result[index] = sma.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public TIndicator GetIndicator(object[] parameterValues)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.GetIndicator``1(cAlgo.API.Bars,System.Object[])">
      <summary>
        Initializes the custom indicator
      </summary>
      <typeparam name="TIndicator">The custom indicator name</typeparam>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="parameterValues">The custom indicator parameters</param>
      <returns>Custom indicator instance</returns>
      <example>
        <code>
          private SampleSMA sma;

          protected override void Initialize()
          {
          sma = Indicators.GetIndicator&lt;SampleSMA&gt;(Source, Period);
          }
          public override void Calculate(int index)
          {
          // Display the sma result on the chart
          Result[index] = sma.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public TIndicator GetIndicator(Bars bars, object[] parameterValues)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MovingAverage(cAlgo.API.DataSeries,System.Int32,cAlgo.API.MovingAverageType)">
      <summary>
        Moving Average indicators are used to smooth data producing trend indicators.
      </summary>
      <param name="source">The source data used for the MA calculation.</param>
      <param name="periods">The periods used in the calculation.</param>
      <param name="maType">Method of calculation of MA.</param>
      <returns>Moving Average indicator instance</returns>
      <example>
        <code>
          private MovingAverage ma;

          protected override void Initialize()
          {
          ma = Indicators.MovingAverage(MarketSeries.Close, 50, MovingAverageType.Simple);
          }
          public override void Calculate(int index)
          {
          // Display the ma result on the chart
          Result[index] = ma.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public MovingAverage MovingAverage(DataSeries source, int periods, MovingAverageType maType)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ExponentialMovingAverage(cAlgo.API.DataSeries,System.Int32)">
      <summary>
        The Exponential Moving Average smoothes the price data producing a trend indicator.
      </summary>
      <param name="source">The source data used for the EMA calculation.</param>
      <param name="periods">The periods used in the calculation.</param>
      <returns>Exponential Moving Average indicator instance</returns>
      <example>
        <code>
          private ExponentialMovingAverage ema;

          protected override void Initialize()
          {
          ema = Indicators.ExponentialMovingAverage(MarketSeries.Close, 50);
          }

          public override void Calculate(int index)
          {
          // Display the ema result on the chart
          Result[index] = ema.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public ExponentialMovingAverage ExponentialMovingAverage(DataSeries source, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WeightedMovingAverage(cAlgo.API.DataSeries,System.Int32)">
      <summary>
        The Weighted Moving Average smoothes the price data producing a trend indicator.
      </summary>
      <param name="source">The source data used for WMA calculation.</param>
      <param name="periods">The periods used in the calculation.</param>
      <returns>Weighted Moving Average indicator instance</returns>
      <example>
        <code>

          private WeigthedMovingAverage wma;

          protected override void Initialize()
          {
          wma = Indicators.WeightedMovingAverage(MarketSeries.Close, 20);
          }
          public override void Calculate(int index)
          {
          Result[index] = wma.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public WeightedMovingAverage WeightedMovingAverage(DataSeries source, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.SimpleMovingAverage(cAlgo.API.DataSeries,System.Int32)">
      <summary>
        The simple moving average smoothes the price data producing a trend indicator
      </summary>
      <param name="source">The source data used for SMA calculation.</param>
      <param name="periods">The periods used in the calculation.</param>
      <returns>Simple Moving Average indicator instance</returns>
      <example>
        <code>

          private SimpleMovingAverage sma;

          protected override void Initialize()
          {
          sma = Indicators.SimpleMovingAverage(MarketSeries.Close, 14);
          }
          public override void Calculate(int index)
          {
          Result[index] = sma.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public SimpleMovingAverage SimpleMovingAverage(DataSeries source, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TriangularMovingAverage(cAlgo.API.DataSeries,System.Int32)">
      <summary>
        The Triangular Moving Average is averaged twice to produce a double smoothed trend indicator
      </summary>
      <param name="source">The source data used for TMA calculation.</param>
      <param name="periods">The periods used in the calculation.</param>
      <returns>Triangular Moving Average indicator instance</returns>
      <example>
        <code>
          [Parameter]
          public DataSeries Source { get; set; }

          [Output("Result", Color = Colors.Orange)]
          public IndicatorDataSeries Result { get; set; }

          private SimpleMovingAverage tma;

          protected override void Initialize()
          {
          tma = Indicators.TriangularMovingAverage(Source, 10);
          }
          public override void Calculate(int index)
          {
          Result[index] = tma.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public TriangularMovingAverage TriangularMovingAverage(DataSeries source, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.HighMinusLow">
      <summary>
        The High Minus Low indicator is used to compute the range of daily bars
      </summary>
      <returns>High Minus Low indicator instance</returns>
      <example>
        <code>
          [Output("Main")]
          public IndicatorDataSeries Result {get; set;}

          private HighMinusLow highMinusLow;

          protected override void Initialize()
          {
          highMinusLow = Indicators.HighMinusLow();
          }
          public override void Calculate(int index)
          {
          // Display the High Minus Low indicator on the chart
          Result[index] = highMinusLow.Result[index];
          Print("Previous HighMinusLow is: {0}", highMinusLow.Result[index-1]);
          }
          //...
        </code>
      </example>
      <signature>
        <code>public HighMinusLow HighMinusLow()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.HighMinusLow(cAlgo.API.Bars)">
      <summary>
        The High Minus Low indicator is used to compute the range of daily bars
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <returns>High Minus Low indicator instance</returns>
      <example>
        <code>
          [Output("Main")]
          public IndicatorDataSeries Result {get; set;}

          private HighMinusLow highMinusLow;

          protected override void Initialize()
          {
          highMinusLow = Indicators.HighMinusLow(Bars);
          }
          public override void Calculate(int index)
          {
          // Display the High Minus Low indicator on the chart
          Result[index] = highMinusLow.Result[index];
          Print("Previous HighMinusLow is: {0}", highMinusLow.Result[index-1]);
          }
          //...
        </code>
      </example>
      <signature>
        <code>public HighMinusLow HighMinusLow(Bars bars)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TrueRange">
      <summary>
        Initializes the True Range indicator.
      </summary>
      <remarks>
        The True Range indicator is the daily range plus any gap from the closing price of the previous day
      </remarks>
      <returns>True Range indicator instance</returns>
      <example>
        <code>
          [Output("Main")]
          public IndicatorDataSeries Result {get; set;}

          private TrueRange trueRange;

          protected override void Initialize()
          {
          trueRange = Indicators.TrueRange();
          }
          public override void Calculate(int index)
          {
          Result[index] = trueRange.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public TrueRange TrueRange()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TrueRange(cAlgo.API.Bars)">
      <summary>
        Initializes the True Range indicator.
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <remarks>
        The True Range indicator is the daily range plus any gap from the closing price of the previous day
      </remarks>
      <returns>True Range indicator instance</returns>
      <example>
        <code>
          [Output("Main")]
          public IndicatorDataSeries Result {get; set;}

          private TrueRange trueRange;

          protected override void Initialize()
          {
          trueRange = Indicators.TrueRange(Bars);
          }
          public override void Calculate(int index)
          {
          Result[index] = trueRange.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public TrueRange TrueRange(Bars bars)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WellesWilderSmoothing(cAlgo.API.DataSeries,System.Int32)">
      <summary>
        Welles Wilder Smoothing eliminates noise to identify the trend.
      </summary>
      <param name="source">The source data used for calculation.</param>
      <param name="periods">The value of the periods used for calculation.</param>
      <returns>Welles Wilder Smoothing indicator instance</returns>
      <example>
        <code>
          [Output("Main")]
          public IndicatorDataSeries Result {get; set;}

          private WellesWilderSmoothing wws;

          protected override void Initialize()
          {
          wws = Indicators.WellesWilderSmoothing(MarketSeries.Close, 14);
          }
          public override void Calculate(int index)
          {
          Result[index] = wws.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public WellesWilderSmoothing WellesWilderSmoothing(DataSeries source, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.HullMovingAverage(cAlgo.API.DataSeries,System.Int32)">
      <summary>
        The Hull Moving Average is a more responsive moving average that nearly removes lag and improves smoothing at the same time.
      </summary>
      <param name="source">The source data used for calculation.</param>
      <param name="periods">The value of the periods used for calculation.</param>
      <returns>Hull Moving Average indicator instance</returns>
      <example>
        <code>
          [Output("Main")]
          public IndicatorDataSeries Result {get; set;}

          private HullMovingAverage hma;

          protected override void Initialize()
          {
          hma = Indicators.HullMovingAverage(MarketSeries.Close, 14);
          }
          public override void Calculate(int index)
          {
          Result[index] = hma.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public HullMovingAverage HullMovingAverage(DataSeries source, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.SwingIndex(System.Int32)">
      <summary>
        Returns the Swing Index indicator instance.
      </summary>
      <param name="limitMoveValue">The value of the limit move used for calculation.</param>
      <returns>Swing Index indicator instance</returns>
      <example>
        <code>
          [Parameter(DefaultValue = 20)]
          public int limitMove { get; set; }

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          private SwingIndex si;
          protected override void Initialize()
          {
          si = Indicators.SwingIndex(limitMove);
          }

          public override void Calculate(int index)
          {
          //This stores current SwingIndex to Result Output
          Result[index] = si.Result[index];
          // This prints previous SwingIndex to log
          Print("Previous SwingIndex is: {0}", si.Result[index-1]);
          }
        </code>
      </example>
      <signature>
        <code>public SwingIndex SwingIndex(int limitMoveValue)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.SwingIndex(cAlgo.API.Bars,System.Int32)">
      <summary>
        Returns the Swing Index indicator instance.
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="limitMoveValue">The value of the limit move used for calculation.</param>
      <returns>Swing Index indicator instance</returns>
      <example>
        <code>
          [Parameter(DefaultValue = 20)]
          public int limitMove { get; set; }

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          private SwingIndex si;
          protected override void Initialize()
          {
          si = Indicators.SwingIndex(Bars, limitMove);
          }

          public override void Calculate(int index)
          {
          //This stores current SwingIndex to Result Output
          Result[index] = si.Result[index];
          // This prints previous SwingIndex to log
          Print("Previous SwingIndex is: {0}", si.Result[index-1]);
          }
        </code>
      </example>
      <signature>
        <code>public SwingIndex SwingIndex(Bars bars, int limitMoveValue)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AccumulativeSwingIndex(System.Int32)">
      <summary>
        Initializes the Accumulative Swing Index indicator
      </summary>
      <remarks>
        The Accumulative Swing Index indicator is used as a divergence and confirmation tool.
      </remarks>
      <param name="limitMoveValue">The value of the Limit Move used for calculation.</param>
      <returns>Accumulative Swing Index indicator instance</returns>
      <example>
        <code>
          [Parameter(DefaultValue = 20)]
          public int limitMove { get; set; }

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          private AccumulativeSwingIndex asi;
          protected override void Initialize()
          {
          asi = Indicators.AccumulativeSwingIndex(limitMove);
          }

          public override void Calculate(int index)
          {
          //This stores current AccumulativeSwingIndex to Result Output
          Result[index] = asi.Result[index];
          // This prints previous AccumulativeSwingIndex to log
          Print("Previous AccumulativeSwingIndex is: {0}", asi.Result[index-1]);
          }
        </code>
      </example>
      <signature>
        <code>public AccumulativeSwingIndex AccumulativeSwingIndex(int limitMoveValue)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AccumulativeSwingIndex(cAlgo.API.Bars,System.Int32)">
      <summary>
        Initializes the Accumulative Swing Index indicator
      </summary>
      <remarks>
        The Accumulative Swing Index indicator is used as a divergence and confirmation tool.
      </remarks>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="limitMoveValue">The value of the Limit Move used for calculation.</param>
      <returns>Accumulative Swing Index indicator instance</returns>
      <example>
        <code>
          [Parameter(DefaultValue = 20)]
          public int limitMove { get; set; }

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          private AccumulativeSwingIndex asi;
          protected override void Initialize()
          {
          asi = Indicators.AccumulativeSwingIndex(Bars, limitMove);
          }

          public override void Calculate(int index)
          {
          //This stores current AccumulativeSwingIndex to Result Output
          Result[index] = asi.Result[index];
          // This prints previous AccumulativeSwingIndex to log
          Print("Previous AccumulativeSwingIndex is: {0}", asi.Result[index-1]);
          }
        </code>
      </example>
      <signature>
        <code>public AccumulativeSwingIndex AccumulativeSwingIndex(Bars bars, int limitMoveValue)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.Aroon(System.Int32)">
      <summary>
        The Aroon indicator is used to identify trends and their reversals.
      </summary>
      <param name="periods">The value of the periods used for calculation.</param>
      <returns>Aroon indicator instance</returns>
      <example>
        <code>
          [Parameter("Period")]
          public int Period { get; set; }

          private Aroon aroon;

          protected override void OnStart()
          {
          aroon = Indicators.Aroon(Period);
          }
          protected override void OnTick()
          {
          if (aroon.Up.LastValue &lt; aroon.Down.LastValue)
          {
          //Do something
          }
          }
        </code>
      </example>
      <signature>
        <code>public Aroon Aroon(int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.Aroon(cAlgo.API.Bars,System.Int32)">
      <summary>
        The Aroon indicator is used to identify trends and their reversals.
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="periods">The value of the periods used for calculation.</param>
      <returns>Aroon indicator instance</returns>
      <example>
        <code>
          [Parameter("Period")]
          public int Period { get; set; }

          private Aroon aroon;

          protected override void OnStart()
          {
          aroon = Indicators.Aroon(Bars, Period);
          }
          protected override void OnTick()
          {
          if (aroon.Up.LastValue &lt; aroon.Down.LastValue)
          {
          //Do something
          }
          }
        </code>
      </example>
      <signature>
        <code>public Aroon Aroon(Bars bars, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.StandardDeviation(cAlgo.API.DataSeries,System.Int32,cAlgo.API.MovingAverageType)">
      <summary>
        The Standard Deviation indicator shows volatility.
      </summary>
      <param name="source">The source data used for calculation.</param>
      <param name="periods">The value of the periods used for calculation.</param>
      <param name="maType">Type of the Moving Average.</param>
      <returns>Standard Deviation indicator instance</returns>
      <example>
        <code>
          [Parameter]
          public DataSeries Source { get; set; }

          [Parameter(DefaultValue = 20)]
          public int Period { get; set; }

          [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
          public MovingAverageType MAType { get; set; }

          private StandardDeviation sd;
          private double previousValue;

          protected override void OnStart()
          {
          sd = Indicators.StandardDeviation(Source, Period, MAType);
          previousValue = sd.Result.LastValue;
          }

          protected override void OnBar()
          {
          //If StandardDeviation has increased
          if (sd.Result.LastValue &gt; previousValue)
          {
          //Do something
          }
          //...
          previousValue = sd.Result.LastValue;
          }
        </code>
      </example>
      <signature>
        <code>public StandardDeviation StandardDeviation(DataSeries source, int periods, MovingAverageType maType)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.BollingerBands(cAlgo.API.DataSeries,System.Int32,System.Double,cAlgo.API.MovingAverageType)">
      <summary>
        The Bollinger Bands indicator shows volatility.
      </summary>
      <param name="source">The source data used for calculation.</param>
      <param name="periods">The value of the periods used for calculation.</param>
      <param name="standardDeviations">The value of the standard deviations used for calculation.</param>
      <param name="maType">Type of the Moving Average.</param>
      <returns>Bollinger Bands indicator instance</returns>
      <example>
        <code>

          [Parameter]
          public DataSeries Source { get; set; }

          [Parameter(DefaultValue = 20)]
          public int period { get; set; }

          [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
          public MovingAverageType MAType { get; set; }

          [Parameter(DefaultValue = 1.5)]
          public double std { get; set; }

          private BollingerBands bb;

          protected override void OnStart()
          {
          bb = Indicators.BollingerBands(Source, period, std, MAType);
          }
          protected override void OnTick()
          {
          if (bb.Top.LastValue &gt; Symbol.Bid)
          {
          Print("Bid price is higher than the Top Bollinger Band");
          }
          }
        </code>
      </example>
      <signature>
        <code>public BollingerBands BollingerBands(DataSeries source, int periods, double standardDeviations, MovingAverageType maType)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.RelativeStrengthIndex(cAlgo.API.DataSeries,System.Int32)">
      <summary>
        The Relative Strength Index indicator measures turns in price by measuring turns in momentum.
      </summary>
      <param name="source">The source data used for calculation.</param>
      <param name="periods">The value of the periods used for calculation.</param>
      <returns>Relative Strength indicator instance</returns>
      <example>
        <code>
          [Parameter]
          public DataSeries Source { get; set; }

          [Parameter(DefaultValue = 20)]
          public int Period { get; set; }

          private RelativeStrengthIndex rsi;

          protected override void OnStart()
          {
          rsi = Indicators.RelativeStrengthIndex(Source, Period);
          }
          protected override void OnBar()
          {
          if (rsi.Result.LastValue &gt; 70)
          {
          Print("RSI is higher than 70");
          }
          }
        </code>
      </example>
      <signature>
        <code>public RelativeStrengthIndex RelativeStrengthIndex(DataSeries source, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TimeSeriesMovingAverage(cAlgo.API.DataSeries,System.Int32)">
      <summary>
        The Time Series Moving Average is a moving average based on linear regression
      </summary>
      <param name="source">The source data used for calculation.</param>
      <param name="periods">Number of periods used for calculation.</param>
      <returns>Time Series Moving Average indicator instance</returns>
      <example>
        <code>

          [Parameter]
          public DataSeries Source { get; set; }

          [Parameter(DefaultValue = 14)]
          public int periodfast { get; set; }

          [Parameter(DefaultValue = 24)]
          public int periodslow { get; set; }

          private TimeSeriesMovingAverage tsmfast;
          private TimeSeriesMovingAverage tsmslow;

          protected override void OnStart()
          {
          tsmfast = Indicators.TimeSeriesMovingAverage(Source, periodfast);
          tsmslow = Indicators.TimeSeriesMovingAverage(Source, periodslow);
          }

          protected override void OnTick()
          {
          //If TSMA with period 14 moves above TSMA with period 24
          if (tsmfast.Result.LastValue &gt; tsmslow.Result.LastValue)
          {
          //Do something
          }
          }

        </code>
      </example>
      <signature>
        <code>public TimeSeriesMovingAverage TimeSeriesMovingAverage(DataSeries source, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.LinearRegressionForecast(cAlgo.API.DataSeries,System.Int32)">
      <summary>
        Linear Regression Forecast is a trend indicator used to forecast values using the Least Squares Fit method.
      </summary>
      <param name="source">The source data used for calculation.</param>
      <param name="periods">The value of the periods used for calculation.</param>
      <returns>Linear Regression Forecast indicator instance</returns>
      <example>
        <code>

          private LinearRegressionForecast lrForecast;

          protected override void OnStart()
          {
          lrForecast = Indicators.LinearRegressionForecast(Source, Period);
          }
          protected override void OnTick()
          {
          Print("LRF Last Value = {0}", lrForecast.Result.LastValue);
          }

        </code>
      </example>
      <signature>
        <code>public LinearRegressionForecast LinearRegressionForecast(DataSeries source, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.LinearRegressionRSquared(cAlgo.API.DataSeries,System.Int32)">
      <summary>
        The R Squared or coefficient of determination indicator's main purpose is the confirm the strength of the market.
      </summary>
      <param name="source">The source data used for calculation.</param>
      <param name="periods">The value of the periods used for calculation.</param>
      <returns>Linear Regression R-Squared indicator instance</returns>
      <example>
        <code>

          private LinearRegressionRSquared rSquared;

          protected override void OnStart()
          {
          rSquared = Indicators.LinearRegressionRSquared(Source, Period);
          }
          protected override void OnTick()
          {
          Print("R squared is {0}", rSquared.Result.LastValue)
          }

        </code>
      </example>
      <signature>
        <code>public LinearRegressionRSquared LinearRegressionRSquared(DataSeries source, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.PriceROC(cAlgo.API.DataSeries,System.Int32)">
      <summary>
        The Price Rate of Change indicator is the percentage change of the current price and the price N periods ago.
      </summary>
      <param name="source">The source data used for calculation.</param>
      <param name="periods">The value of the periods used for calculation.</param>
      <returns>Price Rate of Change indicator instance</returns>
      <example>
        <code>
          [Parameter("Source")]
          public DataSeries Source { get; set; }

          [Parameter(DefaultValue = 14)]
          public int Period { get; set; }

          private PriceROC priceROC;

          protected override void OnStart()
          {
          priceROC = Indicators.PriceROC(Source, Period);
          }

          protected override void OnTick()
          {
          Print("{0}", priceROC.Result.LastValue);
          }
        </code>
      </example>
      <signature>
        <code>public PriceROC PriceROC(DataSeries source, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.Vidya(cAlgo.API.DataSeries,System.Int32,System.Double)">
      <summary>
        Volatility Index Dynamic Average (VIDYA) is a smoothing (moving average) based on dynamically changing periods.
      </summary>
      <param name="source">The source data used for calculation.</param>
      <param name="periods">The value of the periods used for calculation.</param>
      <param name="r2Scale">The value of the r-squared scale used for calculation.</param>
      <returns>Vidya indicator instance</returns>
      <example>
        <code>
          [Parameter]
          public DataSeries Price { get; set; }

          [Parameter("Period", DefaultValue = 14)]
          public int Period { get; set; }

          [Parameter("Sigma", DefaultValue = 0.65, MinValue = 0.1, MaxValue = 0.95)]
          public double Sigma { get; set; }

          private Vidya vidya;

          protected override void OnStart()
          {
          vidya = Indicators.Vidya(Price, Period, Sigma);
          }

          protected override void OnTick()
          {
          //If vidya is greater than a specific value
          if (vidya.Result.LastValue &gt; Value)
          {
          //Do something
          Print("LastValue {0}", vidya.Result.LastValue);
          }

          //...
          }
        </code>
      </example>
      <signature>
        <code>public Vidya Vidya(DataSeries source, int periods, double r2Scale)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.UltimateOscillator(System.Int32,System.Int32,System.Int32)">
      <summary>
        Returns the Ultimate Oscillator indicator instance.
      </summary>
      <param name="cycle1">The value of the short periods used for calculation.</param>
      <param name="cycle2">The value of the medium periods used for calculation.</param>
      <param name="cycle3">The value of the long periods used for calculation.</param>
      <returns>UltimateOscillator indicator instance</returns>
      <example>
        <code>

          protected override void OnStart()
          {
          ultimateOscillator = Indicators.UltimateOscillator(Cycle1,Cycle2,Cycle3);
          }

          protected override void OnTick()
          {
          double currentValue = ultimateOscillator.Result.LastValue;

          //...
          }

        </code>
      </example>
      <signature>
        <code>public UltimateOscillator UltimateOscillator(int cycle1, int cycle2, int cycle3)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.UltimateOscillator(cAlgo.API.Bars,System.Int32,System.Int32,System.Int32)">
      <summary>
        Returns the Ultimate Oscillator indicator instance.
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="cycle1">The value of the short periods used for calculation.</param>
      <param name="cycle2">The value of the medium periods used for calculation.</param>
      <param name="cycle3">The value of the long periods used for calculation.</param>
      <returns>UltimateOscillator indicator instance</returns>
      <example>
        <code>

          protected override void OnStart()
          {
          ultimateOscillator = Indicators.UltimateOscillator(Bars, Cycle1,Cycle2,Cycle3);
          }

          protected override void OnTick()
          {
          double currentValue = ultimateOscillator.Result.LastValue;

          //...
          }

        </code>
      </example>
      <signature>
        <code>public UltimateOscillator UltimateOscillator(Bars bars, int cycle1, int cycle2, int cycle3)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.DirectionalMovementSystem(System.Int32)">
      <summary>
        The Directional Movement System is composed of three indicators that show if the market is trending and provide signals.
      </summary>
      <param name="periods">The value of the periods used for calculation.</param>
      <returns>Directional Movement System indicator instance</returns>
      <example>
        <code>
          private DirectionalMovementSystem _dms;
          private double _dIplus;
          private double _dIminus;

          [Parameter("ADX Period", DefaultValue = 14)]
          public int Period { get; set; }

          protected override void OnStart()
          {
          _dms = Indicators.DirectionalMovementSystem(Period);
          }

          protected override void OnTick()
          {
          _dIplus = _dms.DIPlus.LastValue;
          _dIminus = _dms.DIMinus.LastValue;

          if (_dIminus &gt; _dIplus)
          {
          // Do something
          }

          //...
          }

        </code>
      </example>
      <signature>
        <code>public DirectionalMovementSystem DirectionalMovementSystem(int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.DirectionalMovementSystem(cAlgo.API.Bars,System.Int32)">
      <summary>
        The Directional Movement System is composed of three indicators that show if the market is trending and provide signals.
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="periods">The value of the periods used for calculation.</param>
      <returns>Directional Movement System indicator instance</returns>
      <example>
        <code>
          private DirectionalMovementSystem _dms;
          private double _dIplus;
          private double _dIminus;

          [Parameter("ADX Period", DefaultValue = 14)]
          public int Period { get; set; }

          protected override void OnStart()
          {
          _dms = Indicators.DirectionalMovementSystem(Bars, Period);
          }

          protected override void OnTick()
          {
          _dIplus = _dms.DIPlus.LastValue;
          _dIminus = _dms.DIMinus.LastValue;

          if (_dIminus &gt; _dIplus)
          {
          // Do something
          }

          //...
          }

        </code>
      </example>
      <signature>
        <code>public DirectionalMovementSystem DirectionalMovementSystem(Bars bars, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ParabolicSAR(System.Double,System.Double)">
      <summary>
        The Parabolic SAR indicator identifies potential reversals in the market direction
      </summary>
      <param name="minAf">The minimum accumulation factor</param>
      <param name="maxAf">The maximum accumulation factor</param>
      <returns>ParabolicSAR indicator instance</returns>
      <example>
        <code>

          private ParabolicSAR parabolicSar;

          //...

          protected override void OnStart()
          {
          parabolicSar = Indicators.ParabolicSAR(minaf, maxaf);
          }

          protected override void OnTick()
          {
          double currentValue = parabolicSar.Result.LastValue;

          //...
          }
        </code>
      </example>
      <signature>
        <code>public ParabolicSAR ParabolicSAR(double minAf, double maxAf)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ParabolicSAR(cAlgo.API.Bars,System.Double,System.Double)">
      <summary>
        The Parabolic SAR indicator identifies potential reversals in the market direction
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="minAf">The minimum accumulation factor</param>
      <param name="maxAf">The maximum accumulation factor</param>
      <returns>ParabolicSAR indicator instance</returns>
      <example>
        <code>

          private ParabolicSAR parabolicSar;

          //...

          protected override void OnStart()
          {
          parabolicSar = Indicators.ParabolicSAR(Bars, minaf, maxaf);
          }

          protected override void OnTick()
          {
          double currentValue = parabolicSar.Result.LastValue;

          //...
          }
        </code>
      </example>
      <signature>
        <code>public ParabolicSAR ParabolicSAR(Bars bars, double minAf, double maxAf)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.StochasticOscillator(System.Int32,System.Int32,System.Int32,cAlgo.API.MovingAverageType)">
      <summary>
        The Stochastic Oscillator is a momentum indicator that aims to show price reversals by comparing the closing price to the price range.
      </summary>
      <param name="kPeriods">The value of the k periods used for calculation.</param>
      <param name="kSlowing">The value of the k slowing used for calculation.</param>
      <param name="dPeriods">The value of the d periods used for calculation.</param>
      <param name="maType">Type of the Moving Average.</param>
      <returns>Stochastic Oscillator indicator instance.</returns>
      <example>
        <code>

          private StochasticOscillator stochastic;

          //...

          protected override void OnStart()
          {
          stochastic = Indicators.StochasticOscillator(kPeriods, kSlowing, dPeriods, maType);
          }

          protected override void OnTick()
          {
          double percentD = stochastic.PercentD.LastValue;
          double percentK = stochastic.PercentK.LastValue;

          //...
          }
        </code>
      </example>
      <signature>
        <code>public StochasticOscillator StochasticOscillator(int kPeriods, int kSlowing, int dPeriods, MovingAverageType maType)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.StochasticOscillator(cAlgo.API.Bars,System.Int32,System.Int32,System.Int32,cAlgo.API.MovingAverageType)">
      <summary>
        The Stochastic Oscillator is a momentum indicator that aims to show price reversals by comparing the closing price to the price range.
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="kPeriods">The value of the k periods used for calculation.</param>
      <param name="kSlowing">The value of the k slowing used for calculation.</param>
      <param name="dPeriods">The value of the d periods used for calculation.</param>
      <param name="maType">Type of the Moving Average.</param>
      <returns>Stochastic Oscillator indicator instance.</returns>
      <example>
        <code>

          private StochasticOscillator stochastic;

          //...

          protected override void OnStart()
          {
          stochastic = Indicators.StochasticOscillator(Bars, kPeriods, kSlowing, dPeriods, maType);
          }

          protected override void OnTick()
          {
          double percentD = stochastic.PercentD.LastValue;
          double percentK = stochastic.PercentK.LastValue;

          //...
          }
        </code>
      </example>
      <signature>
        <code>public StochasticOscillator StochasticOscillator(Bars bars, int kPeriods, int kSlowing, int dPeriods, MovingAverageType maType)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MomentumOscillator(cAlgo.API.DataSeries,System.Int32)">
      <summary>
        The Momentum Oscillator measures the momentum of the price.
      </summary>
      <param name="source">The source data used for calculation.</param>
      <param name="periods">The value of the periods used for calculation.</param>
      <returns>Momentum Oscillator indicator instance</returns>
      <example>
        <code>

          private MomentumOscillator _momentum;

          protected override void OnStart()
          {
          _momentum = Indicators.MomentumOscillator(MarketSeries.Close, 14);
          }
          protected override void OnTick()
          {
          double momentum = _momentum.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public MomentumOscillator MomentumOscillator(DataSeries source, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MedianPrice">
      <summary>
        The Median indicator is the average of the high and the low.
      </summary>
      <returns>Median indicator instance</returns>
      <example>
        <code>
          private MedianPrice medianPrice;

          protected override void OnStart()
          {
          medianPrice = Indicators.MedianPrice();
          }
          protected override void OnTick()
          {
          double price = medianPrice.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public MedianPrice MedianPrice()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MedianPrice(cAlgo.API.Bars)">
      <summary>
        The Median indicator is the average of the high and the low.
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <returns>Median indicator instance</returns>
      <example>
        <code>
          private MedianPrice medianPrice;

          protected override void OnStart()
          {
          medianPrice = Indicators.MedianPrice(Bars);
          }
          protected override void OnTick()
          {
          double price = medianPrice.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public MedianPrice MedianPrice(Bars bars)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WilliamsAccumulationDistribution">
      <summary>
        The Williams Accumulation Distribution indicator shows bullish or bearish trends.
      </summary>
      <returns>Williams Accumulation Distribution indicator instance</returns>
      <example>
        <code>
          private WilliamsAccumulationDistribution williamsAD;

          protected override void OnStart()
          {
          williamsAD = Indicators.WilliamsAccumulationDistribution();
          }
          protected override void OnTick()
          {
          double result = williamsAD.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public WilliamsAccumulationDistribution WilliamsAccumulationDistribution()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WilliamsAccumulationDistribution(cAlgo.API.Bars)">
      <summary>
        The Williams Accumulation Distribution indicator shows bullish or bearish trends.
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <returns>Williams Accumulation Distribution indicator instance</returns>
      <example>
        <code>
          private WilliamsAccumulationDistribution williamsAD;

          protected override void OnStart()
          {
          williamsAD = Indicators.WilliamsAccumulationDistribution(Bars);
          }
          protected override void OnTick()
          {
          double result = williamsAD.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public WilliamsAccumulationDistribution WilliamsAccumulationDistribution(Bars bars)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.FractalChaosBands">
      <summary>
        The Fractal Chaos Bands indicator breaks down large trends into predictable patterns.
      </summary>
      <returns>Fractal Chaos Bands indicator instance</returns>
      <example>
        <code>
          private FractalChaosBands fractalChaosBands;

          protected override void Initialize()
          {
          fractalChaosBands = Indicators.FractalChaosBands();
          }
          public override void Calculate(int index)
          {
          Print("Fractal Chaos Bands High = {0}", fractalChaosBands.High[index]);
          }
        </code>
      </example>
      <signature>
        <code>public FractalChaosBands FractalChaosBands()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.FractalChaosBands(cAlgo.API.Bars)">
      <summary>
        The Fractal Chaos Bands indicator breaks down large trends into predictable patterns.
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <returns>Fractal Chaos Bands indicator instance</returns>
      <example>
        <code>
          private FractalChaosBands fractalChaosBands;

          protected override void Initialize()
          {
          fractalChaosBands = Indicators.FractalChaosBands(Bars);
          }
          public override void Calculate(int index)
          {
          Print("Fractal Chaos Bands High = {0}", fractalChaosBands.High[index]);
          }
        </code>
      </example>
      <signature>
        <code>public FractalChaosBands FractalChaosBands(Bars bars)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TypicalPrice">
      <summary>
        The Typical Price indicator is the average of the high, low, and closing prices.
      </summary>
      <returns>Typical Price indicator instance.</returns>
      <example>
        <code>
          private TypicalPrice typicalPriceIndicator;

          protected override void Initialize()
          {
          typicalPriceIndicator = Indicators.TypicalPrice();
          }
          public override void Calculate(int index)
          {
          double typicalPriceValue = typicalPriceIndicator.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public TypicalPrice TypicalPrice()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TypicalPrice(cAlgo.API.Bars)">
      <summary>
        The Typical Price indicator is the average of the high, low, and closing prices.
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <returns>Typical Price indicator instance.</returns>
      <example>
        <code>
          private TypicalPrice typicalPriceIndicator;

          protected override void Initialize()
          {
          typicalPriceIndicator = Indicators.TypicalPrice(Bars);
          }
          public override void Calculate(int index)
          {
          double typicalPriceValue = typicalPriceIndicator.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public TypicalPrice TypicalPrice(Bars bars)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.CommodityChannelIndex(System.Int32)">
      <summary>
        The Commodity Channel Index identifies overbough and oversold conditions, price reversals and trend strength.
      </summary>
      <param name="periods">The value of the periods used for calculation.</param>
      <returns>Commodity Channel Index indicator instance.</returns>
      <example>
        <code>

          private CommodityChannelIndex commodityChannelIndex;
          //...
          protected override void OnStart()
          {
          commodityChannelIndex = Indicators.CommodityChannelIndex(Periods);
          }
          protected override void OnBar()
          {
          // Print the current value to the log
          Print("The current CCI value = {0}",
          commodityChannelIndex.Result.LastValue);
          }

        </code>
      </example>
      <signature>
        <code>public CommodityChannelIndex CommodityChannelIndex(int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.CommodityChannelIndex(cAlgo.API.Bars,System.Int32)">
      <summary>
        The Commodity Channel Index identifies overbough and oversold conditions, price reversals and trend strength.
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="periods">The value of the periods used for calculation.</param>
      <returns>Commodity Channel Index indicator instance.</returns>
      <example>
        <code>

          private CommodityChannelIndex commodityChannelIndex;
          //...
          protected override void OnStart()
          {
          commodityChannelIndex = Indicators.CommodityChannelIndex(Bars, Periods);
          }
          protected override void OnBar()
          {
          // Print the current value to the log
          Print("The current CCI value = {0}",
          commodityChannelIndex.Result.LastValue);
          }

        </code>
      </example>
      <signature>
        <code>public CommodityChannelIndex CommodityChannelIndex(Bars bars, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.HistoricalVolatility(cAlgo.API.DataSeries,System.Int32,System.Int32)">
      <summary>
        The Historical Volatility indicator is derived from time series of past market prices.
      </summary>
      <param name="source">The source data used for calculation.</param>
      <param name="periods">The value of the periods used for calculation.</param>
      <param name="barHistory">The value of the bar history used for calculation.</param>
      <returns>Historical Volatility indicator instance</returns>
      <example>
        <code>
          protected override void OnStart()
          {
          historicalVolatility = Indicators.HistoricalVolatility
          (MarketSeries.Close, Period, BarHistory);
          }
          protected override void OnBar()
          {
          double hv = historicalVolatility.Result.LastValue;
          }
        </code>
      </example>
      <signature>
        <code>public HistoricalVolatility HistoricalVolatility(DataSeries source, int periods, int barHistory)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MassIndex(System.Int32)">
      <summary>
        The Mass Index indicator is used to predict trend reversals.
      </summary>
      <param name="periods">The value of the periods used for calculation.</param>
      <returns>Mass Index indicator instance</returns>
      <example>
        <code>
          private MassIndex massIndex;

          protected override void Initialize()
          {
          massIndex = Indicators.MassIndex(14);
          }

          public override void Calculate(int index)
          {
          double currentMassIndex = massIndex.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public MassIndex MassIndex(int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MassIndex(cAlgo.API.Bars,System.Int32)">
      <summary>
        The Mass Index indicator is used to predict trend reversals.
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="periods">The value of the periods used for calculation.</param>
      <returns>Mass Index indicator instance</returns>
      <example>
        <code>
          private MassIndex massIndex;

          protected override void Initialize()
          {
          massIndex = Indicators.MassIndex(Bars, 14);
          }

          public override void Calculate(int index)
          {
          double currentMassIndex = massIndex.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public MassIndex MassIndex(Bars bars, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ChaikinVolatility(System.Int32,System.Int32,cAlgo.API.MovingAverageType)">
      <summary>
        The Chaikin Volatiliy indicator measures the trading range between the high and the low prices.
      </summary>
      <param name="periods">The value of the periods used for calculation.</param>
      <param name="rateOfChange">The value of the rage of change used for calculation.</param>
      <param name="maType">Type of the Moving Average.</param>
      <returns>Chaikin Volatiliy indicator instance</returns>
      <example>
        <code>

          private ChaikinVolatility chaikinVolatility;

          protected override void OnStart()
          {
          chaikinVolatility = Indicators.ChaikinVolatility(Periods, _roc, MaType);
          }
          protected override void OnBar()
          {
          // Print to log
          Print("The Current Chaikin Volatility Value is: {0}",
          chaikinVolatility.Result.LastValue);
          }

        </code>
      </example>
      <signature>
        <code>public ChaikinVolatility ChaikinVolatility(int periods, int rateOfChange, MovingAverageType maType)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ChaikinVolatility(cAlgo.API.Bars,System.Int32,System.Int32,cAlgo.API.MovingAverageType)">
      <summary>
        The Chaikin Volatiliy indicator measures the trading range between the high and the low prices.
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="periods">The value of the periods used for calculation.</param>
      <param name="rateOfChange">The value of the rage of change used for calculation.</param>
      <param name="maType">Type of the Moving Average.</param>
      <returns>Chaikin Volatiliy indicator instance</returns>
      <example>
        <code>

          private ChaikinVolatility chaikinVolatility;

          protected override void OnStart()
          {
          chaikinVolatility = Indicators.ChaikinVolatility(Bars, Periods, _roc, MaType);
          }
          protected override void OnBar()
          {
          // Print to log
          Print("The Current Chaikin Volatility Value is: {0}",
          chaikinVolatility.Result.LastValue);
          }

        </code>
      </example>
      <signature>
        <code>public ChaikinVolatility ChaikinVolatility(Bars bars, int periods, int rateOfChange, MovingAverageType maType)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.DetrendedPriceOscillator(cAlgo.API.DataSeries,System.Int32,cAlgo.API.MovingAverageType)">
      <summary>
        The Detrended Price Oscillator shows intermediate overbought and oversold levels.
      </summary>
      <param name="source">The price source data used for calculation.</param>
      <param name="periods">The period used for calculation.</param>
      <param name="maType">Type of the Moving Average.</param>
      <returns>Detrended Price Oscillator indicator instance</returns>
      <example>
        <code>

          private _detrendedPriceOscillator _dpoFast;
          private _detrendedPriceOscillator _dpoSlow;

          protected override void OnStart()
          {
          _dpoFast = Indicators.DetrendedPriceOscillator(Source, PeriodFast, MaType);
          _dpoSlow = Indicators.DetrendedPriceOscillator(Source, PeriodSlow, MaType);
          }

          protected override void OnBar()
          {
          if(_dpoFast.Result.Count &lt; 1)
          return;

          int currentIndex = _dpoFast.Result.Count - 1;
          int prevIndex = currentIndex - 1;

          if (_dpoFast.Result[prevIndex] &gt; _dpoSlow.Result[prevIndex])
          {
          //Do something
          }
          }
        </code>
      </example>
      <signature>
        <code>public DetrendedPriceOscillator DetrendedPriceOscillator(DataSeries source, int periods, MovingAverageType maType)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.LinearRegressionIntercept(cAlgo.API.DataSeries,System.Int32)">
      <summary>
        The Linear Regression Intercept can be used together with the Linear Regression Slope indicator to plot the Linear Regression Line.
      </summary>
      <param name="source">The price source data used for calculation.</param>
      <param name="periods">The period used for calculation.</param>
      <returns>The Linear Regression Intercept indicator instance</returns>
      <example>
        <code>
          [Parameter("Period", DefaultValue = 14)]
          public int Period { get; set; }

          protected override void OnStart()
          {
          // initialize a new instance of LinearRegressionIntercept indicator class
          _linearRegressionIntercept = Indicators.
          LinearRegressionIntercept(MarketSeries.Close, Period);
          }
          protected override void OnBar(int index)
          {
          // Result of _linearRegressionIntercept at the current index
          double result = _linearRegressionIntercept.Result[index];
          // Print the current result to the log
          Print("Linear Regression Intercept at the current index is = {0}", result);
          }
        </code>
      </example>
      <signature>
        <code>public LinearRegressionIntercept LinearRegressionIntercept(DataSeries source, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.LinearRegressionSlope(cAlgo.API.DataSeries,System.Int32)">
      <summary>
        The Linear Regression Slope indicator is intended to measure the direction and strength of a trend.
      </summary>
      <param name="source">The price source data used for calculation.</param>
      <param name="periods">The period used for calculation.</param>
      <returns>The Linear Regression Slope indicator instance</returns>
      <example>
        <code>
          private LinearRegressionSlope slope;

          protected override void Initialize()
          {
          slope = Indicators.LinearRegressionSlope(MarketSeries.Close, 14);
          }
          public override void Calculate(int index)
          {
          double currentSlope = slope.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public LinearRegressionSlope LinearRegressionSlope(DataSeries source, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MacdHistogram(System.Int32,System.Int32,System.Int32)">
      <summary>
        The MACD Histogram is a momentum indicator measured by typically subtracting a 26 period moving average from a 12 period moving average.
      </summary>
      <param name="longCycle">The long period used calculation.</param>
      <param name="shortCycle">The short period used calculation.</param>
      <param name="signalPeriods">The period used for the calculation of the signal.</param>
      <returns>The Macd Histogram indicator instance</returns>
      <example>
        <code>
          private MacdHistogram macd;
          //...
          protected override void Initialize()
          {
          macd = Indicators.MacdHistogram(LongCycle, ShortCycle, Period);
          //...
          }
          public override void Calculate(int index)
          {
          double macdHistogramResult = macd.Histogram[index];
          double macdSignalResult = macd.Signal[index];
          //...
          }
        </code>
      </example>
      <signature>
        <code>public MacdHistogram MacdHistogram(int longCycle, int shortCycle, int signalPeriods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MacdHistogram(cAlgo.API.DataSeries,System.Int32,System.Int32,System.Int32)">
      <summary>
        Initializes the MacdHistogram indicator instance for a specific source series
      </summary>
      <param name="source">The source series to be applied</param>
      <param name="longCycle">The long period used calculation.</param>
      <param name="shortCycle">The short period used calculation.</param>
      <param name="signalPeriods">The period used for the calculation of the signal.</param>
      <returns>The Macd Histogram indicator instance</returns>
      <signature>
        <code>public MacdHistogram MacdHistogram(DataSeries source, int longCycle, int shortCycle, int signalPeriods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MacdCrossOver(System.Int32,System.Int32,System.Int32)">
      <summary>
        The MACD Line with the Signal line and their difference as a histogram.
      </summary>
      <param name="longCycle">The long period used calculation.</param>
      <param name="shortCycle">The short period used calculation.</param>
      <param name="signalPeriods">The period used for the calculation of the signal.</param>
      <returns>The Macd CrossOver indicator instance</returns>
      <example>
        <code>
          //...
          private MacdCrossOver _macdCrossOver;

          protected override void Initialize()
          {
          _macdCrossOver = Indicators.MacdCrossOver(LongCycle, ShortCycle, Period);
          }

          public override void Calculate(int index)
          {
          double macd = _macdCrossOver.MACD[index];
          double signal = _macdCrossOver.Signal[index];
          //...
          }

        </code>
      </example>
      <signature>
        <code>public MacdCrossOver MacdCrossOver(int longCycle, int shortCycle, int signalPeriods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MacdCrossOver(cAlgo.API.DataSeries,System.Int32,System.Int32,System.Int32)">
      <summary>
        Initializes the MacdCrossOver indicator instance for a specific source series
      </summary>
      <param name="source">The source series to be applied</param>
      <param name="longCycle">The long period used calculation.</param>
      <param name="shortCycle">The short period used calculation.</param>
      <param name="signalPeriods">The period used for the calculation of the signal.</param>
      <returns>The MacdCrossOver indicator instance</returns>
      <signature>
        <code>public MacdCrossOver MacdCrossOver(DataSeries source, int longCycle, int shortCycle, int signalPeriods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.PriceOscillator(cAlgo.API.DataSeries,System.Int32,System.Int32,cAlgo.API.MovingAverageType)">
      <summary>
        The Price Oscillator calculates the difference between two moving averages.
      </summary>
      <param name="source">The price source data used for calculation.</param>
      <param name="longCycle">The long period used for calculation.</param>
      <param name="shortCycle">The short period used for calculation.</param>
      <param name="maType">Type of the Moving Average.</param>
      <returns>The Price Oscillator indicator instance.</returns>
      <example>
        <code>
          //...
          private PriceOscillator priceOscillator;

          protected override void OnStart()
          {
          priceOscillator = Indicators.PriceOscillator
          (MarketSeries.Close, 14, 5, MovingAverageType.Simple);
          //...
          }
          protected override void OnTick()
          {
          double result = priceOscillator.Result[index];
          //...
          }
        </code>
      </example>
      <signature>
        <code>public PriceOscillator PriceOscillator(DataSeries source, int longCycle, int shortCycle, MovingAverageType maType)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.RainbowOscillator(cAlgo.API.DataSeries,System.Int32,cAlgo.API.MovingAverageType)">
      <summary>
        The Rainbow Oscillator is a process of repetitive smoothing of simple moving averages resulting in a full spectrum of trends.
      </summary>
      <param name="source">The price source data used for calculation.</param>
      <param name="levels">The value of the levels used for calculation.</param>
      <param name="maType">The Moving Average type used for calculation.</param>
      <returns>The Rainbow Oscillator instance.</returns>
      <example>
        <code>
          //...
          private RainbowOscillator rainbow;

          protected override void Initialize()
          {
          MovingAverageType simpleMa = MovingAverageType.Simple;
          DataSeries close = MarketSeries.Close;
          rainbow = Indicators.RainbowOscillator(close, 9, simpleMa);
          //...
          }
          public override void Calculate(int index)
          {
          double currentValue = rainbow.Result[index];
          //...
          }
        </code>
      </example>
      <signature>
        <code>public RainbowOscillator RainbowOscillator(DataSeries source, int levels, MovingAverageType maType)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.VerticalHorizontalFilter(cAlgo.API.DataSeries,System.Int32)">
      <summary>
        The Vertical Horizontal Filter indicator measures the level of trend activity.
      </summary>
      <param name="source">The source data used for calculation.</param>
      <param name="periods">The periods used for calculation.</param>
      <returns>the Vertical Horizontal Filter indicator instance</returns>
      <example>
        <code>
          //...
          private VerticalHorizontalFilter VHFilter;
          //...
          protected override void Initialize()
          {
          VHFilter = Indicators.VerticalHorizontalFilter(Source, Periods);
          //...
          }
          public override void Calculate(int index)
          {
          double result = VHFilter.Result[index];
          //...
          }
        </code>
      </example>
      <signature>
        <code>public VerticalHorizontalFilter VerticalHorizontalFilter(DataSeries source, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WilliamsPctR(System.Int32)">
      <summary>
        The Williams Percent R indicator is a momentum indicator measuring overbought and oversold levels.
      </summary>
      <param name="periods">The period used for calculation.</param>
      <returns>The Williams Percent R indicator instance</returns>
      <example>
        <code>
          //...
          private WilliamsPctR williamsPctRSeries;
          //...
          protected override void OnStart()
          {
          williamsPctRSeries = Indicators.WilliamsPctR(14);
          //...
          }
          protected override void OnTick()
          {
          double williamsPctRValue = williamsPctRSeries.Result[index];
          //...
          }
        </code>
      </example>
      <signature>
        <code>public WilliamsPctR WilliamsPctR(int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WilliamsPctR(cAlgo.API.Bars,System.Int32)">
      <summary>
        The Williams Percent R indicator is a momentum indicator measuring overbought and oversold levels.
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="periods">The period used for calculation.</param>
      <returns>The Williams Percent R indicator instance</returns>
      <example>
        <code>
          //...
          private WilliamsPctR williamsPctRSeries;
          //...
          protected override void OnStart()
          {
          williamsPctRSeries = Indicators.WilliamsPctR(Bars, 14);
          //...
          }
          protected override void OnTick()
          {
          double williamsPctRValue = williamsPctRSeries.Result[index];
          //...
          }
        </code>
      </example>
      <signature>
        <code>public WilliamsPctR WilliamsPctR(Bars bars, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.Trix(cAlgo.API.DataSeries,System.Int32)">
      <summary>
        The Trix indicator shows the slope of a triple-smoothed exponential moving average.
      </summary>
      <param name="source">The source data used for calculation.</param>
      <param name="periods">The periods used for the calculation.</param>
      <returns>The Trix indicator instance.</returns>
      <example>
        <code>
          private Trix trixSeries;

          protected override void OnStart()
          {
          trixSeries = Indicators.Trix(MarketSeries.Close, 14);
          }
          protected override void OnTick()
          {
          double trixValue = trixSeries.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public Trix Trix(DataSeries source, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WeightedClose">
      <summary>
        The WeightedClose indicator is an average of each day's price with extra weight given to the closing price.
      </summary>
      <remarks>Similar to the Median Price and Typical Price Indicators</remarks>
      <returns>WeightedClose indicator instance</returns>
      <example>
        <code>
          //...
          private WeightedClose weightedCloseSeries;
          //...
          protected override void OnStart()
          {
          weightedCloseSeries = Indicators.WeightedClose();
          //...
          }
          protected override void OnBar()
          {
          double weightedCloseValue = weightedCloseSeries.Result[index];
          //...
          }
        </code>
      </example>
      <signature>
        <code>public WeightedClose WeightedClose()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.WeightedClose(cAlgo.API.Bars)">
      <summary>
        The WeightedClose indicator is an average of each day's price with extra weight given to the closing price.
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <remarks>Similar to the Median Price and Typical Price Indicators</remarks>
      <returns>WeightedClose indicator instance</returns>
      <example>
        <code>
          //...
          private WeightedClose weightedCloseSeries;
          //...
          protected override void OnStart()
          {
          weightedCloseSeries = Indicators.WeightedClose(Bars);
          //...
          }
          protected override void OnBar()
          {
          double weightedCloseValue = weightedCloseSeries.Result[index];
          //...
          }
        </code>
      </example>
      <signature>
        <code>public WeightedClose WeightedClose(Bars bars)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ChaikinMoneyFlow(System.Int32)">
      <summary>
        The Chaikin Money Flow indicator measures the money flow volume over a specific period.
      </summary>
      <param name="periods">The period used for the calculation</param>
      <returns>Chaikin Money Flow indicator instance</returns>
      <example>
        <code>
          private ChaikinMoneyFlow _chaikinMoneyFlow;

          [Parameter("Period", DefaultValue = 21)]
          public int Period { get; set; }

          protected override void OnStart()
          {
          _chaikinMoneyFlow = Indicators.ChaikinMoneyFlow(Period);
          }
          protected override void OnBar()
          {
          var index = MarketSeries.Open.Count - 1;
          double currentChaikinMF = _chaikinMoneyFlow.Result[index];
          double previousChaikinMF = _chaikinMoneyFlow.Result[index-1];
          }
        </code>
      </example>
      <signature>
        <code>public ChaikinMoneyFlow ChaikinMoneyFlow(int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.ChaikinMoneyFlow(cAlgo.API.Bars,System.Int32)">
      <summary>
        The Chaikin Money Flow indicator measures the money flow volume over a specific period.
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="periods">The period used for the calculation</param>
      <returns>Chaikin Money Flow indicator instance</returns>
      <example>
        <code>
          private ChaikinMoneyFlow _chaikinMoneyFlow;

          [Parameter("Period", DefaultValue = 21)]
          public int Period { get; set; }

          protected override void OnStart()
          {
          _chaikinMoneyFlow = Indicators.ChaikinMoneyFlow(Bars, Period);
          }
          protected override void OnBar()
          {
          var index = MarketSeries.Open.Count - 1;
          double currentChaikinMF = _chaikinMoneyFlow.Result[index];
          double previousChaikinMF = _chaikinMoneyFlow.Result[index-1];
          }
        </code>
      </example>
      <signature>
        <code>public ChaikinMoneyFlow ChaikinMoneyFlow(Bars bars, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.EaseOfMovement(System.Int32,cAlgo.API.MovingAverageType)">
      <summary>
        The Ease Of Movement indicator relates the price change to the volume.
      </summary>
      <param name="periods">The period used for the calculation</param>
      <param name="maType">The moving average type used for the calculation</param>
      <returns> Ease Of Movement indicator instance</returns>
      <example>
        <code>
          private EaseOfMovement _easeOfMovement;

          [Parameter("Period", DefaultValue = 14)]
          public int Period { get; set; }

          [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
          public MovingAverageType MAType { get; set; }


          protected override void OnStart()
          {
          _easeOfMovement = Indicators.EaseOfMovement(Period, MAType);
          }
          protected override void OnBar()
          {
          // get EaseOfMovement value
          var index = MarketSeries.Open.Count - 1;
          double currentEaseOfMovement = _easeOfMovement.Result[index];
          double previousEaseOfMovement = _easeOfMovement.Result[index-1];
          }
        </code>
      </example>
      <signature>
        <code>public EaseOfMovement EaseOfMovement(int periods, MovingAverageType maType)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.EaseOfMovement(cAlgo.API.Bars,System.Int32,cAlgo.API.MovingAverageType)">
      <summary>
        The Ease Of Movement indicator relates the price change to the volume.
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="periods">The period used for the calculation</param>
      <param name="maType">The moving average type used for the calculation</param>
      <returns> Ease Of Movement indicator instance</returns>
      <example>
        <code>
          private EaseOfMovement _easeOfMovement;

          [Parameter("Period", DefaultValue = 14)]
          public int Period { get; set; }

          [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
          public MovingAverageType MAType { get; set; }


          protected override void OnStart()
          {
          _easeOfMovement = Indicators.EaseOfMovement(Bars, Period, MAType);
          }
          protected override void OnBar()
          {
          // get EaseOfMovement value
          var index = MarketSeries.Open.Count - 1;
          double currentEaseOfMovement = _easeOfMovement.Result[index];
          double previousEaseOfMovement = _easeOfMovement.Result[index-1];
          }
        </code>
      </example>
      <signature>
        <code>public EaseOfMovement EaseOfMovement(Bars bars, int periods, MovingAverageType maType)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MoneyFlowIndex(System.Int32)">
      <summary>
        The Money Flow Index measures the strength of the money flow.
      </summary>
      <param name="periods">The period used for the calculation</param>
      <returns>Money Flow Index indicator instance</returns>
      <example>
        <code>
          private MoneyFlowIndex _moneyFlow;

          [Parameter("Period", DefaultValue = 21)]
          public int Period { get; set; }

          protected override void OnStart()
          {
          _moneyFlow = Indicators.MoneyFlowIndex(Period);
          }
          protected override void OnBar()
          {
          var currentValue = _moneyFlow.Result.LastValue;
          //...
          }
        </code>
      </example>
      <signature>
        <code>public MoneyFlowIndex MoneyFlowIndex(int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.MoneyFlowIndex(cAlgo.API.Bars,System.Int32)">
      <summary>
        The Money Flow Index measures the strength of the money flow.
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="periods">The period used for the calculation</param>
      <returns>Money Flow Index indicator instance</returns>
      <example>
        <code>
          private MoneyFlowIndex _moneyFlow;

          [Parameter("Period", DefaultValue = 21)]
          public int Period { get; set; }

          protected override void OnStart()
          {
          _moneyFlow = Indicators.MoneyFlowIndex(Bars, Period);
          }
          protected override void OnBar()
          {
          var currentValue = _moneyFlow.Result.LastValue;
          //...
          }
        </code>
      </example>
      <signature>
        <code>public MoneyFlowIndex MoneyFlowIndex(Bars bars, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.NegativeVolumeIndex(cAlgo.API.DataSeries)">
      <summary>
        The Negative Volume Index is a calculation of the percentage change in price on days when trading volume declines.
      </summary>
      <param name="source">The price source data used for the calculation.</param>
      <returns>Negative Volume Index indicator instance</returns>
      <example>
        <code>
          private NegativeVolumeIndex _negativeVolume;

          [Parameter]
          public DataSeries Source { get; set; }

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          protected override void Initialize()
          {
          _negativeVolume = Indicators.NegativeVolumeIndex(Source);
          }
          public override void Calculate(int index)
          {
          // Display Result of Indicator
          Result[index] = _negativeVolume.Result[index];
          }
        </code>
      </example>
      <signature>
        <code>public NegativeVolumeIndex NegativeVolumeIndex(DataSeries source)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.OnBalanceVolume(cAlgo.API.DataSeries)">
      <summary>
        The On Balance Volume indicator relates price and volume.
      </summary>
      <param name="source">The price source data used for the calculation.</param>
      <returns>On Balance Volume indicator instance</returns>
      <signature>
        <code>public OnBalanceVolume OnBalanceVolume(DataSeries source)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.PositiveVolumeIndex(cAlgo.API.DataSeries)">
      <summary>
        The Positive Volume Index is a calculation of the percentage change in price on days when trading volume increased.
      </summary>
      <param name="source">The price source data used for the calculation.</param>
      <returns>Positive Volume Index indicator instance</returns>
      <example>
        <code>
          private PositiveVolumeIndex _positiveVolume;

          [Parameter]
          public DataSeries Source { get; set; }

          protected override void OnStart()
          {
          _positiveVolume = Indicators.PositiveVolumeIndex(Source);
          }
          protected override void OnBar()
          {
          var currentValue = _positiveVolume.Result.LastValue;
          //...
          }
        </code>
      </example>
      <signature>
        <code>public PositiveVolumeIndex PositiveVolumeIndex(DataSeries source)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.PriceVolumeTrend(cAlgo.API.DataSeries)">
      <summary>
        The Price Volume Trend indicator shows the relationship between price and volume.
      </summary>
      <param name="source">The price source data used for the calculation.</param>
      <returns>Price Volume Trend indicator instance</returns>
      <example>
        <code>
          private PriceVolumeTrend _priceVolumeTrend;

          [Parameter]
          public DataSeries Source { get; set; }

          protected override void OnStart()
          {
          _priceVolumeTrend = Indicators.PriceVolumeTrend(Source);
          }
          protected override void OnBar()
          {
          var currentValue = _priceVolumeTrend.Result.LastValue;
          //...
          }
        </code>
      </example>
      <signature>
        <code>public PriceVolumeTrend PriceVolumeTrend(DataSeries source)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TradeVolumeIndex(cAlgo.API.DataSeries)">
      <summary>
        Trade Volume Index indicator measures the amount of money flowing in and out of an asset.
      </summary>
      <param name="source">The price source data used for the calculation.</param>
      <returns>Trade Volume Index indicator instance</returns>
      <example>
        <code>
          private TradeVolumeIndex _tradeVolume;

          [Parameter]
          public DataSeries Source { get; set; }

          protected override void OnStart()
          {
          _tradeVolume = Indicators.TradeVolumeIndex(Source);
          }
          protected override void OnBar()
          {
          var currentValue = _tradeVolume.Result.LastValue;
          //...
          }
        </code>
      </example>
      <signature>
        <code>public TradeVolumeIndex TradeVolumeIndex(DataSeries source)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.VolumeOscillator(System.Int32,System.Int32)">
      <summary>
        The Volume Oscillator indicator is the difference between two moving averages.
      </summary>
      <param name="shortTerm">The fast moving average period</param>
      <param name="longTerm">The slow moving average period</param>
      <returns>Volume Oscillator indicator instance</returns>
      <example>
        <code>
          private VolumeOscillator _volumeOscillator;

          [Parameter("Short Term", DefaultValue = 9)]
          public int ShortTerm { get; set; }

          [Parameter("Long Term", DefaultValue = 21)]
          public int LongTerm { get; set; }

          protected override void OnStart()
          {
          _volumeOscillator = Indicators.VolumeOscillator(ShortTerm, LongTerm);;
          }
          protected override void OnBar()
          {
          var currentValue = _volumeOscillator.Result.LastValue;
          //...
          }
        </code>
      </example>
      <signature>
        <code>public VolumeOscillator VolumeOscillator(int shortTerm, int longTerm)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.VolumeOscillator(cAlgo.API.Bars,System.Int32,System.Int32)">
      <summary>
        The Volume Oscillator indicator is the difference between two moving averages.
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="shortTerm">The fast moving average period</param>
      <param name="longTerm">The slow moving average period</param>
      <returns>Volume Oscillator indicator instance</returns>
      <example>
        <code>
          private VolumeOscillator _volumeOscillator;

          [Parameter("Short Term", DefaultValue = 9)]
          public int ShortTerm { get; set; }

          [Parameter("Long Term", DefaultValue = 21)]
          public int LongTerm { get; set; }

          protected override void OnStart()
          {
          _volumeOscillator = Indicators.VolumeOscillator(Bars, ShortTerm, LongTerm);;
          }
          protected override void OnBar()
          {
          var currentValue = _volumeOscillator.Result.LastValue;
          //...
          }
        </code>
      </example>
      <signature>
        <code>public VolumeOscillator VolumeOscillator(Bars bars, int shortTerm, int longTerm)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.VolumeROC(System.Int32)">
      <summary>
        Volume Rate of Change Indicator measures the rate of change of the tick volume.
      </summary>
      <param name="periods">The period used for the calculation</param>
      <returns>
        The Volume ROC indicator instance.
      </returns>
      <example>
        <code>
          //...
          private VolumeROC _volumeROC;
          //...
          [Parameter("Period", DefaultValue = 21)]
          public int Period { get; set; }

          protected override void OnStart()
          {
          _volumeROC = Indicators.VolumeROC(Period);
          }
          protected override void OnBar()
          {
          var currentValue = _volumeROC.Result.LastValue;
          //...
          }
        </code>
      </example>
      <signature>
        <code>public VolumeROC VolumeROC(int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.VolumeROC(cAlgo.API.Bars,System.Int32)">
      <summary>
        Volume Rate of Change Indicator measures the rate of change of the tick volume.
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="periods">The period used for the calculation</param>
      <returns>
        The Volume ROC indicator instance.
      </returns>
      <example>
        <code>
          //...
          private VolumeROC _volumeROC;
          //...
          [Parameter("Period", DefaultValue = 21)]
          public int Period { get; set; }

          protected override void OnStart()
          {
          _volumeROC = Indicators.VolumeROC(Bars, Period);
          }
          protected override void OnBar()
          {
          var currentValue = _volumeROC.Result.LastValue;
          //...
          }
        </code>
      </example>
      <signature>
        <code>public VolumeROC VolumeROC(Bars bars, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AverageTrueRange(System.Int32,cAlgo.API.MovingAverageType)">
      <summary>
        Average true range. An indicator providing the degree of price volatility.
      </summary>
      <remarks>
        Average true range (ATR) is a technical analysis volatility indicator originally developed by J. Welles Wilder. The indicator provides the degree of price volatility. The average true range is an N-day exponential moving average of the true range values. Wilder recommended a 14-period smoothing.
      </remarks>
      <param name="periods">Period of moving average to use for Average True Range caluclation.</param>
      <param name="maType">Type of moving average to use for Average True Range caluclation.</param>
      <returns>Average True Range indicator instance</returns>
      <example>
        <code>
          private AverageTrueRange atrIndicator;

          [Parameter(DefaultValue = 20)]
          public int Period { get; set; }

          [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
          public MovingAverageType MAType { get; set; }

          [Parameter(DefaultValue = 0.002)]
          public double ATRValue { get; set; }

          protected override void OnStart()
          {
          atrIndicator = Indicators.AverageTrueRange(Period, MAType);
          }

          protected override void OnTick()
          {
          //If atrIndicator last value is greater than the ATRValue input
          if (atrIndicator.Result.LastValue &gt; ATRValue)
          {
          // Do something
          }
          //...
          }
        </code>
      </example>
      <signature>
        <code>public AverageTrueRange AverageTrueRange(int periods, MovingAverageType maType)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AverageTrueRange(cAlgo.API.Bars,System.Int32,cAlgo.API.MovingAverageType)">
      <summary>
        Average true range. An indicator providing the degree of price volatility.
      </summary>
      <remarks>
        Average true range (ATR) is a technical analysis volatility indicator originally developed by J. Welles Wilder. The indicator provides the degree of price volatility. The average true range is an N-day exponential moving average of the true range values. Wilder recommended a 14-period smoothing.
      </remarks>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="periods">Period of moving average to use for Average True Range caluclation.</param>
      <param name="maType">Type of moving average to use for Average True Range caluclation.</param>
      <returns>Average True Range indicator instance</returns>
      <example>
        <code>
          private AverageTrueRange atrIndicator;

          [Parameter(DefaultValue = 20)]
          public int Period { get; set; }

          [Parameter("MA Type", DefaultValue = MovingAverageType.Simple)]
          public MovingAverageType MAType { get; set; }

          [Parameter(DefaultValue = 0.002)]
          public double ATRValue { get; set; }

          protected override void OnStart()
          {
          atrIndicator = Indicators.AverageTrueRange(Bars, Period, MAType);
          }

          protected override void OnTick()
          {
          //If atrIndicator last value is greater than the ATRValue input
          if (atrIndicator.Result.LastValue &gt; ATRValue)
          {
          // Do something
          }
          //...
          }
        </code>
      </example>
      <signature>
        <code>public AverageTrueRange AverageTrueRange(Bars bars, int periods, MovingAverageType maType)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.DonchianChannel(System.Int32)">
      <summary>
        The Donchian channel is a volatility indicator forming a channel between the highest high and the lowest low of the chosen period.
      </summary>
      <remarks>
        The Donchian channel is mainly used for providing entry signals. A long is established when the price closes above the Donchian Channel. Conversely, if it closes below, then a short is established.
      </remarks>
      <param name="periods">Period of Calculation of the Dochian Channel</param>
      <returns>Donchian Channel indicator instance</returns>
      <example>
        <code>
          //...
          private DonchianChannel donchian;
          //...
          protected override void OnStart()
          {
          donchian = Indicators.DonchianChannel(Period);
          }
          protected override void OnBar()
          {
          Print("Top Value = {0}", donchian.Top.LastValue);
          Print("Middle Value = {0}", donchian.Middle.LastValue);
          Print("Bottom Value = {0}", donchian.Bottom.LastValue);
          //...
          }
        </code>
      </example>
      <signature>
        <code>public DonchianChannel DonchianChannel(int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.DonchianChannel(cAlgo.API.Bars,System.Int32)">
      <summary>
        The Donchian channel is a volatility indicator forming a channel between the highest high and the lowest low of the chosen period.
      </summary>
      <remarks>
        The Donchian channel is mainly used for providing entry signals. A long is established when the price closes above the Donchian Channel. Conversely, if it closes below, then a short is established.
      </remarks>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="periods">Period of Calculation of the Dochian Channel</param>
      <returns>Donchian Channel indicator instance</returns>
      <example>
        <code>
          //...
          private DonchianChannel donchian;
          //...
          protected override void OnStart()
          {
          donchian = Indicators.DonchianChannel(Bars, Period);
          }
          protected override void OnBar()
          {
          Print("Top Value = {0}", donchian.Top.LastValue);
          Print("Middle Value = {0}", donchian.Middle.LastValue);
          Print("Bottom Value = {0}", donchian.Bottom.LastValue);
          //...
          }
        </code>
      </example>
      <signature>
        <code>public DonchianChannel DonchianChannel(Bars bars, int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.IchimokuKinkoHyo(System.Int32,System.Int32,System.Int32)">
      <summary>
        Ichimoku Kinko Hyo Indicator is a moving average based trend identification system.
      </summary>
      <remarks>
        Ichimoku Kinko Hyo Indicator contains more data points than standard candlestick charts and thus provides a clearer picture of potential price action.
      </remarks>
      <param name="tenkanSenPeriods">The period used for the Tenkan Sen</param>
      <param name="kijunSenPeriods">The period used for the Kijun Sen</param>
      <param name="senkouSpanBPeriods">The period used for the Senkou Span B</param>
      <returns>Ichimoku Kinko Hyo Indicator instance</returns>
      <example>
        <code>
          //...
          private IchimokuKinkoHyo ichimokuKinkoHyo;
          //...
          protected override void OnStart()
          {
          ichimokuKinkoHyo = Indicators.IchimokuKinkoHyo
          (tenkanSenPeriods, kijunSenPeriods, senkouSpanBPeriods);
          }
          protected override void OnBar()
          {
          Print("ChikouSpan Value = {0}", ichimokuKinkoHyo.ChikouSpan.LastValue);
          Print("KijunSen Value = {0}", ichimokuKinkoHyo.KijunSen.LastValue);
          Print("SenkouSpanA Value = {0}", ichimokuKinkoHyo.SenkouSpanA.LastValue);
          Print("SenkouSpanB Value = {0}", ichimokuKinkoHyo.SenkouSpanB.LastValue);
          Print("TenkanSen Value = {0}", ichimokuKinkoHyo.TenkanSen.LastValue);

          //...
          }
        </code>
      </example>
      <signature>
        <code>public IchimokuKinkoHyo IchimokuKinkoHyo(int tenkanSenPeriods, int kijunSenPeriods, int senkouSpanBPeriods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.IchimokuKinkoHyo(cAlgo.API.Bars,System.Int32,System.Int32,System.Int32)">
      <summary>
        Ichimoku Kinko Hyo Indicator is a moving average based trend identification system.
      </summary>
      <remarks>
        Ichimoku Kinko Hyo Indicator contains more data points than standard candlestick charts and thus provides a clearer picture of potential price action.
      </remarks>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="tenkanSenPeriods">The period used for the Tenkan Sen</param>
      <param name="kijunSenPeriods">The period used for the Kijun Sen</param>
      <param name="senkouSpanBPeriods">The period used for the Senkou Span B</param>
      <returns>Ichimoku Kinko Hyo Indicator instance</returns>
      <example>
        <code>
          //...
          private IchimokuKinkoHyo ichimokuKinkoHyo;
          //...
          protected override void OnStart()
          {
          ichimokuKinkoHyo = Indicators.IchimokuKinkoHyo
          (Bars, tenkanSenPeriods, kijunSenPeriods, senkouSpanBPeriods);
          }
          protected override void OnBar()
          {
          Print("ChikouSpan Value = {0}", ichimokuKinkoHyo.ChikouSpan.LastValue);
          Print("KijunSen Value = {0}", ichimokuKinkoHyo.KijunSen.LastValue);
          Print("SenkouSpanA Value = {0}", ichimokuKinkoHyo.SenkouSpanA.LastValue);
          Print("SenkouSpanB Value = {0}", ichimokuKinkoHyo.SenkouSpanB.LastValue);
          Print("TenkanSen Value = {0}", ichimokuKinkoHyo.TenkanSen.LastValue);

          //...
          }
        </code>
      </example>
      <signature>
        <code>public IchimokuKinkoHyo IchimokuKinkoHyo(Bars bars, int tenkanSenPeriods, int kijunSenPeriods, int senkouSpanBPeriods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AwesomeOscillator">
      <summary>
        Initializes the AwesomeOscillator indicator instance
      </summary>
      <returns>AwesomeOscillator indicator instance</returns>
      <signature>
        <code>public AwesomeOscillator AwesomeOscillator()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AwesomeOscillator(cAlgo.API.Bars)">
      <summary>
        Initializes the AwesomeOscillator indicator instance by passing the bars
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <returns>AwesomeOscillator indicator instance</returns>
      <signature>
        <code>public AwesomeOscillator AwesomeOscillator(Bars bars)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AcceleratorOscillator">
      <summary>
        Initializes the AcceleratorOscillator indicator instance
      </summary>
      <returns>AcceleratorOscillator indicator instance</returns>
      <signature>
        <code>public AcceleratorOscillator AcceleratorOscillator()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AcceleratorOscillator(cAlgo.API.Bars)">
      <summary>
        Initializes the AcceleratorOscillator indicator instance
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <returns>AcceleratorOscillator indicator instance</returns>
      <signature>
        <code>public AcceleratorOscillator AcceleratorOscillator(Bars bars)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.KeltnerChannels(System.Int32,cAlgo.API.MovingAverageType,System.Int32,cAlgo.API.MovingAverageType,System.Double)">
      <summary>
        Initializes the Keltner Channels indicator instance
      </summary>
      <param name="maPeriod">Moving Average Period</param>
      <param name="maType">Moving Average Type</param>
      <param name="atrPeriod">Average True Range Period</param>
      <param name="atrMaType">Average True Range MAType</param>
      <param name="bandDistance">ATR Multiplier</param>
      <returns>KeltnerChannels</returns>
      <signature>
        <code>public KeltnerChannels KeltnerChannels(int maPeriod, MovingAverageType maType, int atrPeriod, MovingAverageType atrMaType, double bandDistance)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.KeltnerChannels(cAlgo.API.Bars,System.Int32,cAlgo.API.MovingAverageType,System.Int32,cAlgo.API.MovingAverageType,System.Double)">
      <summary>
        Initializes the Keltner Channels indicator instance
      </summary>
      <param name="bars">The Bars that will be used by indicator, you can pass another timeframe/symbol bars</param>
      <param name="maPeriod">Moving Average Period</param>
      <param name="maType">Moving Average Type</param>
      <param name="atrPeriod">Average True Range Period</param>
      <param name="atrMaType">Average True Range MAType</param>
      <param name="bandDistance">ATR Multiplier</param>
      <returns>KeltnerChannels</returns>
      <signature>
        <code>public KeltnerChannels KeltnerChannels(Bars bars, int maPeriod, MovingAverageType maType, int atrPeriod, MovingAverageType atrMaType, double bandDistance)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.AverageDirectionalMovementIndexRating(System.Int32)">
      <summary>
        The Average Directional Movement Index Rating (ADXR) measures the strength of the Average Directional Movement Index (ADX).
        It's calculated by taking the average of the current ADX and the ADX from one time period before.
      </summary>
      <param name="periods">The Period of AverageDirectionalMovementIndexRating</param>
      <returns>AverageDirectionalMovementIndexRating</returns>
      <signature>
        <code>public AverageDirectionalMovementIndexRating AverageDirectionalMovementIndexRating(int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.Alligator(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        Legendary trader Bill Williams, an early pioneer of market psychology, developed the trend-following Alligator indicator,
        which follows the premise that financial markets and individual securities trend just 15% to 30% of the time while grinding through sideways ranges the other 70% to 85% of the time.
      </summary>
      <param name="jawsPeriods">The jaws period of Alligator</param>
      <param name="jawsShift">The jaws shift of Alligator</param>
      <param name="teethPeriods">The teeth period of Alligator</param>
      <param name="teethShift">The teeth shift of Alligator</param>
      <param name="lipsPeriods">The lips period of Alligator</param>
      <param name="lipsShift">The lips shift of Alligator</param>
      <returns>Alligator</returns>
      <signature>
        <code>public Alligator Alligator(int jawsPeriods, int jawsShift, int teethPeriods, int teethShift, int lipsPeriods, int lipsShift)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.CenterOfGravity(System.Int32)">
      <summary>
        The Center of Gravity (COG) indicator is a technical indicator developed by John Ehlers in 2002, used to identify potential turning points in the price as early as possible.
      </summary>
      <param name="length">The length of CenterOfGravity</param>
      <returns>CenterOfGravity</returns>
      <signature>
        <code>public CenterOfGravity CenterOfGravity(int length)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.CyberCycle(System.Double)">
      <summary>
        The Cyber Cycles Oscillator is an indicator designed by John Ehlers, it is used for isolating the cycle component of the market from its trend counterpart.
      </summary>
      <param name="alpha">CyberCycle Alpha</param>
      <returns>CyberCycle</returns>
      <signature>
        <code>public CyberCycle CyberCycle(double alpha)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.Fractals(System.Int32)">
      <summary>
        The fractal indicator is a trading indicator used in technical analysis that is used to identify potential trend reversal points in a market.
      </summary>
      <param name="periods">Fractals Period</param>
      <returns>Fractals</returns>
      <signature>
        <code>public Fractals Fractals(int periods)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.PolynomialRegressionChannels(System.Int32,System.Int32,System.Double,System.Double)">
      <summary>
        Polynomial Regression Channel (PRC) is an RTX Extension indicator that draws a best fit n-degree polynomial regression line through a recent period of data.
      </summary>
      <param name="degree">The degree of PolynomialRegressionChannels</param>
      <param name="periods">The period of PolynomialRegressionChannels</param>
      <param name="standardDeviation">The first standardDeviation of PolynomialRegressionChannels</param>
      <param name="standardDeviation2">The second standardDeviation of PolynomialRegressionChannels</param>
      <returns>PolynomialRegressionChannels</returns>
      <signature>
        <code>public PolynomialRegressionChannels PolynomialRegressionChannels(int degree, int periods, double standardDeviation, double standardDeviation2)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.Supertrend(System.Int32,System.Double)">
      <summary>
        Supertrend is one of the most popular trend trading indicators
      </summary>
      <param name="periods">Supertrend Period</param>
      <param name="multiplier">Supertrend Multiplier</param>
      <returns>Supertrend</returns>
      <signature>
        <code>public Supertrend Supertrend(int periods, double multiplier)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.IIndicatorsAccessor.TickVolume">
      <summary>
        Tick Volume gives you the number of ticks for each bar.
      </summary>
      <returns>TickVolume</returns>
      <signature>
        <code>public TickVolume TickVolume()</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Internals.INotifications">
      <summary>
        It is an interface that represents all Notifications.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to use API notifications to play sound or send an email
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class NotificationsSample : Indicator
          {
          private int _lastNotifiedBarIndex;

          [Parameter("Sound File Path", DefaultValue = "C:\\Windows\\Media\\notify.wav")]
          public string SoundFilePath { get; set; }

          [Parameter("Sender Email")]
          public string SenderEmail { get; set; }

          [Parameter("Receiver Email")]
          public string ReceiverEmail { get; set; }

          protected override void Initialize()
          {
          }

          public override void Calculate(int index)
          {
          if (!IsLastBar || _lastNotifiedBarIndex == index) return;

          _lastNotifiedBarIndex = index;

          if (Bars.Last(1).Close &gt; Bars.Last(1).Open)
          {
          Notify("Up Bar Closed");
          }
          else if (Bars.Last(1).Close &lt; Bars.Last(1).Open)
          {
          Notify("Down Bar Closed");
          }
          }

          private void Notify(string message)
          {
          if (!string.IsNullOrWhiteSpace(SoundFilePath))
          {
          Notifications.PlaySound(SoundFilePath);
          }

          if (!string.IsNullOrWhiteSpace(SenderEmail) &amp;&amp; !string.IsNullOrWhiteSpace(ReceiverEmail))
          {
          Notifications.SendEmail(SenderEmail, ReceiverEmail, "Notification", message);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Notifications" />
      <signature>
        <code>public interface INotifications</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.INotifications.PlaySound(System.String)">
      <summary>
        Plays a notification sound.
      </summary>
      <param name="fileName">The sound file path</param>
      <remarks>
        This method doesn't work during backtesting and optimization.
        In indicators, use it with IsRealTime/IsLastBar, for real-time values.
      </remarks>
      <example>
        <code>
          Notifications.PlaySound(@"C:\SampleDestination\SampleSound.mp3");
        </code>
      </example>
      <signature>
        <code>public void PlaySound(string fileName)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.INotifications.PlaySound(cAlgo.API.SoundType)">
      <summary>
        Plays the specified SoundType.
      </summary>
      <param name="soundType">The SoundType to be played.</param>
      <remarks>
        This method doesn't work during backtesting and optimization.
        In indicators, use it with IsRealTime/IsLastBar, for real-time values.
      </remarks>
      <example>
        <code>
          Notifications.PlaySound(SoundType.PositiveNotification);
        </code>
      </example>
      <seealso cref="T:cAlgo.API.SoundType" />
      <signature>
        <code>public void PlaySound(SoundType soundType)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.INotifications.SendEmail(System.String,System.String,System.String,System.String)">
      <summary>
        Sends a notification email message.
      </summary>
      <remarks>
        This method doesn't work during backtesting and optimization.
        Use correct settings before trying to send an email notification.
        You can do that in Preferences -&gt; Email Settings
      </remarks>
      <param name="from">Sender's Address</param>
      <param name="to">Recipient's Address</param>
      <param name="subject">Email Subject</param>
      <param name="text">Email Body</param>
      <example>
        <code>
          Notifications.SendEmail("from@email.com", "to@email.com",
          "Email Notification Subject", "Email body");
        </code>
      </example>
      <signature>
        <code>public void SendEmail(string from, string to, string subject, string text)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Internals.IServer">
      <summary>
        Server related information.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to use Server object to get data related to server and connection
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ServerSample : Indicator
          {
          private TextBlock _isConnectedTextBlock;

          protected override void Initialize()
          {
          var grid = new Grid(4, 2)
          {
          BackgroundColor = Color.Gold,
          Opacity = 0.6,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          };

          var style = new Style();

          style.Set(ControlProperty.Padding, 5);
          style.Set(ControlProperty.Margin, 5);
          style.Set(ControlProperty.FontWeight, FontWeight.ExtraBold);
          style.Set(ControlProperty.BackgroundColor, Color.Black);

          grid.AddChild(new TextBlock { Text = "Server Info", Style = style, HorizontalAlignment = HorizontalAlignment.Center }, 0, 0, 1, 2);

          grid.AddChild(new TextBlock { Text = "Time", Style = style }, 1, 0);
          grid.AddChild(new TextBlock { Text = Server.Time.ToString("o"), Style = style }, 1, 1);

          grid.AddChild(new TextBlock { Text = "Time (UTC)", Style = style }, 2, 0);
          grid.AddChild(new TextBlock { Text = Server.TimeInUtc.ToString("o"), Style = style }, 2, 1);

          grid.AddChild(new TextBlock { Text = "Is Connected", Style = style }, 3, 0);

          _isConnectedTextBlock = new TextBlock
          {
          Text = Server.IsConnected ? "Yes" : "No",
          Style = style,
          };

          Server.Connected += () =&gt; _isConnectedTextBlock.Text = "Yes";
          Server.Disconnected += () =&gt; _isConnectedTextBlock.Text = "No";

          grid.AddChild(_isConnectedTextBlock, 3, 1);

          Chart.AddControl(grid);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Application" />
      <signature>
        <code>public interface IServer</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IServer.Time">
      <summary>
        Returns the server time.
      </summary>
      <example>
        <code>
          protected override void OnTick()
          {
          Print("The Server Time is: {0}", Server.Time);
          }
        </code>
      </example>
      <signature>
        <code>public DateTime Time { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IServer.TimeInUtc">
      <summary>
        Returns the server time in UTC.
      </summary>
      <example>
        <code>
          protected override void OnTick()
          {
          Print("The Server Time in UTC is: {0}", Server.TimeInUtc);
          }
        </code>
      </example>
      <signature>
        <code>public DateTime TimeInUtc { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.IServer.IsConnected">
      <summary>
        Indicates current connection status with the server
      </summary>
      <signature>
        <code>public bool IsConnected { get; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Internals.IServer.Connected">
      <summary>
        Event raised when successfully connected with the server
      </summary>
      <signature>
        <code>public event Action Connected;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Internals.IServer.Disconnected">
      <summary>
        Disconnected - Event raised when connection with the server is lost
      </summary>
      <signature>
        <code>public event Action Disconnected;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Internals.LeverageTier">
      <summary>
        Tier of dynamic leverage.
      </summary>
      <example>
        <code>
          var firstTier = Symbol.DynamicLeverage[0];
          Print("Leverage for volume up to {0} is {1}, firstTier.Volume, firstTier.Leverage);
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Internals.Symbol" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataSymbols" />
      <signature>
        <code>public interface LeverageTier</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.LeverageTier.Volume">
      <summary>
        Volume of dynamic leverage tier.
      </summary>
      <signature>
        <code>public double Volume { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.LeverageTier.Leverage">
      <summary>
        Leverage of dynamic leverage tier.
      </summary>
      <signature>
        <code>public double Leverage { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Internals.MarketData">
      <summary>
        Provide access to charts data (bars and ticks) and to the Depth of Market data.
      </summary>
      <example>
        <code>
          MarketDepth md = MarketData.GetMarketDepth(Symbol);
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Internals;

          namespace cAlgo
          {
          // This sample indicator shows how to get a symbol and time frame market data
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class MarketDataSample : Indicator
          {
          private Bars _bars;

          private Ticks _ticks;

          private MarketDepth _marketDepth;

          [Parameter("Use Current Symbol", DefaultValue = true)]
          public bool UseCurrentSymbol { get; set; }

          [Parameter("Other Symbol Name", DefaultValue = "GBPUSD")]
          public string OtherSymbolName { get; set; }

          [Parameter("Use Current TimeFrame", DefaultValue = true)]
          public bool UseCurrentTimeFrame { get; set; }

          [Parameter("Other TimeFrame", DefaultValue = "Daily")]
          public TimeFrame OtherTimeFrame { get; set; }

          protected override void Initialize()
          {
          var symbol = UseCurrentSymbol ? Symbol : Symbols.GetSymbol(OtherSymbolName);
          var timeframe = UseCurrentTimeFrame ? TimeFrame : OtherTimeFrame;

          // You can use GetBarsAsync instead of GetBars
          _bars = MarketData.GetBars(timeframe, symbol.Name);
          // You can use GetTicksAsync instead of GetTicks
          _ticks = MarketData.GetTicks(symbol.Name);

          _marketDepth = MarketData.GetMarketDepth(symbol.Name);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketData" />
      <signature>
        <code>public interface MarketData</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.MarketData.GetBars(cAlgo.API.TimeFrame)">
      <summary>
        Gets the bars for the specific timeframe.
      </summary>
      <param name="timeFrame">The bars time frame</param>
      <returns>
      </returns>
      <signature>
        <code>public Bars GetBars(TimeFrame timeFrame)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.MarketData.GetBars(cAlgo.API.TimeFrame,System.String)">
      <summary>
        Gets the chart bars for the specific timeframe for the specific symbol.
      </summary>
      <param name="timeFrame">The bars time frame</param>
      <param name="symbolName">The bars symbol name</param>
      <returns>
      </returns>
      <signature>
        <code>public Bars GetBars(TimeFrame timeFrame, string symbolName)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.MarketData.GetBarsAsync(cAlgo.API.TimeFrame,System.Action{cAlgo.API.Bars})">
      <summary>
        The asynchronous method to get the bars for the specific timeframe for the specific symbol.
      </summary>
      <param name="timeFrame">The bars time frame</param>
      <param name="callback">The callback that will be called after getting the bars</param>
      <signature>
        <code>public void GetBarsAsync(TimeFrame timeFrame, Action&lt;Bars&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.MarketData.GetBarsAsync(cAlgo.API.TimeFrame,System.String,System.Action{cAlgo.API.Bars})">
      <summary>
        The asynchronous method to get the specific bars for the specific timeframe for the specific symbol.
      </summary>
      <param name="timeFrame">The bars time frame</param>
      <param name="symbolName">The bars symbol name</param>
      <param name="callback">The callback that will be called after getting the bars</param>
      <signature>
        <code>public void GetBarsAsync(TimeFrame timeFrame, string symbolName, Action&lt;Bars&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.MarketData.GetTicks">
      <summary>
        Gets the Tick data.
      </summary>
      <returns>
      </returns>
      <signature>
        <code>public Ticks GetTicks()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.MarketData.GetTicks(System.String)">
      <summary>
        Gets the Tick data for the specific symbol.
      </summary>
      <param name="symbolName">The ticks symbol name</param>
      <returns>
      </returns>
      <signature>
        <code>public Ticks GetTicks(string symbolName)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.MarketData.GetTicksAsync(System.Action{cAlgo.API.Ticks})">
      <summary>
        The asynchronous method to get tick data.
      </summary>
      <param name="callback">The callback that will be called after getting the ticks</param>
      <signature>
        <code>public void GetTicksAsync(Action&lt;Ticks&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.MarketData.GetTicksAsync(System.String,System.Action{cAlgo.API.Ticks})">
      <summary>
        The asynchronous method to get tick data for the specific symbol.
      </summary>
      <param name="symbolName">The ticks symbol name</param>
      <param name="callback">The callback that will be called after getting the ticks</param>
      <signature>
        <code>public void GetTicksAsync(string symbolName, Action&lt;Ticks&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.MarketData.GetMarketDepth(System.String)">
      <summary>
        Gets the Depth of Market for the specific symbol.
      </summary>
      <param name="symbolName">The symbol name e.g. "EURUSD"</param>
      <returns>Depth of Market</returns>
      <example>
        <code>
          MarketDepth md = MarketData.GetMarketDepth("EURUSD");
        </code>
      </example>
      <signature>
        <code>public MarketDepth GetMarketDepth(string symbolName)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Internals.MarketHours">
      <summary>
        Access to symbol's trading sessions schedule
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Internals;
          using System;

          namespace cAlgo
          {
          // This sample indicator shows how to use a symbol MarketHours
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class MarketHoursSample : Indicator
          {
          private TextBlock _isOpenedTextBlock;

          private TextBlock _timeTillCloseTextBlock;

          private TextBlock _timeTillOpenTextBlock;

          private Symbol _symbol;

          [Parameter("Use Current Symbol", DefaultValue = true)]
          public bool UseCurrentSymbol { get; set; }

          [Parameter("Other Symbol Name", DefaultValue = "GBPUSD")]
          public string OtherSymbolName { get; set; }

          protected override void Initialize()
          {
          var grid = new Grid(6, 2)
          {
          BackgroundColor = Color.Gold,
          Opacity = 0.6,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          };

          var style = new Style();

          style.Set(ControlProperty.Padding, 1);
          style.Set(ControlProperty.Margin, 2);
          style.Set(ControlProperty.BackgroundColor, Color.Black);
          style.Set(ControlProperty.FontSize, 8);

          _symbol = UseCurrentSymbol ? Symbol : Symbols.GetSymbol(OtherSymbolName);

          grid.AddChild(new TextBlock { Text = "Symbol Info", Style = style, HorizontalAlignment = HorizontalAlignment.Center }, 0, 0, 1, 2);

          grid.AddChild(new TextBlock { Text = "Time Till Open", Style = style }, 1, 0);

          _timeTillOpenTextBlock = new TextBlock { Text = _symbol.MarketHours.TimeTillOpen().ToString(), Style = style };

          grid.AddChild(_timeTillOpenTextBlock, 1, 1);

          grid.AddChild(new TextBlock { Text = "Time Till Close", Style = style }, 2, 0);

          _timeTillCloseTextBlock = new TextBlock { Text = _symbol.MarketHours.TimeTillClose().ToString(), Style = style };

          grid.AddChild(_timeTillCloseTextBlock, 2, 1);

          grid.AddChild(new TextBlock { Text = "Is Opened", Style = style }, 3, 0);

          _isOpenedTextBlock = new TextBlock { Text = _symbol.MarketHours.IsOpened().ToString(), Style = style };

          grid.AddChild(_isOpenedTextBlock, 3, 1);

          grid.AddChild(new TextBlock { Text = "Trading Sessions #", Style = style }, 4, 0);

          grid.AddChild(new TextBlock { Text = _symbol.MarketHours.Sessions.Count.ToString(), Style = style }, 4, 1);

          grid.AddChild(new TextBlock { Text = "Trading Session Week Days", Style = style }, 5, 0);

          var weekDays = string.Empty;

          for (var iSession = 0; iSession &lt; _symbol.MarketHours.Sessions.Count; iSession++)
          {
          var currentSessionWeekDays = string.Format("{0}({1})-{2}({3})", _symbol.MarketHours.Sessions[iSession].StartDay, _symbol.MarketHours.Sessions[iSession].StartTime, _symbol.MarketHours.Sessions[iSession].EndDay, _symbol.MarketHours.Sessions[iSession].EndTime);
          weekDays = iSession == 0 ? currentSessionWeekDays : string.Format("{0}, {1}", weekDays, currentSessionWeekDays);
          }

          grid.AddChild(new TextBlock { Text = weekDays, Style = style }, 5, 1);

          Chart.AddControl(grid);

          Timer.Start(TimeSpan.FromSeconds(1));
          }

          protected override void OnTimer()
          {
          _timeTillOpenTextBlock.Text = _symbol.MarketHours.TimeTillOpen().ToString();
          _timeTillCloseTextBlock.Text = _symbol.MarketHours.TimeTillClose().ToString();
          _isOpenedTextBlock.Text = _symbol.MarketHours.IsOpened().ToString();
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Internals.MarketHours" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataSymbols" />
      <signature>
        <code>public interface MarketHours</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.MarketHours.Sessions">
      <summary>
        List of all symbol's trading sessions
      </summary>
      <signature>
        <code>public IReadonlyList&lt;TradingSession&gt; Sessions { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.MarketHours.IsOpened">
      <summary>
        Indicates if trading session is active
      </summary>
      <signature>
        <code>public bool IsOpened()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.MarketHours.IsOpened(System.DateTime)">
      <summary>
        Indicates if trading session is active
      </summary>
      <param name="datetime">Date and time to check</param>
      <returns>
      </returns>
      <signature>
        <code>public bool IsOpened(DateTime datetime)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.MarketHours.TimeTillClose">
      <summary>
        Time left till end of current trading session. Returns 0 if session is not active
      </summary>
      <signature>
        <code>public TimeSpan TimeTillClose()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.MarketHours.TimeTillOpen">
      <summary>
        Time left till start of new trading session. Returns 0 if session is already active
      </summary>
      <signature>
        <code>public TimeSpan TimeTillOpen()</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Internals.Symbol">
      <summary>
        Represents a currency pair.
      </summary>
      <example>
        <code>

          double bid = Symbol.Bid;
          double ask = Symbol.Ask;
          string code = Symbol.Code;
          int digits = Symbol.Digits;
          double pipSize = Symbol.PipSize;
          double pointSize = Symbol.PointSize;
          double spread = Symbol.Spread;

        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Internals;
          using System;

          namespace cAlgo
          {
          /// <summary>
            /// This sample indicator shows how to get a symbol data
            ///
          </summary>
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class SymbolSample : Indicator
          {
          private TextBlock _spreadTextBlock;
          private TextBlock _bidTextBlock;
          private TextBlock _askTextBlock;
          private TextBlock _unrealizedGrossProfitTextBlock;
          private TextBlock _unrealizedNetProfitTextBlock;
          private TextBlock _timeTillOpenTextBlock;
          private TextBlock _timeTillCloseTextBlock;
          private TextBlock _isOpenedTextBlock;
          private Symbol _symbol;

          [Parameter("Use Current Symbol", DefaultValue = true)]
          public bool UseCurrentSymbol { get; set; }

          [Parameter("Other Symbol Name", DefaultValue = "GBPUSD")]
          public string OtherSymbolName { get; set; }

          protected override void Initialize()
          {
          var grid = new Grid(44, 2)
          {
          BackgroundColor = Color.Gold,
          Opacity = 0.6,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center
          };

          var style = new Style();

          style.Set(ControlProperty.Padding, 1);
          style.Set(ControlProperty.Margin, 2);
          style.Set(ControlProperty.BackgroundColor, Color.Black);
          style.Set(ControlProperty.FontSize, 8);

          _symbol = UseCurrentSymbol ? Symbol : Symbols.GetSymbol(OtherSymbolName);

          grid.AddChild(new TextBlock
          {
          Text = "Symbol Info",
          Style = style,
          HorizontalAlignment = HorizontalAlignment.Center
          }, 0, 0, 1, 2);

          grid.AddChild(new TextBlock
          {
          Text = "Name",
          Style = style
          }, 1, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.Name,
          Style = style
          }, 1, 1);

          grid.AddChild(new TextBlock
          {
          Text = "ID",
          Style = style
          }, 2, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.Id.ToString(),
          Style = style
          }, 2, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Digits",
          Style = style
          }, 3, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.Digits.ToString(),
          Style = style
          }, 3, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Description",
          Style = style
          }, 4, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.Description,
          Style = style
          }, 4, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Lot Size",
          Style = style
          }, 5, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.LotSize.ToString(),
          Style = style
          }, 5, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Pip Size",
          Style = style
          }, 6, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.PipSize.ToString(),
          Style = style
          }, 6, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Pip Value",
          Style = style
          }, 7, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.PipValue.ToString(),
          Style = style
          }, 7, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Tick Size",
          Style = style
          }, 8, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.TickSize.ToString(),
          Style = style
          }, 8, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Tick Value",
          Style = style
          }, 9, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.TickValue.ToString(),
          Style = style
          }, 9, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Volume In Units Max",
          Style = style
          }, 10, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.VolumeInUnitsMax.ToString(),
          Style = style
          }, 10, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Volume In Units Min",
          Style = style
          }, 11, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.VolumeInUnitsMin.ToString(),
          Style = style
          }, 11, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Volume In Units Step",
          Style = style
          }, 12, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.VolumeInUnitsStep.ToString(),
          Style = style
          }, 12, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Ask",
          Style = style
          }, 13, 0);

          _askTextBlock = new TextBlock
          {
          Text = _symbol.Ask.ToString(),
          Style = style
          };

          grid.AddChild(_askTextBlock, 13, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Bid",
          Style = style
          }, 14, 0);

          _bidTextBlock = new TextBlock
          {
          Text = _symbol.Bid.ToString(),
          Style = style
          };

          grid.AddChild(_bidTextBlock, 14, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Spread",
          Style = style
          }, 15, 0);

          _spreadTextBlock = new TextBlock
          {
          Text = _symbol.Spread.ToString(),
          Style = style
          };

          grid.AddChild(_spreadTextBlock, 15, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Unrealized Gross Profit",
          Style = style
          }, 16, 0);

          _unrealizedGrossProfitTextBlock = new TextBlock
          {
          Text = _symbol.UnrealizedGrossProfit.ToString(),
          Style = style
          };

          grid.AddChild(_unrealizedGrossProfitTextBlock, 16, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Unrealized Net Profit",
          Style = style
          }, 17, 0);

          _unrealizedNetProfitTextBlock = new TextBlock
          {
          Text = _symbol.UnrealizedNetProfit.ToString(),
          Style = style
          };

          grid.AddChild(_unrealizedNetProfitTextBlock, 17, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Time Till Open",
          Style = style
          }, 18, 0);

          _timeTillOpenTextBlock = new TextBlock
          {
          Text = _symbol.MarketHours.TimeTillOpen().ToString(),
          Style = style
          };

          grid.AddChild(_timeTillOpenTextBlock, 18, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Time Till Close",
          Style = style
          }, 19, 0);

          _timeTillCloseTextBlock = new TextBlock
          {
          Text = _symbol.MarketHours.TimeTillClose().ToString(),
          Style = style
          };

          grid.AddChild(_timeTillCloseTextBlock, 19, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Is Opened",
          Style = style
          }, 20, 0);

          _isOpenedTextBlock = new TextBlock
          {
          Text = _symbol.MarketHours.IsOpened().ToString(),
          Style = style
          };

          grid.AddChild(_isOpenedTextBlock, 20, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Trading Sessions #",
          Style = style
          }, 21, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.MarketHours.Sessions.Count.ToString(),
          Style = style
          }, 21, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Trading Session Week Days",
          Style = style
          }, 22, 0);

          var weekDays = string.Empty;

          for (var iSession = 0; iSession &lt; _symbol.MarketHours.Sessions.Count; iSession++)
          {
          var currentSessionWeekDays = string.Format("{0}({1})-{2}({3})", _symbol.MarketHours.Sessions[iSession].StartDay, _symbol.MarketHours.Sessions[iSession].StartTime, _symbol.MarketHours.Sessions[iSession].EndDay, _symbol.MarketHours.Sessions[iSession].EndTime);

          weekDays = iSession == 0 ? currentSessionWeekDays : string.Format("{0}, {1}", weekDays, currentSessionWeekDays);
          }

          grid.AddChild(new TextBlock
          {
          Text = weekDays,
          Style = style
          }, 22, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Leverage Tier",
          Style = style
          }, 23, 0);

          var leverageTiers = string.Empty;

          for (var iLeverageTier = 0; iLeverageTier &lt; _symbol.DynamicLeverage.Count; iLeverageTier++)
          {
          var currentLeverageTiers = string.Format("Volume up to {0} is {1}", _symbol.DynamicLeverage[iLeverageTier].Volume, _symbol.DynamicLeverage[iLeverageTier].Leverage);

          leverageTiers = iLeverageTier == 0 ? currentLeverageTiers : string.Format("{0}, {1}", leverageTiers, currentLeverageTiers);
          }

          grid.AddChild(new TextBlock
          {
          Text = leverageTiers,
          Style = style
          }, 23, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.BaseAsset),
          Style = style
          }, 24, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.BaseAsset.Name,
          Style = style
          }, 24, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.QuoteAsset),
          Style = style
          }, 25, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.QuoteAsset.Name,
          Style = style
          }, 25, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.PnLConversionFeeRate),
          Style = style
          }, 26, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.PnLConversionFeeRate.ToString(),
          Style = style
          }, 26, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.Commission),
          Style = style
          }, 27, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.Commission.ToString(),
          Style = style
          }, 27, 1);


          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.CommissionType),
          Style = style
          }, 28, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.CommissionType.ToString(),
          Style = style
          }, 28, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.MinCommission),
          Style = style
          }, 29, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.MinCommission.ToString(),
          Style = style
          }, 29, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.MinCommissionAsset),
          Style = style
          }, 30, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.MinCommissionAsset.Name,
          Style = style
          }, 30, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.MinCommissionType),
          Style = style
          }, 31, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.MinCommissionType.ToString(),
          Style = style
          }, 31, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.AdministrativeCharge3DaysRollover),
          Style = style
          }, 32, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.AdministrativeCharge3DaysRollover.ToString(),
          Style = style
          }, 32, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.AdministrativeCharge),
          Style = style
          }, 33, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.AdministrativeCharge.ToString(),
          Style = style
          }, 33, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.GracePeriod),
          Style = style
          }, 34, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.GracePeriod.ToString(),
          Style = style
          }, 34, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.SwapLong),
          Style = style
          }, 35, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.SwapLong.ToString(),
          Style = style
          }, 35, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.SwapShort),
          Style = style
          }, 36, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.SwapShort.ToString(),
          Style = style
          }, 36, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.Swap3DaysRollover),
          Style = style
          }, 37, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.Swap3DaysRollover.ToString(),
          Style = style
          }, 37, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.SwapCalculationType),
          Style = style
          }, 38, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.SwapCalculationType.ToString(),
          Style = style
          }, 38, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.IsTradingEnabled),
          Style = style
          }, 39, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.IsTradingEnabled.ToString(),
          Style = style
          }, 39, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.TradingMode),
          Style = style
          }, 40, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.TradingMode.ToString(),
          Style = style
          }, 40, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.MinDistanceType),
          Style = style
          }, 41, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.MinDistanceType.ToString(),
          Style = style
          }, 41, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.MinTakeProfitDistance),
          Style = style
          }, 42, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.MinTakeProfitDistance.ToString(),
          Style = style
          }, 42, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.MinStopLossDistance),
          Style = style
          }, 43, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.MinStopLossDistance.ToString(),
          Style = style
          }, 43, 1);


          Chart.AddControl(grid);

          _symbol.Tick += Symbol_Tick;

          Timer.Start(TimeSpan.FromSeconds(1));
          }

          private void Symbol_Tick(SymbolTickEventArgs obj)
          {
          _askTextBlock.Text = obj.Symbol.Ask.ToString();
          _bidTextBlock.Text = obj.Symbol.Bid.ToString();
          _spreadTextBlock.Text = obj.Symbol.Spread.ToString();
          _unrealizedGrossProfitTextBlock.Text = obj.Symbol.UnrealizedGrossProfit.ToString();
          _unrealizedNetProfitTextBlock.Text = obj.Symbol.UnrealizedNetProfit.ToString();
          }

          protected override void OnTimer()
          {
          _timeTillOpenTextBlock.Text = _symbol.MarketHours.TimeTillOpen().ToString();
          _timeTillCloseTextBlock.Text = _symbol.MarketHours.TimeTillClose().ToString();
          _isOpenedTextBlock.Text = _symbol.MarketHours.IsOpened().ToString();
          }

          public override void Calculate(int index)
          {
          }
          }
          }

        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataSymbols" />
      <signature>
        <code>public interface Symbol</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.Ask">
      <summary>
        Gets the current ask price for this symbol.
      </summary>
      <remarks>
        The seller's price for the symbol.
      </remarks>
      <example>
        <code>
          protected override void OnTick()
          {
          Print("Ask Price: {0}", Symbol.Ask);
          }
        </code>
      </example>
      <signature>
        <code>public double Ask { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.Bid">
      <summary>
        Gets the current bid price for this symbol.
      </summary>
      <remarks>
        The buyer's price for the symbol.
      </remarks>
      <example>
        <code>
          protected override void OnTick()
          {
          Print("Bid Price: {0}", Symbol.Bid);
          }
        </code>
      </example>
      <signature>
        <code>public double Bid { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.Spread">
      <summary>
        Gets the current spread of this symbol.
      </summary>
      <remarks>
        The difference between the Ask and the Bid price for the symbol.
        (see <see cref="P:cAlgo.API.Internals.Symbol.Ask" /> and <see cref="P:cAlgo.API.Internals.Symbol.Bid" />)
      </remarks>
      <example>
        <code>
          protected override void OnTick()
          {
          Print("The Spread of the symbol is: {0}", Symbol.Spread);
          }
        </code>
      </example>
      <signature>
        <code>public double Spread { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.PipSize">
      <summary>
        Gets the pip size for current symbol.
      </summary>
      <example>
        <code>
          protected override void OnTick()
          {
          Print("The current symbol has pip size of: {0}", Symbol.PipSize);
          }
        </code>
      </example>
      <signature>
        <code>public double PipSize { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.Digits">
      <summary>
        Gets the number of digits for the symbol.
      </summary>
      <example>
        <code>
          protected override void OnTick()
          {
          Print("The number of Digits the current symbol  has is: {0}", Symbol.Digits);
          }
        </code>
      </example>
      <signature>
        <code>public int Digits { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.TickSize">
      <summary>
        Gets the tick size for the current symbol.
      </summary>
      <remarks>
        If the symbol is a 5 digit symbol, the tick size is 0.00001.
      </remarks>
      <example>
        <code>
          protected override void OnTick()
          {
          Print("The current symbol has TickSize: {0}", Symbol.TickSize);
          }
        </code>
      </example>
      <signature>
        <code>public double TickSize { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.VolumeInUnitsMin">
      <summary>
        Gets the minimum tradable amount.
      </summary>
      <example>
        <code>
          if(volume &lt; Symbol.VolumeInUnitsMin)
          {
          Print("The minimum volume is {0}", Symbol.VolumeInUnitsMin);
          }
        </code>
      </example>
      <signature>
        <code>public double VolumeInUnitsMin { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.VolumeInUnitsMax">
      <summary>
        Gets the maximum tradable amount.
      </summary>
      <example>
        <code>
          if(Symbol.NormalizeVolumeInUnits(volume, RoundingMode.Down) &lt;= Symbol.VolumeInUnitsMax)
          {
          volume = Symbol.NormalizeVolumeInUnits(volume, RoundingMode.Down);
          ExecuteMarketOrder(TradeType.Buy, Symbol, volume);
          }
        </code>
      </example>
      <signature>
        <code>public double VolumeInUnitsMax { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.VolumeInUnitsStep">
      <summary>
        Gets the minimum trade amount increment.
      </summary>
      <example>
        <code>
          if(volume + Symbol.VolumeInUnitsStep &lt;= Symbol.VolumeInUnitsMax)
          {
          volume += Symbol.VolumeInUnitsStep;
          }
        </code>
      </example>
      <signature>
        <code>public double VolumeInUnitsStep { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.PipValue">
      <summary>
        Gets the monetary value of one pip.
        This is the monetary value of one pip of the symbol when you started your cBot or initialized your indicator.
        Its not updated in real time and it remains constant.
      </summary>
      <example>
        <code>
          var volume = ((Account.Balance*Risk)/StopLoss)/Symbol.PipValue;
        </code>
      </example>
      <signature>
        <code>public double PipValue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.TickValue">
      <summary>
        Gets the monetary value of one tick.
        This is the monetary value of one tick of the symbol when you started your cBot or initialized your indicator.
        Its not updated in real time and it remains constant.
      </summary>
      <example>
        <code>
          var volume = ((Account.Balance*Risk)/StopLoss)/Symbol.TickValue;
        </code>
      </example>
      <signature>
        <code>public double TickValue { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.LotSize">
      <summary>
        Gets the size of 1 lot in units of the base currency.
      </summary>
      <signature>
        <code>public long LotSize { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.UnrealizedNetProfit">
      <summary>
        Gets the sum of the unrealized Net profits of the positions of this Symbol.
      </summary>
      <signature>
        <code>public double UnrealizedNetProfit { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.UnrealizedGrossProfit">
      <summary>
        Gets the sum of the unrealized Gross profits of the positions of this Symbol
      </summary>
      <signature>
        <code>public double UnrealizedGrossProfit { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.BaseAsset">
      <summary>
        Gets the symbol base asset.
      </summary>
      <signature>
        <code>public Asset BaseAsset { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.QuoteAsset">
      <summary>
        Gets the symbol quote asset.
      </summary>
      <signature>
        <code>public Asset QuoteAsset { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.PnLConversionFeeRate">
      <summary>
        Gets the symbol profit and loss conversion fee rate.
      </summary>
      <signature>
        <code>public double PnLConversionFeeRate { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.Commission">
      <summary>
        Gets the amount of base commission for the symbol.
      </summary>
      <signature>
        <code>public double Commission { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.CommissionType">
      <summary>
        Gets the symbol base commission calculation type.
      </summary>
      <signature>
        <code>public SymbolCommissionType CommissionType { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.MinCommission">
      <summary>
        Gets the minimum amount of commission for the symbol.
        This is the amount of commission that will be paid by trader for any trade.
        Check MinCommissionType for interpretation of MinCommission value.
      </summary>
      <signature>
        <code>public double MinCommission { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.MinCommissionAsset">
      <summary>
        Gets the symbol minimum commission asset.
        If MinCommissionType is set to Asset then you can use this property to get that asset.
        The MinCommission value will be converted from MinCommissionAsset to account deposit asset at the moment of trade.
      </summary>
      <signature>
        <code>public Asset MinCommissionAsset { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.MinCommissionType">
      <summary>
        Gets the symbol minimum commission type.
        Use this property to interpret MinCommission value.
      </summary>
      <signature>
        <code>public SymbolMinCommissionType MinCommissionType { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.AdministrativeCharge3DaysRollover">
      <summary>
        Gets the Day of the week (in UTC) when Administrative Fee charge amount will be tripled.
        Only applicable for SWAP free trading accounts.
      </summary>
      <signature>
        <code>public DayOfWeek? AdministrativeCharge3DaysRollover { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.AdministrativeCharge">
      <summary>
        Gets symbol administrative charge.
        Administrative fee will be charged instead of SWAP if account is marked as SWAP free.
        Only applicable for SWAP free trading accounts.
      </summary>
      <signature>
        <code>public double AdministrativeCharge { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.GracePeriod">
      <summary>
        Gets symbol grace period.
        This is the number of days free of Administrative fee from the time of opening a position.
        Only applicable for SWAP free trading accounts.
      </summary>
      <signature>
        <code>public int GracePeriod { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.SwapLong">
      <summary>
        Gets the SWAP charge for long positions of the symbol.
      </summary>
      <signature>
        <code>public double SwapLong { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.SwapShort">
      <summary>
        Gets the SWAP charge for short positions of the symbol.
      </summary>
      <signature>
        <code>public double SwapShort { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.Swap3DaysRollover">
      <summary>
        Gets the Day of the week when Symbol SWAP charge amount will be tripled.
      </summary>
      <signature>
        <code>public DayOfWeek? Swap3DaysRollover { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.SwapCalculationType">
      <summary>
        Gets the symbol SWAP calculation type.
      </summary>
      <signature>
        <code>public SymbolSwapCalculationType SwapCalculationType { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.IsTradingEnabled">
      <summary>
        Gets If trading is enabled or not for the symbol.
      </summary>
      <signature>
        <code>public bool IsTradingEnabled { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.TradingMode">
      <summary>
        Gets symbol trading mode.
      </summary>
      <signature>
        <code>public SymbolTradingMode TradingMode { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.MinDistanceType">
      <summary>
        Gets the symbol minimum distances type.
      </summary>
      <signature>
        <code>public SymbolMinDistanceType MinDistanceType { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.MinTakeProfitDistance">
      <summary>
        Gets symbol minimum take profit distance.
        Use MinDistanceType for interpretation.
      </summary>
      <signature>
        <code>public double MinTakeProfitDistance { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.MinStopLossDistance">
      <summary>
        Gets symbol minimum stop loss distance.
        Use MinDistanceType for interpretation.
      </summary>
      <signature>
        <code>public double MinStopLossDistance { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.DynamicLeverage">
      <summary>
        Gets the dynamic leverage tiers for the symbol.
      </summary>
      <example>
        <code>
          var symbolLeverage = Symbol.DynamicLeverage[0].Leverage;
          var realLeverage = Math.Min(symbolLeverage, Account.Leverage);
        </code>
      </example>
      <signature>
        <code>public IReadonlyList&lt;LeverageTier&gt; DynamicLeverage { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.Symbol.MarketHours">
      <summary>
        Gets access to the symbol's trading sessions schedule.
      </summary>
      <signature>
        <code>public MarketHours MarketHours { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Symbol.NormalizeVolumeInUnits(System.Double,cAlgo.API.RoundingMode)">
      <summary>
        Round the volume to the amount suitable for a trade.
      </summary>
      <param name="volume">Amount to normalize</param>
      <param name="roundingMode">Rounding method</param>
      <returns>Normalized volume</returns>
      <example>
        <code>
          volume = Symbol.NormalizeVolumeInUnits(volume, RoundingMode.Down);
        </code>
      </example>
      <signature>
        <code>public double NormalizeVolumeInUnits(double volume, RoundingMode roundingMode)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Symbol.QuantityToVolumeInUnits(System.Double)">
      <summary>
        Convert Quantity (in lots) to Volume in units of base currency.
      </summary>
      <param name="quantity">Quantity (lots)</param>
      <returns>Volume in units of base currency</returns>
      <signature>
        <code>public double QuantityToVolumeInUnits(double quantity)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Symbol.VolumeInUnitsToQuantity(System.Double)">
      <summary>
        Convert Volume in units of base currency to Quantity (in lots).
      </summary>
      <param name="volume">The symbol volume units to convert to Quantity (in lots)</param>
      <returns>
      </returns>
      <signature>
        <code>public double VolumeInUnitsToQuantity(double volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Symbol.GetEstimatedMargin(cAlgo.API.TradeType,System.Double)">
      <summary>
        Returns the amount of margin you need for x amount of volume.
      </summary>
      <param name="tradeType">Order trade type</param>
      <param name="volume">Amount of volume</param>
      <returns>Amount of Margin</returns>
      <signature>
        <code>public double GetEstimatedMargin(TradeType tradeType, double volume)</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Internals.Symbol.Tick">
      <summary>
        Occurs on each incoming symbol ticks
      </summary>
      <seealso cref="T:cAlgo.API.SymbolTickEventArgs" />
      <signature>
        <code>public event Action&lt;SymbolTickEventArgs&gt; Tick;</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Symbol.VolumeForFixedRisk(System.Double,System.Double)">
      <summary>
        Calculates the volume to be risked (in X units of the account deposit currency) based on the specified stop loss. Note that the result of this calculation may be imprecise as the exact degree of risk always depends on market movement and is impossible to predict.
      </summary>
      <param name="amount">The amount you want to risk in your account deposit currency.</param>
      <param name="stopLossInPips">The stop loss in pips.</param>
      <returns>The calculated volume in units.</returns>
      <signature>
        <code>public double VolumeForFixedRisk(double amount, double stopLossInPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Symbol.VolumeForFixedRisk(System.Double,System.Double,cAlgo.API.RoundingMode)">
      <summary>
        Calculates the volume to be risked (in X units of the account deposit currency) based on the specified stop loss. Note that the result of this calculation may be imprecise as the exact degree of risk always depends on market movement and is impossible to predict.
      </summary>
      <param name="amount">The amount you want to risk in your account deposit currency.</param>
      <param name="stopLossInPips">The stop loss in pips.</param>
      <param name="roundingMode">The rounding method</param>
      <returns>The calculated volume in units.</returns>
      <signature>
        <code>public double VolumeForFixedRisk(double amount, double stopLossInPips, RoundingMode roundingMode)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Symbol.VolumeForProportionalRisk(cAlgo.API.ProportionalAmountType,System.Double,System.Double)">
      <summary>
        Calculates the volume to be risked (in X% of either the account equity or balance) based on the specified stop loss. Note that the result of this calculation may be imprecise as the exact degree of risk always depends on market movement and is impossible to predict.
      </summary>
      <param name="type">The type of the amount to be risked (either balance or equity).</param>
      <param name="percentage">The percentage of equity or balance to be risked.</param>
      <param name="stopLossInPips">The stop loss in pips.</param>
      <returns>The calculated volume in units.</returns>
      <signature>
        <code>public double VolumeForProportionalRisk(ProportionalAmountType type, double percentage, double stopLossInPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Symbol.VolumeForProportionalRisk(cAlgo.API.ProportionalAmountType,System.Double,System.Double,cAlgo.API.RoundingMode)">
      <summary>
        Calculates the volume to be risked (in X% of either the account equity or balance) based on the specified stop loss. Note that the result of this calculation may be imprecise as the exact degree of risk always depends on market movement and is impossible to predict.
      </summary>
      <param name="type">The type of the amount to be risked (either balance or equity).</param>
      <param name="percentage">The percentage of equity or balance to be risked.</param>
      <param name="stopLossInPips">The stop loss in pips.</param>
      <param name="roundingMode">The rounding method.</param>
      <returns>The calculated volume in units</returns>
      <signature>
        <code>public double VolumeForProportionalRisk(ProportionalAmountType type, double percentage, double stopLossInPips, RoundingMode roundingMode)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Symbol.AmountRisked(System.Double,System.Double)">
      <summary>
        Calculates the amount to be risked based on the specified stop loss and trading volume. Note that the result of this calculation may be imprecise as the exact degree of risk always depends on market movement and is impossible to predict.
      </summary>
      <param name="volume">The volume to be traded</param>
      <param name="stopLossInPips">The stop loss in pips.</param>
      <returns>The calculated volume in units.</returns>
      <signature>
        <code>public double AmountRisked(double volume, double stopLossInPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Symbol.PipsForFixedRisk(System.Double,System.Double)">
      <summary>
        Calculates the number of pips to be risked based on the specified stop loss and trading volume. Note that the result of this calculation may be imprecise as the exact degree of risk always depends on market movement and is impossible to predict.
      </summary>
      <param name="amount">The amount to be risked.</param>
      <param name="volume">The volume to be traded.</param>
      <returns>The calculated volume in units.</returns>
      <signature>
        <code>public double PipsForFixedRisk(double amount, double volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Internals.Symbol.PipsForProportionalRisk(cAlgo.API.ProportionalAmountType,System.Double,System.Double)">
      <summary>
        Calculates the stop loss (in pips) for the proportional amount to be risked based on the specified volume. Note that the result of this calculation may be imprecise as the exact degree of risk always depends on market movement and is impossible to predict.
      </summary>
      <param name="type">The type of the amount to be risked (either balance or equity).</param>
      <param name="percentage">The percentage of equity or balance to be risked.</param>
      <param name="volume">The volume to be traded.</param>
      <returns>The calculated stop loss in pips.</returns>
      <signature>
        <code>public double PipsForProportionalRisk(ProportionalAmountType type, double percentage, double volume)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Internals.TotalMarginCalculationType">
      <summary>
        Defines types of total margin requirements per Symbol.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Account" />
      <signature>
        <code>public enum TotalMarginCalculationType</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Internals.TotalMarginCalculationType.Sum">
      <summary>
        Total margin requirements per Symbol are equal to Sum of all margin requirements of all positions of that Symbol.
      </summary>
      <signature>
        <code>public static TotalMarginCalculationType Sum;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Internals.TotalMarginCalculationType.Max">
      <summary>
        Total margin requirements per Symbol are equal to Max margin requirements from all Long and all Short Positions of that Symbol.
      </summary>
      <signature>
        <code>public static TotalMarginCalculationType Max;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Internals.TotalMarginCalculationType.Net">
      <summary>
        Total margin requirements per Symbol are equal to the difference between margin requirements of all Long and all Short Positions of that Symbol.
      </summary>
      <signature>
        <code>public static TotalMarginCalculationType Net;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Internals.TradingSession">
      <summary>
        Trading session schedule
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Internals;
          using System;

          namespace cAlgo
          {
          // This sample indicator shows how to use a symbol TradingSession
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TradingSessionSample : Indicator
          {
          private TextBlock _isOpenedTextBlock;

          private TextBlock _timeTillCloseTextBlock;

          private TextBlock _timeTillOpenTextBlock;

          private Symbol _symbol;

          [Parameter("Use Current Symbol", DefaultValue = true)]
          public bool UseCurrentSymbol { get; set; }

          [Parameter("Other Symbol Name", DefaultValue = "GBPUSD")]
          public string OtherSymbolName { get; set; }

          protected override void Initialize()
          {
          var grid = new Grid(6, 2)
          {
          BackgroundColor = Color.Gold,
          Opacity = 0.6,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          };

          var style = new Style();

          style.Set(ControlProperty.Padding, 1);
          style.Set(ControlProperty.Margin, 2);
          style.Set(ControlProperty.BackgroundColor, Color.Black);
          style.Set(ControlProperty.FontSize, 8);

          _symbol = UseCurrentSymbol ? Symbol : Symbols.GetSymbol(OtherSymbolName);

          grid.AddChild(new TextBlock { Text = "Symbol Info", Style = style, HorizontalAlignment = HorizontalAlignment.Center }, 0, 0, 1, 2);

          grid.AddChild(new TextBlock { Text = "Time Till Open", Style = style }, 1, 0);

          _timeTillOpenTextBlock = new TextBlock { Text = _symbol.MarketHours.TimeTillOpen().ToString(), Style = style };

          grid.AddChild(_timeTillOpenTextBlock, 1, 1);

          grid.AddChild(new TextBlock { Text = "Time Till Close", Style = style }, 2, 0);

          _timeTillCloseTextBlock = new TextBlock { Text = _symbol.MarketHours.TimeTillClose().ToString(), Style = style };

          grid.AddChild(_timeTillCloseTextBlock, 2, 1);

          grid.AddChild(new TextBlock { Text = "Is Opened", Style = style }, 3, 0);

          _isOpenedTextBlock = new TextBlock { Text = _symbol.MarketHours.IsOpened().ToString(), Style = style };

          grid.AddChild(_isOpenedTextBlock, 3, 1);

          grid.AddChild(new TextBlock { Text = "Trading Sessions #", Style = style }, 4, 0);

          grid.AddChild(new TextBlock { Text = _symbol.MarketHours.Sessions.Count.ToString(), Style = style }, 4, 1);

          grid.AddChild(new TextBlock { Text = "Trading Session Week Days", Style = style }, 5, 0);

          var weekDays = string.Empty;

          for (var iSession = 0; iSession &lt; _symbol.MarketHours.Sessions.Count; iSession++)
          {
          var currentSessionWeekDays = string.Format("{0}({1})-{2}({3})", _symbol.MarketHours.Sessions[iSession].StartDay, _symbol.MarketHours.Sessions[iSession].StartTime, _symbol.MarketHours.Sessions[iSession].EndDay, _symbol.MarketHours.Sessions[iSession].EndTime);
          weekDays = iSession == 0 ? currentSessionWeekDays : string.Format("{0}, {1}", weekDays, currentSessionWeekDays);
          }

          grid.AddChild(new TextBlock { Text = weekDays, Style = style }, 5, 1);

          Chart.AddControl(grid);

          Timer.Start(TimeSpan.FromSeconds(1));
          }

          protected override void OnTimer()
          {
          _timeTillOpenTextBlock.Text = _symbol.MarketHours.TimeTillOpen().ToString();
          _timeTillCloseTextBlock.Text = _symbol.MarketHours.TimeTillClose().ToString();
          _isOpenedTextBlock.Text = _symbol.MarketHours.IsOpened().ToString();
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Internals.TradingSession" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataSymbols" />
      <signature>
        <code>public interface TradingSession</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.TradingSession.StartDay">
      <summary>
        Day of week when trading session starts
      </summary>
      <signature>
        <code>public DayOfWeek StartDay { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.TradingSession.EndDay">
      <summary>
        Day of week when trading session ends
      </summary>
      <signature>
        <code>public DayOfWeek EndDay { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.TradingSession.StartTime">
      <summary>
        Time when trading session starts
      </summary>
      <signature>
        <code>public TimeSpan StartTime { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Internals.TradingSession.EndTime">
      <summary>
        Time when trading session ends
      </summary>
      <signature>
        <code>public TimeSpan EndTime { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.LineStyle">
      <summary>
        An enumeration of different stroke styles used to render lines.
      </summary>
      <example>
        <code>
          //Examples of all different LineStyles
          [Output("Dots", LineStyle = LineStyle.Dots)]
          public IndicatorDataSeries outputDots { get; set; }

          [Output("DotsRare", LineStyle = LineStyle.DotsRare)]
          public IndicatorDataSeries outputDotsRare { get; set; }

          [Output("DotsVeryRare", LineStyle = LineStyle.DotsVeryRare)]
          public IndicatorDataSeries outputDotsVeryRare { get; set; }

          [Output("Lines", LineStyle = LineStyle.Lines)]
          public IndicatorDataSeries outputLines { get; set; }

          [Output("LinesDots", LineStyle = LineStyle.LinesDots)]
          public IndicatorDataSeries outputLinesDots { get; set; }

          [Output("Solid", LineStyle = LineStyle.Solid)]
          public IndicatorDataSeries outputSolid { get; set; }
        </code>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to use different line styles
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class LineStyleSample : Indicator
          {
          protected override void Initialize()
          {
          Chart.DrawVerticalLine("Dots", Chart.LastVisibleBarIndex, Color.Red, 3, LineStyle.Dots);
          Chart.DrawVerticalLine("DotsRare", Chart.LastVisibleBarIndex - 2, Color.Yellow, 3, LineStyle.DotsRare);
          Chart.DrawVerticalLine("DotsVeryRare", Chart.LastVisibleBarIndex - 4, Color.Green, 3, LineStyle.DotsVeryRare);
          Chart.DrawVerticalLine("Lines", Chart.LastVisibleBarIndex - 6, Color.Blue, 3, LineStyle.Lines);
          Chart.DrawVerticalLine("LinesDots", Chart.LastVisibleBarIndex - 8, Color.Magenta, 3, LineStyle.LinesDots);
          Chart.DrawVerticalLine("Solid", Chart.LastVisibleBarIndex - 10, Color.Brown, 3, LineStyle.Solid);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Chart" />
      <signature>
        <code>public enum LineStyle</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.LineStyle.Solid">
      <summary>
        A solid line: -----
      </summary>
      <example>
        <code>
          [Output("Solid", LineStyle = LineStyle.Solid)]
          public IndicatorDataSeries outputSolid { get; set; }
        </code>
      </example>
      <signature>
        <code>public static LineStyle Solid;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.LineStyle.Dots">
      <summary>
        A dotted line: .....
      </summary>
      <example>
        <code>
          [Output("Dots", LineStyle = LineStyle.Dots)]
          public IndicatorDataSeries outputDots { get; set; }
        </code>
      </example>
      <signature>
        <code>public static LineStyle Dots;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.LineStyle.DotsRare">
      <summary>
        A dotted line, large gap between dots: . . . .
      </summary>
      <example>
        <code>
          [Output("DotsRare", LineStyle = LineStyle.DotsRare)]
          public IndicatorDataSeries outputDotsRare { get; set; }
        </code>
      </example>
      <signature>
        <code>public static LineStyle DotsRare;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.LineStyle.DotsVeryRare">
      <summary>
        A dotted line, extra large gap between dots: .   .   .   .
      </summary>
      <example>
        <code>
          [Output("DotsVeryRare", LineStyle = LineStyle.DotsVeryRare)]
          public IndicatorDataSeries outputDotsVeryRare { get; set; }
        </code>
      </example>
      <signature>
        <code>public static LineStyle DotsVeryRare;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.LineStyle.LinesDots">
      <summary>
        A mixed line / dot style is used to render the line: - . - . - .
      </summary>
      <example>
        <code>
          [Output("LinesDots", LineStyle = LineStyle.LinesDots)]
          public IndicatorDataSeries outputLinesDots { get; set; }
        </code>
      </example>
      <signature>
        <code>public static LineStyle LinesDots;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.LineStyle.Lines">
      <summary>
        Lines with gaps are used to render the line: - - - -
      </summary>
      <example>
        <code>
          [Output("Lines", LineStyle = LineStyle.Lines)]
          public IndicatorDataSeries outputLines { get; set; }
        </code>
      </example>
      <signature>
        <code>public static LineStyle Lines;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.LocalStorage">
      <summary>
        Represents the local storage API.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.LocalStorage" />
      <signature>
        <code>public interface LocalStorage</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.LocalStorage.SetString(System.String,System.String)">
      <summary>
        Saves a string value to local storage. The storage scope is LocalStorageScope.Instance.
      </summary>
      <param name="key">
        The key of the element to add, max length for keys is 50 characters, and only alphanumeric and space
        characters are allowed, you can only use space in the middle of key not at the start or end
      </param>
      <param name="value">The value of the element to add</param>
      <signature>
        <code>public void SetString(string key, string value)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.LocalStorage.SetString(System.String,System.String,cAlgo.API.LocalStorageScope)">
      <summary>
        Saves a string value to local storage.
      </summary>
      <param name="key">
        The key of the element to add, max length for keys is 50 characters, and only alphanumeric and space
        characters are allowed, you can only use space in the middle of key not at the start or end
      </param>
      <param name="value">The value of the element to add</param>
      <param name="localStorageScope">The storage scope of the element</param>
      <signature>
        <code>public void SetString(string key, string value, LocalStorageScope localStorageScope)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.LocalStorage.SetObject(System.String,System.Object)">
      <summary>
        Saves an object to local storage. The storage scope is LocalStorageScope.Instance.
      </summary>
      <param name="key">
        The key of the element to add, max length for keys is 50 characters, and only alphanumeric and space
        characters are allowed, you can only use space in the middle of key not at the start or end
      </param>
      <param name="obj">The object of the element to add</param>
      <signature>
        <code>public void SetObject(string key, object obj)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.LocalStorage.SetObject(System.String,System.Object,cAlgo.API.LocalStorageScope)">
      <summary>
        Saves an object to local storage.
      </summary>
      <param name="key">
        The key of the element to add, max length for keys is 50 characters, and only alphanumeric and space
        characters are allowed, you can only use space in the middle of key not at the start or end
      </param>
      <param name="obj">The object of the element to add</param>
      <param name="localStorageScope">The storage scope of the element</param>
      <signature>
        <code>public void SetObject(string key, object obj, LocalStorageScope localStorageScope)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.LocalStorage.GetString(System.String)">
      <summary>
        Gets a string value from local storage.
        This method will search all available scopes (Instance -&gt; Type -&gt; Device) and stops on first found value.
      </summary>
      <param name="key">
        The key of the element to get, max length for keys is 50 characters, and only alphanumeric and space
        characters are allowed, you can only use space in the middle of key not at the start or end
      </param>
      <returns>The requested value or an empty string if the provided key is not found</returns>
      <signature>
        <code>public string GetString(string key)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.LocalStorage.GetString(System.String,cAlgo.API.LocalStorageScope)">
      <summary>
        Gets a string value from local storage.
      </summary>
      <param name="key">
        The key of the element to get, max length for keys is 50 characters, and only alphanumeric and space
        characters are allowed, you can only use space in the middle of key not at the start or end
      </param>
      <param name="localStorageScope">The storage scope of the element</param>
      <returns>The requested value or an empty string if the provided key is not found</returns>
      <signature>
        <code>public string GetString(string key, LocalStorageScope localStorageScope)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.LocalStorage.GetObject``1(System.String)">
      <summary>
        Gets an object from local storage.
        This method will search all available scopes (Instance -&gt; Type -&gt; Device) and stops on first found value.
      </summary>
      <param name="key">
        The key of the element to get, max length for keys is 50 characters, and only alphanumeric and space
        characters are allowed, you can only use space in the middle of key not at the start or end
      </param>
      <returns>
        The deserialized object or default value of type if the provided key is not found or the object cannot be
        deserialized
      </returns>
      <signature>
        <code>public T GetObject(string key)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.LocalStorage.GetObject``1(System.String,cAlgo.API.LocalStorageScope)">
      <summary>
        Gets an object from local storage.
      </summary>
      <param name="key">
        The key of the element to get, max length for keys is 50 characters, and only alphanumeric and space
        characters are allowed, you can only use space in the middle of key not at the start or end
      </param>
      <param name="localStorageScope">The storage scope of the element</param>
      <returns>
        The deserialized object or default value of type if the provided key is not found or the object cannot be
        deserialized
      </returns>
      <signature>
        <code>public T GetObject(string key, LocalStorageScope localStorageScope)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.LocalStorage.Remove(System.String)">
      <summary>
        Removes an element from local storage.
        This method will search all available scopes (Instance -&gt; Type -&gt; Device) and stops on first found value.
      </summary>
      <param name="key">
        The key of the element to remove, max length for keys is 50 characters, and only alphanumeric and space
        characters are allowed, you can only use space in the middle of key not at the start or end
      </param>
      <signature>
        <code>public void Remove(string key)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.LocalStorage.Remove(System.String,cAlgo.API.LocalStorageScope)">
      <summary>
        Removes an element from local storage.
      </summary>
      <param name="key">
        The key of the element to remove, max length for keys is 50 characters, and only alphanumeric and space
        characters are allowed, you can only use space in the middle of key not at the start or end
      </param>
      <param name="localStorageScope">The storage scope of the element</param>
      <signature>
        <code>public void Remove(string key, LocalStorageScope localStorageScope)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.LocalStorage.Flush(cAlgo.API.LocalStorageScope)">
      <summary>
        Saves all data to the disk. When using local storage, data is automatically saved every minute. Use this method if you want to save data without delays.
      </summary>
      <param name="localStorageScope">The storage scope to save to disk</param>
      <signature>
        <code>public void Flush(LocalStorageScope localStorageScope)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.LocalStorage.Reload(cAlgo.API.LocalStorageScope)">
      <summary>
        Reloads all values from the disk. When calling this method, unsaved pending changes may be lost. To avoid losing information, call the Flush() method first.
      </summary>
      <param name="localStorageScope">The storage scope to reload</param>
      <signature>
        <code>public void Reload(LocalStorageScope localStorageScope)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.LocalStorageScope">
      <summary>
        Defines the local storage scope.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.LocalStorage" />
      <signature>
        <code>public enum LocalStorageScope</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.LocalStorageScope.Instance">
      <summary>
        The value is stored and can be accessed only by a specific running instance of a cBot/Indicator.
      </summary>
      <signature>
        <code>public static LocalStorageScope Instance;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.LocalStorageScope.Type">
      <summary>
        The value is stored and can be accessed by all running instances of one or more cBot(s)/Indicator(s).
      </summary>
      <signature>
        <code>public static LocalStorageScope Type;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.LocalStorageScope.Device">
      <summary>
        The value is stored and can be accessed by all running instances of a cBots/Indicators on this device.
      </summary>
      <signature>
        <code>public static LocalStorageScope Device;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Bar">
      <summary>
        Represents the Bar object.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataBars" />
      <signature>
        <code>public sealed struct Bar : ValueType</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Bar.OpenTime">
      <summary>
        Gets the bar open time.
      </summary>
      <signature>
        <code>public DateTime OpenTime { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Bar.Open">
      <summary>
        Gets the open price.
      </summary>
      <signature>
        <code>public double Open { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Bar.High">
      <summary>
        Gets the High price.
      </summary>
      <signature>
        <code>public double High { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Bar.Low">
      <summary>
        Gets the Low price.
      </summary>
      <signature>
        <code>public double Low { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Bar.Close">
      <summary>
        Gets the Close price.
      </summary>
      <signature>
        <code>public double Close { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Bar.TickVolume">
      <summary>
        Gets the Tick volume.
      </summary>
      <signature>
        <code>public long TickVolume { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Bar.Equals(cAlgo.API.Bar)">
      <summary>
        Defines whether the specified object is equal to this instance.
      </summary>
      <param name="other">Other bar to compare current bar with it</param>
      <returns>
      </returns>
      <signature>
        <code>public bool Equals(Bar other)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Bar.Equals(System.Object)">
      <summary>
        Defines whether the specified object is equal to this instance.
      </summary>
      <param name="obj">Other object to compare current object with it</param>
      <returns>
      </returns>
      <signature>
        <code>public bool Equals(object obj)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Bar.GetHashCode">
      <summary>
        Returns the hash code for this instance.
      </summary>
      <returns>
      </returns>
      <signature>
        <code>public int GetHashCode()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Bar.ToString">
      <summary>
        Returns a String that represents this instance.
      </summary>
      <returns>Bar String Representation (ex: OpenTime: 1/21/2022 10:00:00 AM, Open: 1.13392, High: 1.13415, Low: 1.13321, Close: 1.13389, TickVolume: 3984)</returns>
      <signature>
        <code>public string ToString()</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Bars">
      <summary>
        Represents the Bars interface - the collection of Bar objects.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using System;

          namespace cAlgo
          {
          // A sample indicator that shows how to use Bars
          [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class BarsSample : Indicator
          {
          private TextBlock _barTicksNumberTextBlock, _barsStateTextBlock;

          [Output("Range", LineColor = "RoyalBlue")]
          public IndicatorDataSeries Range { get; set; }

          [Output("Body", LineColor = "Yellow")]
          public IndicatorDataSeries Body { get; set; }

          protected override void Initialize()
          {
          // Bars events
          Bars.BarOpened += Bars_BarOpened;

          Bars.Tick += Bars_Tick;

          Bars.HistoryLoaded += Bars_HistoryLoaded;

          Bars.Reloaded += Bars_Reloaded;

          var grid = new Grid(2, 2)
          {
          BackgroundColor = Color.DarkGoldenrod,
          HorizontalAlignment = HorizontalAlignment.Right,
          VerticalAlignment = VerticalAlignment.Top,
          Opacity = 0.5
          };

          grid.AddChild(new TextBlock
          {
          Text = "Bar Ticks #",
          Margin = 5
          }, 0, 0);

          _barTicksNumberTextBlock = new TextBlock
          {
          Text = "0",
          Margin = 5
          };

          grid.AddChild(_barTicksNumberTextBlock, 0, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Bars State",
          Margin = 5
          }, 1, 0);

          _barsStateTextBlock = new TextBlock
          {
          Margin = 5
          };

          grid.AddChild(_barsStateTextBlock, 1, 1);

          IndicatorArea.AddControl(grid);
          }

          private void Bars_Reloaded(BarsHistoryLoadedEventArgs obj)
          {
          _barsStateTextBlock.Text = "Reloaded";
          }

          private void Bars_HistoryLoaded(BarsHistoryLoadedEventArgs obj)
          {
          _barsStateTextBlock.Text = "History Loaded";
          }

          private void Bars_Tick(BarsTickEventArgs obj)
          {
          _barTicksNumberTextBlock.Text = Bars.TickVolumes.LastValue.ToString();
          }

          private void Bars_BarOpened(BarOpenedEventArgs obj)
          {
          _barsStateTextBlock.Text = "New Bar Opened";
          }

          public override void Calculate(int index)
          {
          Range[index] = Bars.HighPrices[index] - Bars.LowPrices[index];
          Body[index] = Math.Abs(Bars.ClosePrices[index] - Bars.OpenPrices[index]);
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataBars" />
      <signature>
        <code>public interface Bars</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Bars.Item(System.Int32)">
      <summary>
        Returns a bar based on it's index
      </summary>
      <param name="index">The bar index</param>
      <signature>
        <code>public Bar this[int index] { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Bars.LastBar">
      <summary>
        Gets the last bar in the chart.
      </summary>
      <signature>
        <code>public Bar LastBar { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Bars.Count">
      <summary>
        Gets the number of bars.
      </summary>
      <signature>
        <code>public int Count { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Bars.TimeFrame">
      <summary>
        Get the timeframe.
      </summary>
      <signature>
        <code>public TimeFrame TimeFrame { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Bars.SymbolName">
      <summary>
        Gets the symbol name.
      </summary>
      <signature>
        <code>public string SymbolName { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Bars.OpenPrices">
      <summary>
        Gets the Open price bars data.
      </summary>
      <signature>
        <code>public DataSeries OpenPrices { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Bars.HighPrices">
      <summary>
        Gets the High price bars data.
      </summary>
      <signature>
        <code>public DataSeries HighPrices { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Bars.LowPrices">
      <summary>
        Gets the Low price bars data.
      </summary>
      <signature>
        <code>public DataSeries LowPrices { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Bars.ClosePrices">
      <summary>
        Gets the Close price bars data.
      </summary>
      <signature>
        <code>public DataSeries ClosePrices { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Bars.TickVolumes">
      <summary>
        Gets the Tick volumes data.
      </summary>
      <signature>
        <code>public DataSeries TickVolumes { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Bars.MedianPrices">
      <summary>
        Gets the Median prices data (High + Low) / 2.
      </summary>
      <signature>
        <code>public DataSeries MedianPrices { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Bars.TypicalPrices">
      <summary>
        Gets the Typical prices data (High + Low + Close) / 2.
      </summary>
      <signature>
        <code>public DataSeries TypicalPrices { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Bars.WeightedPrices">
      <summary>
        Gets the Weighted prices data (High + Low + 2 * Close) / 4.
      </summary>
      <signature>
        <code>public DataSeries WeightedPrices { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Bars.OpenTimes">
      <summary>
        Gets the open bar time data.
      </summary>
      <signature>
        <code>public TimeSeries OpenTimes { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Bars.Last(System.Int32)">
      <summary>
        Gets the bar from the end of the collection.
      </summary>
      <param name="index">The last bar index from the end of Bars</param>
      <returns>
      </returns>
      <signature>
        <code>public Bar Last(int index)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Bars.LoadMoreHistory">
      <summary>
        Loads more historical bars. Method returns the number of loaded bars that were added to the beginning of the collection.
      </summary>
      <returns>
      </returns>
      <signature>
        <code>public int LoadMoreHistory()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Bars.LoadMoreHistoryAsync">
      <summary>
        Loads more historical bars asynchronously.
      </summary>
      <signature>
        <code>public void LoadMoreHistoryAsync()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Bars.LoadMoreHistoryAsync(System.Action{cAlgo.API.BarsHistoryLoadedEventArgs})">
      <summary>
        Loads more historical bars asynchronously.
      </summary>
      <param name="callback">The callback that will be called after history loaded</param>
      <signature>
        <code>public void LoadMoreHistoryAsync(Action&lt;BarsHistoryLoadedEventArgs&gt; callback)</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Bars.HistoryLoaded">
      <summary>
        Occurs when more history is loaded due to chart scroll on the left or due to API call.
      </summary>
      <signature>
        <code>public event Action&lt;BarsHistoryLoadedEventArgs&gt; HistoryLoaded;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Bars.Reloaded">
      <summary>
        Occurs when bars are refreshed due to reconnect.
      </summary>
      <signature>
        <code>public event Action&lt;BarsHistoryLoadedEventArgs&gt; Reloaded;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Bars.Tick">
      <summary>
        Occurs when a new Tick arrives.
      </summary>
      <signature>
        <code>public event Action&lt;BarsTickEventArgs&gt; Tick;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Bars.BarOpened">
      <summary>
        Occurs when the last bar is closed and a new bar is opened.
      </summary>
      <signature>
        <code>public event Action&lt;BarOpenedEventArgs&gt; BarOpened;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Bars.BarClosed">
      <summary>
        Occurs when a new bar is opened; the event is called for the previous (closed) bar.
      </summary>
      <signature>
        <code>public event Action&lt;BarClosedEventArgs&gt; BarClosed;</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Bars.GetPrices(cAlgo.API.PriceType)">
      <summary>
        Returns a data series from current Bars based on passed PriceType.
      </summary>
      <param name="priceType">Price Type</param>
      <returns>Price Type DataSeries</returns>
      <signature>
        <code>public DataSeries GetPrices(PriceType priceType)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.MarketDepth">
      <summary>
        Access to MarketDepth Ask Entries, Bid Entries and the event at which the market depth gets updated
      </summary>
      <example>
        <code>
          using System;
          using System.Text;
          using cAlgo.API;

          namespace cAlgo.Indicators
          {
          [Indicator]
          public class MarketDepthIndicator : Indicator
          {

          private MarketDepth _marketDepth;

          public override void Calculate(int index){}

          protected override void Initialize()
          {
          //  Get Market Depth
          _marketDepth = MarketData.GetMarketDepth(Symbol);
          // subscribe to event Updated
          _marketDepth.Updated += MarketDepthUpdated;
          }

          void MarketDepthUpdated()
          {
          // Draw Market Depth Entries in the indicator panel
          var se = new StringBuilder();
          se.Append("Bid");
          se.Append("                              ");
          se.Append("Ask");
          ChartObjects.DrawText("DOM", se.ToString(), StaticPosition.TopLeft, Colors.White);
          se.Clear();
          se.AppendLine();
          se.AppendLine();

          foreach (var entry in _marketDepth.BidEntries)
          {
          double dVolume  = Math.Round(entry.Volume / 1000000.0, 2);
          string volume = string.Format("{0}{1}", dVolume, "m");
          double entryPrice = entry.Price;
          string askText = string.Format("{0}    {1}", entryPrice.ToString("0.00000"), volume);
          se.AppendLine(askText);
          }

          ChartObjects.DrawText("Bid", se.ToString(), StaticPosition.TopLeft, Colors.Red);

          se.Clear();
          se.AppendLine();
          se.AppendLine();

          foreach (var entry in _marketDepth.AskEntries)
          {
          double dVolume = Math.Round(entry.Volume / 1000000.0, 2);
          string volume = string.Format("{0}{1}", dVolume, "m");
          double entryPrice = entry.Price;
          se.Append("                                    ");
          string bidText = string.Format("{0}     {1}", entryPrice.ToString("0.00000"), volume);
          se.AppendLine(bidText);
          }

          ChartObjects.DrawText("Ask", se.ToString(), StaticPosition.TopLeft, Colors.Turquoise);

          }
          }
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo.Indicators
          {
          [Indicator]
          public class Level2 : Indicator
          {
          [Output("BidEntries", Color = Colors.Red, PlotType = PlotType.Histogram, Thickness = 5)]
          public IndicatorDataSeries BidResult { get; set; }

          [Output("AskEntries", Color = Colors.Blue, PlotType = PlotType.Histogram, Thickness = 5)]
          public IndicatorDataSeries AskResult { get; set; }

          MarketDepth GBPUSD;

          private int _askNo;
          private int _bidNo;

          protected override void Initialize()
          {
          GBPUSD = MarketData.GetMarketDepth(Symbol);
          GBPUSD.Updated += OnGbpUsdUpdated;
          }

          void OnGbpUsdUpdated()
          {
          _askNo = 0;
          _bidNo = 0;

          var index = MarketSeries.Close.Count - 1;

          for (var i = 0; i &lt; GBPUSD.AskEntries.Count; i++)
          AskResult[index - i] = double.NaN;

          foreach (var entry in GBPUSD.AskEntries)
          {
          AskResult[index - _askNo] = (-1) * entry.Volume;
          _askNo++;
          }

          for (var i = 0; i &lt; GBPUSD.BidEntries.Count; i++)
          BidResult[index - i] = double.NaN;

          foreach (var entry in GBPUSD.BidEntries)
          {
          BidResult[index - _bidNo] = entry.Volume;
          _bidNo++;
          }
          }
          public override void Calculate(int index){}
          }
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Internals;

          namespace cAlgo
          {
          // This sample shows how to get a symbol market depth and use it
          [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class MarketDepthSample : Indicator
          {
          private int _askNo;
          private int _bidNo;

          private MarketDepth _marketDepth;

          [Output("Bid Entries", LineColor = "Red", PlotType = PlotType.Histogram, Thickness = 5)]
          public IndicatorDataSeries BidResult { get; set; }

          [Output("Ask Entries", LineColor = "Blue", PlotType = PlotType.Histogram, Thickness = 5)]
          public IndicatorDataSeries AskResult { get; set; }

          protected override void Initialize()
          {
          _marketDepth = MarketData.GetMarketDepth(SymbolName);
          _marketDepth.Updated += MarketDepth_Updated; ;
          }

          private void MarketDepth_Updated()
          {
          _askNo = 0;
          _bidNo = 0;

          var index = Bars.ClosePrices.Count - 1;

          for (var i = 0; i &lt; _marketDepth.AskEntries.Count; i++)
          AskResult[index - i] = double.NaN;

          foreach (var entry in _marketDepth.AskEntries)
          {
          AskResult[index - _askNo] = (-1) * entry.VolumeInUnits;
          _askNo++;
          }

          for (var i = 0; i &lt; _marketDepth.BidEntries.Count; i++)
          BidResult[index - i] = double.NaN;

          foreach (var entry in _marketDepth.BidEntries)
          {
          BidResult[index - _bidNo] = entry.VolumeInUnits;
          _bidNo++;
          }
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataMarketDepth" />
      <signature>
        <code>public interface MarketDepth</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.MarketDepth.Updated">
      <summary>
        The event at which the market depth gets updated
      </summary>
      <example>
        <code>
          MarketDepth _marketDepth;

          protected override void Initialize()
          {
          _marketDepth = MarketData.GetMarketDepth(Symbol);
          // subscribe to event Updated
          _marketDepth.Updated += MarketDepthUpdated;
          }

          // user defined function MarketDepthUpdated
          void MarketDepthUpdated()
          {
          // Do something
          }
        </code>
      </example>
      <signature>
        <code>public event Action Updated;</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.MarketDepth.AskEntries">
      <summary>
        The total number of Ask entries
      </summary>
      <example>
        <code>
          foreach (var entry in _marketDepth.AskEntries)
          {
          volume  = entry.Volume;
          entryPrice = entry.Price;
          }
        </code>
      </example>
      <signature>
        <code>public IReadonlyList&lt;MarketDepthEntry&gt; AskEntries { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.MarketDepth.BidEntries">
      <summary>
        The total number of Bid entries
      </summary>
      <example>
        <code>
          foreach (var entry in _marketDepth.BidEntries)
          {
          volume  = entry.Volume;
          entryPrice = entry.Price;
          }
        </code>
      </example>
      <signature>
        <code>public IReadonlyList&lt;MarketDepthEntry&gt; BidEntries { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.MarketDepthEntry">
      <summary>
        Provides access to market depth prices and volumes
      </summary>
      <example>
        <code>
          foreach (var marketDepthEntry in _marketDepth.AskEntries)
          {
          //The volume of this market depth entry
          volume = marketDepthEntry.Volume;
          //The price of this market depth entry
          price = marketDepthEntry.Price;
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataMarketDepth" />
      <signature>
        <code>public interface MarketDepthEntry</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.MarketDepthEntry.VolumeInUnits">
      <summary>
        The volume of this market depth entry
      </summary>
      <example>
        <code>
          foreach (var entry in _marketDepth.AskEntries)
          {
          volume  = entry.VolumeInUnits;
          }
        </code>
      </example>
      <signature>
        <code>public double VolumeInUnits { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.MarketDepthEntry.Price">
      <summary>
        The price of this market depth entry
      </summary>
      <example>
        <code>
          for(int i = 0; i &lt; _marketDepth.AskEntries.Count; i++)
          {
          price = _marketDepth.AskEntries[i].Price;
          }
        </code>
      </example>
      <signature>
        <code>public double Price { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.MarketSession">
      <summary>
        Represents the predefined market sessions.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo.Robots
          {
          [Robot(AccessRights = AccessRights.FullAccess)]
          public class MarketSessionsTest : Robot
          {
          [Parameter("Working Session", DefaultValue = MarketSession.London)]
          public MarketSession WorkingSession {get; set;}

          protected override void OnStart()
          {
          Print("Current Sessions: {0}", MarketSessions);
          }

          protected override void OnTick()
          {
          if (!MarketSessions.HasFlag(WorkingSession))
          return;

          // Do something on WorkingSession only
          Print("It's working session");
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketData" />
      <signature>
        <code>public enum MarketSession</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MarketSession.None">
      <summary>
        None
      </summary>
      <signature>
        <code>public static MarketSession None;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MarketSession.Wellington">
      <summary>
        Wellington
      </summary>
      <signature>
        <code>public static MarketSession Wellington;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MarketSession.Tokyo">
      <summary>
        Tokyo
      </summary>
      <signature>
        <code>public static MarketSession Tokyo;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MarketSession.Sydney">
      <summary>
        Sydney
      </summary>
      <signature>
        <code>public static MarketSession Sydney;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MarketSession.Singapore">
      <summary>
        Singapore
      </summary>
      <signature>
        <code>public static MarketSession Singapore;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MarketSession.Frankfurt">
      <summary>
        Frankfurt
      </summary>
      <signature>
        <code>public static MarketSession Frankfurt;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MarketSession.London">
      <summary>
        London
      </summary>
      <signature>
        <code>public static MarketSession London;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MarketSession.NewYork">
      <summary>
        NewYork
      </summary>
      <signature>
        <code>public static MarketSession NewYork;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.PriceType">
      <summary>
        An enumeration of the different price types.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public enum PriceType</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PriceType.Open">
      <summary>
        Bar Open price.
      </summary>
      <signature>
        <code>public static PriceType Open;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PriceType.High">
      <summary>
        Bar High price.
      </summary>
      <signature>
        <code>public static PriceType High;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PriceType.Low">
      <summary>
        Bar Low price.
      </summary>
      <signature>
        <code>public static PriceType Low;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PriceType.Close">
      <summary>
        Bar close price.
      </summary>
      <signature>
        <code>public static PriceType Close;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PriceType.TickVolume">
      <summary>
        Bar tick volume.
      </summary>
      <signature>
        <code>public static PriceType TickVolume;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PriceType.Median">
      <summary>
        Bar median price.
      </summary>
      <signature>
        <code>public static PriceType Median;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PriceType.Typical">
      <summary>
        Bar typical price.
      </summary>
      <signature>
        <code>public static PriceType Typical;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PriceType.Weighted">
      <summary>
        Bar weighted price.
      </summary>
      <signature>
        <code>public static PriceType Weighted;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Tick">
      <summary>
        Represents the Tick object.
      </summary>
      <seealso cref="T:cAlgo.API.Ticks" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataTicks" />
      <signature>
        <code>public sealed struct Tick : ValueType</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Tick.Time">
      <summary>
        Gets the Tick time.
      </summary>
      <signature>
        <code>public DateTime Time { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Tick.Bid">
      <summary>
        Gets the Bid price of tick.
      </summary>
      <signature>
        <code>public double Bid { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Tick.Ask">
      <summary>
        Gets the Ask price of tick.
      </summary>
      <signature>
        <code>public double Ask { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Tick.Equals(cAlgo.API.Tick)">
      <summary>
        Returns True if two Ticks are equal otherwise False
      </summary>
      <param name="other">The other tick to compare with current tick</param>
      <returns>
      </returns>
      <signature>
        <code>public bool Equals(Tick other)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Tick.Equals(System.Object)">
      <summary>
        Returns True if two Ticks are equal otherwise False
      </summary>
      <param name="obj">The other object to compare with current object</param>
      <returns>
      </returns>
      <signature>
        <code>public bool Equals(object obj)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Tick.GetHashCode">
      <summary>
        Returns the Tick object hash code
      </summary>
      <returns>
      </returns>
      <signature>
        <code>public int GetHashCode()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Tick.ToString">
      <summary>
        Returns string representation of a Tick
      </summary>
      <returns>Tick String Representation (ex: Time: 1/21/2022 10:00:00 AM, Bid: 1.13392, Ask: 1.13393)</returns>
      <signature>
        <code>public string ToString()</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Ticks">
      <summary>
        Represents the Ticks interface - the collection of Tick objects.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Internals;

          namespace cAlgo
          {
          // This sample indicator shows how to get a symbol ticks data and handle its tick events
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TickSample : Indicator
          {
          private Ticks _ticks;

          [Parameter("Symbol Name", DefaultValue = "EURUSD")]
          public string InputSymbolName { get; set; }

          protected override void Initialize()
          {
          // Getting a symbol ticks data
          _ticks = MarketData.GetTicks(InputSymbolName);
          // Subscribing to upcoming ticks
          _ticks.Tick += Ticks_Tick;

          _ticks.HistoryLoaded += Ticks_HistoryLoaded;
          // You can also pass a callback method instead of subscribing to HistoryLoaded event
          //_ticks.LoadMoreHistoryAsync(Ticks_HistoryLoaded);
          _ticks.LoadMoreHistoryAsync();

          _ticks.Reloaded += Ticks_Reloaded;
          }

          private void Ticks_Reloaded(TicksHistoryLoadedEventArgs obj)
          {
          Print("Ticks got reloaded");
          }

          private void Ticks_HistoryLoaded(TicksHistoryLoadedEventArgs obj)
          {
          Print("New ticks loaded: #", obj.Count);
          }

          private void Ticks_Tick(TicksTickEventArgs obj)
          {
          // Printing Last tick inside Ticks collection
          Print(obj.Ticks.LastTick);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataTicks" />
      <signature>
        <code>public interface Ticks</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Ticks.Item(System.Int32)">
      <summary>
        Gets the specific tick data.
      </summary>
      <signature>
        <code>public Tick this[int index] { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Ticks.LastTick">
      <summary>
        Gets the last tick in the chart.
      </summary>
      <signature>
        <code>public Tick LastTick { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Ticks.Count">
      <summary>
        Gets the number of objects.
      </summary>
      <signature>
        <code>public int Count { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Ticks.Last(System.Int32)">
      <summary>
        Gets the tick from the end of the list.
      </summary>
      <param name="index">Tick Index</param>
      <signature>
        <code>public Tick Last(int index)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Ticks.SymbolName">
      <summary>
        Gets the symbol name.
      </summary>
      <signature>
        <code>public string SymbolName { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Ticks.LoadMoreHistory">
      <summary>
        Loads more historical ticks. Method returns the number of loaded ticks that were added to the beginning of the collection.
      </summary>
      <returns>
      </returns>
      <signature>
        <code>public int LoadMoreHistory()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Ticks.LoadMoreHistoryAsync">
      <summary>
        Loads more historical ticks asynchronously.
      </summary>
      <signature>
        <code>public void LoadMoreHistoryAsync()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Ticks.LoadMoreHistoryAsync(System.Action{cAlgo.API.TicksHistoryLoadedEventArgs})">
      <summary>
        Loads more historical ticks asynchronously.
      </summary>
      <param name="callback">The callback that will be called after loading more history</param>
      <signature>
        <code>public void LoadMoreHistoryAsync(Action&lt;TicksHistoryLoadedEventArgs&gt; callback)</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Ticks.HistoryLoaded">
      <summary>
        Occurs when more history is loaded due to chart scroll to the left or due to API call.
      </summary>
      <signature>
        <code>public event Action&lt;TicksHistoryLoadedEventArgs&gt; HistoryLoaded;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Ticks.Reloaded">
      <summary>
        Occurs when ticks are refreshed due to reconnect.
      </summary>
      <signature>
        <code>public event Action&lt;TicksHistoryLoadedEventArgs&gt; Reloaded;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Ticks.Tick">
      <summary>
        Occurs when a new tick appears.
      </summary>
      <signature>
        <code>public event Action&lt;TicksTickEventArgs&gt; Tick;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TimeSeries">
      <summary>
        A series of values that represent time like MarketSeries.OpenTime
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Internals;

          namespace cAlgo
          {
          // This sample indicator shows how to use Bars OpenTimes Time Series
          [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TimeSeriesSample : Indicator
          {
          protected override void Initialize()
          {
          // Every Bars object has a time series which is the open times of bars
          var timeSeries = Bars.OpenTimes;

          Print("Count: ", timeSeries.Count);

          // You can get another bars index by using TimeSeries GetIndexByTime/GetIndexByExactTime methods

          var dailyBars = MarketData.GetBars(TimeFrame.Daily);

          var dailyBarsIndex = timeSeries.GetIndexByTime(dailyBars.OpenTimes.LastValue);

          var open = Bars.OpenPrices[dailyBarsIndex];

          Print("Daily Bars Index: ", dailyBarsIndex, " | Open: ", open);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.CollectionsDataSeries" />
      <signature>
        <code>public interface TimeSeries</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TimeSeries.Item(System.Int32)">
      <summary>
        Returns the DateTime value at the specified index.
      </summary>
      <param name="index">The index of the returned value within the series.</param>
      <signature>
        <code>public DateTime this[int index] { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TimeSeries.LastValue">
      <summary>
        Gets the last value of this time series.
      </summary>
      <example>
        <code>
          DateTime openTime = MarketSeries.OpenTime.LastValue;
        </code>
      </example>
      <signature>
        <code>public DateTime LastValue { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.TimeSeries.Last(System.Int32)">
      <summary>
        Access a value in the data series certain number of bars ago.
      </summary>
      <param name="index">Number of bars ago</param>
      <example>
        <code>
          DateTime openTime = MarketSeries.OpenTime.Last[5];
        </code>
      </example>
      <signature>
        <code>public DateTime Last(int index)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TimeSeries.Count">
      <summary>
        Gets the number of elements contained in the series.
      </summary>
      <signature>
        <code>public int Count { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.TimeSeries.GetIndexByExactTime(System.DateTime)">
      <summary>
        Find the index in the different time frame series.
      </summary>
      <param name="dateTime">The open time of the bar at this index</param>
      <returns>
      </returns>
      <example>
        <code>
          var indexSeries2 = indexSeries2.OpenTime.GetIndexByExactTime(MarketSeries.OpenTime.LastValue);
        </code>
      </example>
      <signature>
        <code>public int GetIndexByExactTime(DateTime dateTime)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.TimeSeries.GetIndexByTime(System.DateTime)">
      <summary>
        Find the index in the different time frame series.
      </summary>
      <param name="dateTime">The open time of the bar at this index</param>
      <returns>
      </returns>
      <example>
        <code>
          var indexSeries2 = indexSeries2.OpenTime.GetIndexByTime(MarketSeries.OpenTime.LastValue);
        </code>
      </example>
      <signature>
        <code>public int GetIndexByTime(DateTime dateTime)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.MovingAverageType">
      <summary>
        An enumeration of the different MovingAverage weighting (smoothing) methods.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo
          {
          // A sample indicator that shows how to use different types of moving average
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class MovingAverageTypeSample : Indicator
          {
          private MovingAverage _ma;

          [Parameter("Type", DefaultValue = MovingAverageType.Simple)]
          public MovingAverageType MovingAverageType { get; set; }

          [Output("Main")]
          public IndicatorDataSeries Result { get; set; }

          protected override void Initialize()
          {
          _ma = Indicators.MovingAverage(Bars.ClosePrices, 14, MovingAverageType);
          }

          public override void Calculate(int index)
          {
          Result[index] = _ma.Result[index];
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public enum MovingAverageType</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MovingAverageType.Simple">
      <summary>
        Use uniform weighting. Represents indicator of <see cref="T:cAlgo.API.Indicators.SimpleMovingAverage" /> type.
      </summary>
      <example>
        <code>
          [Parameter("MAType", DefaultValue = MovingAverageType.Simple)]
          public MovingAverageType MaType { get; set; }
        </code>
      </example>
      <signature>
        <code>public static MovingAverageType Simple;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MovingAverageType.Exponential">
      <summary>
        Use exponential weighting. Represents indicator of <see cref="T:cAlgo.API.Indicators.ExponentialMovingAverage" /> type.
      </summary>
      <example>
        <code>
          [Parameter("MAType", DefaultValue = MovingAverageType.Exponential)]
          public MovingAverageType MaType { get; set; }
        </code>
      </example>
      <signature>
        <code>public static MovingAverageType Exponential;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MovingAverageType.TimeSeries">
      <summary>
        Represents indicator of <see cref="T:cAlgo.API.Indicators.TimeSeriesMovingAverage" /> type.
      </summary>
      <example>
        <code>
          [Parameter("MAType", DefaultValue = MovingAverageType.TimeSeries)]
          public MovingAverageType MaType { get; set; }
        </code>
      </example>
      <signature>
        <code>public static MovingAverageType TimeSeries;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MovingAverageType.Triangular">
      <summary>
        Represents indicator of <see cref="T:cAlgo.API.Indicators.TriangularMovingAverage" /> type.
      </summary>
      <example>
        <code>
          [Parameter("MAType", DefaultValue = MovingAverageType.Triangular)]
          public MovingAverageType MaType { get; set; }
        </code>
      </example>
      <signature>
        <code>public static MovingAverageType Triangular;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MovingAverageType.VIDYA">
      <summary>
        VIDYA (Volatility Index Dynamic Average) variable length weighting. Represents indicator of <see cref="T:cAlgo.API.Indicators.Vidya" /> type.
      </summary>
      <example>
        <code>
          [Parameter("MAType", DefaultValue = MovingAverageType.VIDYA)]
          public MovingAverageType MaType { get; set; }
        </code>
      </example>
      <signature>
        <code>public static MovingAverageType VIDYA;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MovingAverageType.Weighted">
      <summary>
        Represents indicator of <see cref="T:cAlgo.API.Indicators.WeightedMovingAverage" /> type.
      </summary>
      <example>
        <code>
          [Parameter("MAType", DefaultValue = MovingAverageType.Weighted)]
          public MovingAverageType MaType { get; set; }
        </code>
      </example>
      <signature>
        <code>public static MovingAverageType Weighted;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MovingAverageType.WilderSmoothing">
      <summary>
        Represents indicator of <see cref="T:cAlgo.API.Indicators.WellesWilderSmoothing" /> type.
      </summary>
      <example>
        <code>
          [Parameter("MAType", DefaultValue = MovingAverageType.WilderSmoothing)]
          public MovingAverageType MaType { get; set; }
        </code>
      </example>
      <example>
        <code>
          private MovingAverageType _wilderSmoothing = MovingAverageType.WilderSmoothing;
        </code>
      </example>
      <signature>
        <code>public static MovingAverageType WilderSmoothing;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MovingAverageType.Hull">
      <summary>
        Represents indicator of <see cref="T:cAlgo.API.Indicators.HullMovingAverage" /> type.
      </summary>
      <example>
        <code>
          [Parameter("MAType", DefaultValue = MovingAverageType.Hull)]
          public MovingAverageType MaType { get; set; }
        </code>
      </example>
      <example>
        <code>
          private MovingAverageType _hull = MovingAverageType.Hull;
        </code>
      </example>
      <signature>
        <code>public static MovingAverageType Hull;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.SoundType">
      <summary>
        An enum containing various constants representing different built-in sounds for notifications.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Notifications" />
      <seealso cref="T:cAlgo.API.Internals.INotifications" />
      <signature>
        <code>public enum SoundType</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.SoundType.PositiveNotification">
      <summary>
        Positive Notification sound.
      </summary>
      <signature>
        <code>public static SoundType PositiveNotification;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.SoundType.NegativeNotification">
      <summary>
        Negative Notification sound.
      </summary>
      <signature>
        <code>public static SoundType NegativeNotification;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.SoundType.Announcement">
      <summary>
        Announcement sound.
      </summary>
      <signature>
        <code>public static SoundType Announcement;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.SoundType.Doorbell">
      <summary>
        Door bell sound.
      </summary>
      <signature>
        <code>public static SoundType Doorbell;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.SoundType.Confirmation">
      <summary>
        Confirmation sound.
      </summary>
      <signature>
        <code>public static SoundType Confirmation;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.PendingOrder">
      <summary>
        Provides access to properties of pending orders
      </summary>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,Symbol.Bid);
          var order = LastResult.PendingOrder;
          Print("The pending order's ID: {0}", order.Id);
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using System;
          using System.Globalization;

          namespace cAlgo.Robots
          {
          // This sample bot shows how to place different types of pending orders
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PendingOrderPlacingSample : Robot
          {
          [Parameter("Type", DefaultValue = PendingOrderType.Limit)]
          public PendingOrderType OrderType { get; set; }

          [Parameter("Direction", DefaultValue = TradeType.Buy)]
          public TradeType OrderTradeType { get; set; }

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Distance (Pips)", DefaultValue = 20, MinValue = 1)]
          public double DistanceInPips { get; set; }

          [Parameter("Stop (Pips)", DefaultValue = 10, MinValue = 0)]
          public double StopInPips { get; set; }

          [Parameter("Target (Pips)", DefaultValue = 10, MinValue = 0)]
          public double TargetInPips { get; set; }

          [Parameter("Limit Range (Pips)", DefaultValue = 10, MinValue = 1)]
          public double LimitRangeInPips { get; set; }

          [Parameter("Expiry", DefaultValue = "00:00:00")]
          public string Expiry { get; set; }

          [Parameter("Label")]
          public string Label { get; set; }

          [Parameter("Comment")]
          public string Comment { get; set; }

          [Parameter("Trailing Stop", DefaultValue = false)]
          public bool HasTrailingStop { get; set; }

          [Parameter("Stop Loss Method", DefaultValue = StopTriggerMethod.Trade)]
          public StopTriggerMethod StopLossTriggerMethod { get; set; }

          [Parameter("Stop Order Method", DefaultValue = StopTriggerMethod.Trade)]
          public StopTriggerMethod StopOrderTriggerMethod { get; set; }

          [Parameter("Async", DefaultValue = false)]
          public bool IsAsync { get; set; }

          protected override void OnStart()
          {
          var volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          DistanceInPips *= Symbol.PipSize;

          var stopLoss = StopInPips == 0 ? null : (double?)StopInPips;
          var takeProfit = TargetInPips == 0 ? null : (double?)TargetInPips;

          TimeSpan expiry;

          if (!TimeSpan.TryParse(Expiry, CultureInfo.InvariantCulture, out expiry))
          {
          Print("Invalid expiry");

          Stop();
          }

          var expiryTime = expiry != TimeSpan.FromSeconds(0) ? (DateTime?)Server.Time.Add(expiry) : null;

          TradeResult result = null;

          switch (OrderType)
          {
          case PendingOrderType.Limit:
          var limitPrice = OrderTradeType == TradeType.Buy ? Symbol.Ask - DistanceInPips : Symbol.Ask + DistanceInPips;

          if (IsAsync)
          PlaceLimitOrderAsync(OrderTradeType, SymbolName, volumeInUnits, limitPrice, Label, stopLoss, takeProfit, expiryTime, Comment, HasTrailingStop, StopLossTriggerMethod, OnCompleted);
          else
          result = PlaceLimitOrder(OrderTradeType, SymbolName, volumeInUnits, limitPrice, Label, stopLoss, takeProfit, expiryTime, Comment, HasTrailingStop, StopLossTriggerMethod);

          break;

          case PendingOrderType.Stop:
          var stopPrice = OrderTradeType == TradeType.Buy ? Symbol.Ask + DistanceInPips : Symbol.Ask - DistanceInPips;

          if (IsAsync)
          PlaceStopOrderAsync(OrderTradeType, SymbolName, volumeInUnits, stopPrice, Label, stopLoss, takeProfit, expiryTime, Comment, HasTrailingStop, StopLossTriggerMethod, StopOrderTriggerMethod, OnCompleted);
          else
          result = PlaceStopOrder(OrderTradeType, SymbolName, volumeInUnits, stopPrice, Label, stopLoss, takeProfit, expiryTime, Comment, HasTrailingStop, StopLossTriggerMethod, StopOrderTriggerMethod);

          break;

          case PendingOrderType.StopLimit:
          var stopLimitPrice = OrderTradeType == TradeType.Buy ? Symbol.Ask + DistanceInPips : Symbol.Ask - DistanceInPips;

          if (IsAsync)
          PlaceStopLimitOrderAsync(OrderTradeType, SymbolName, volumeInUnits, stopLimitPrice, LimitRangeInPips, Label, stopLoss, takeProfit, expiryTime, Comment, HasTrailingStop, StopLossTriggerMethod, StopOrderTriggerMethod, OnCompleted);
          else
          result = PlaceStopLimitOrder(OrderTradeType, SymbolName, volumeInUnits, stopLimitPrice, LimitRangeInPips, Label, stopLoss, takeProfit, expiryTime, Comment, HasTrailingStop, StopLossTriggerMethod, StopOrderTriggerMethod);

          break;

          default:
          Print("Invalid order type");

          throw new ArgumentOutOfRangeException("OrderType");
          }

          if (!IsAsync) OnCompleted(result);
          }

          private void OnCompleted(TradeResult result)
          {
          if (!result.IsSuccessful) Print("Error: ", result.Error);

          Stop();
          }
          }
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using System;
          using System.Globalization;
          using System.Linq;

          namespace cAlgo.Robots
          {
          // This sample shows how to modify a pending order
          // It uses order comment to find the order, you can use order label instead if you want to
          // Set stop loss and take profit to 0 if you don't want to change it
          // Leave expiry parameter empty if you don't want to change it or 0 if you want to remove it
          // If you don't want to change the target price set it to 0
          // If you don't want to change the volume set it to 0
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PendingOrderModificationSample : Robot
          {
          [Parameter("Order Comment")]
          public string OrderComment { get; set; }

          [Parameter("Order Label")]
          public string OrderLabel { get; set; }

          [Parameter("Target Price", DefaultValue = 0.0)]
          public double TargetPrice { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Stop Loss Trigger Method", DefaultValue = StopTriggerMethod.Trade)]
          public StopTriggerMethod StopLossTriggerMethod { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Expiry (HH:mm:ss)")]
          public string Expiry { get; set; }

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Has Trailing Stop", DefaultValue = false)]
          public bool HasTrailingStop { get; set; }

          [Parameter("Order Trigger Method", DefaultValue = StopTriggerMethod.Trade)]
          public StopTriggerMethod OrderTriggerMethod { get; set; }

          [Parameter("Limit Range (Pips)", DefaultValue = 10)]
          public double LimitRangeInPips { get; set; }

          protected override void OnStart()
          {
          PendingOrder order = null;

          if (!string.IsNullOrWhiteSpace(OrderComment) &amp;&amp; !string.IsNullOrWhiteSpace(OrderComment))
          {
          order = PendingOrders.FirstOrDefault(iOrder =&gt; string.Equals(iOrder.Comment, OrderComment, StringComparison.OrdinalIgnoreCase) &amp;&amp; string.Equals(iOrder.Label, OrderLabel, StringComparison.OrdinalIgnoreCase));
          }
          else if (!string.IsNullOrWhiteSpace(OrderComment))
          {
          order = PendingOrders.FirstOrDefault(iOrder =&gt; string.Equals(iOrder.Comment, OrderComment, StringComparison.OrdinalIgnoreCase));
          }
          else if (!string.IsNullOrWhiteSpace(OrderLabel))
          {
          order = PendingOrders.FirstOrDefault(iOrder =&gt; string.Equals(iOrder.Label, OrderLabel, StringComparison.OrdinalIgnoreCase));
          }

          if (order == null)
          {
          Print("Couldn't find the order, please check the comment and label");

          Stop();
          }

          var targetPrice = TargetPrice == 0 ? order.TargetPrice : TargetPrice;

          var orderSymbol = Symbols.GetSymbol(order.SymbolName);

          var stopLossInPips = StopLossInPips == 0 ? order.StopLossPips : (double?)StopLossInPips;
          var takeProfitInPips = TakeProfitInPips == 0 ? order.TakeProfitPips : (double?)TakeProfitInPips;

          DateTime? expiryTime;

          if (string.IsNullOrWhiteSpace(Expiry))
          {
          expiryTime = order.ExpirationTime;
          }
          else if (Expiry.Equals("0", StringComparison.OrdinalIgnoreCase))
          {
          expiryTime = null;
          }
          else
          {
          var expiryTimeSpan = default(TimeSpan);

          if (!TimeSpan.TryParse(Expiry, CultureInfo.InvariantCulture, out expiryTimeSpan))
          {
          Print("Your provided value for expiry is not valid, please use HH:mm:ss format");

          Stop();
          }

          expiryTime = expiryTimeSpan == default(TimeSpan) ? null : (DateTime?)Server.Time.Add(expiryTimeSpan);
          }

          var volumeInUnits = VolumeInLots == 0 ? order.VolumeInUnits : orderSymbol.QuantityToVolumeInUnits(VolumeInLots);

          if (order.OrderType == PendingOrderType.Limit)
          {
          ModifyPendingOrder(order, targetPrice, stopLossInPips, takeProfitInPips, expiryTime, volumeInUnits, HasTrailingStop, StopLossTriggerMethod);
          }
          else if (order.OrderType == PendingOrderType.Stop)
          {
          ModifyPendingOrder(order, targetPrice, stopLossInPips, takeProfitInPips, expiryTime, volumeInUnits, HasTrailingStop, StopLossTriggerMethod, OrderTriggerMethod);
          }
          else if (order.OrderType == PendingOrderType.StopLimit)
          {
          ModifyPendingOrder(order, targetPrice, stopLossInPips, takeProfitInPips, expiryTime, volumeInUnits, HasTrailingStop, StopLossTriggerMethod, OrderTriggerMethod, LimitRangeInPips);
          }
          }
          }
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using System;
          using System.Linq;

          namespace cAlgo.Robots
          {
          // This sample shows how to cancel a pending order
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PendingOrderCancelationSample : Robot
          {
          [Parameter("Order Comment")]
          public string OrderComment { get; set; }

          [Parameter("Order Label")]
          public string OrderLabel { get; set; }

          protected override void OnStart()
          {
          PendingOrder order = null;

          if (!string.IsNullOrWhiteSpace(OrderComment) &amp;&amp; !string.IsNullOrWhiteSpace(OrderLabel))
          {
          order = PendingOrders.FirstOrDefault(iOrder =&gt; string.Equals(iOrder.Comment, OrderComment, StringComparison.OrdinalIgnoreCase) &amp;&amp; string.Equals(iOrder.Label, OrderLabel, StringComparison.OrdinalIgnoreCase));
          }
          else if (!string.IsNullOrWhiteSpace(OrderComment))
          {
          order = PendingOrders.FirstOrDefault(iOrder =&gt; string.Equals(iOrder.Comment, OrderComment, StringComparison.OrdinalIgnoreCase));
          }
          else if (!string.IsNullOrWhiteSpace(OrderLabel))
          {
          order = PendingOrders.FirstOrDefault(iOrder =&gt; string.Equals(iOrder.Label, OrderLabel, StringComparison.OrdinalIgnoreCase));
          }

          if (order == null)
          {
          Print("Couldn't find the order, please check the comment and label");

          Stop();
          }

          CancelPendingOrder(order);
          }
          }
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo.Robots
          {
          // This sample shows how to use PendingOrders events
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PendingOrderEvents : Robot
          {
          protected override void OnStart()
          {
          PendingOrders.Cancelled += PendingOrders_Cancelled;
          PendingOrders.Modified += PendingOrders_Modified;
          PendingOrders.Filled += PendingOrders_Filled;
          }

          private void PendingOrders_Filled(PendingOrderFilledEventArgs obj)
          {
          var pendingOrderThatFilled = obj.PendingOrder;

          var filledPosition = obj.Position;
          }

          private void PendingOrders_Modified(PendingOrderModifiedEventArgs obj)
          {
          var modifiedOrder = obj.PendingOrder;
          }

          private void PendingOrders_Cancelled(PendingOrderCancelledEventArgs obj)
          {
          var cancelledOrder = obj.PendingOrder;

          var cancellationReason = obj.Reason;
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.TradingOrders" />
      <signature>
        <code>public interface PendingOrder</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.TradeType">
      <summary>
        Specifies whether this order is to buy or sell.
      </summary>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000, targetPrice);
          Print(LastResult.PendingOrder.TradeType);
        </code>
      </example>
      <signature>
        <code>public TradeType TradeType { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.VolumeInUnits">
      <summary>
        Volume of this order.
      </summary>
      <example>
        <code>
          var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, targetPrice);
          var order = result.PendingOrder;
          Print("The order's volume is: {0}", order.VolumeInUnits);
        </code>
      </example>
      <signature>
        <code>public double VolumeInUnits { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.Id">
      <summary>
        Unique order Id.
      </summary>
      <example>
        <code>
          var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, targetPrice);
          var order = result.PendingOrder;
          Print("The pending order's ID: {0}", order.Id);
        </code>
      </example>
      <signature>
        <code>public int Id { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.OrderType">
      <summary>
        Specifies whether this order is Stop or Limit.
      </summary>
      <example>
        <code>
          var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, targetPrice);
          var order = result.PendingOrder;
          Print("Order type = {0}", order.OrderType);
        </code>
      </example>
      <signature>
        <code>public PendingOrderType OrderType { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.TargetPrice">
      <summary>
        The order target price.
      </summary>
      <example>
        <code>
          var targetPrice = Symbol.Bid;
          var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, targetPrice);
        </code>
      </example>
      <signature>
        <code>public double TargetPrice { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.ExpirationTime">
      <summary>
        The order Expiration time
        The Timezone used is set in the Robot attribute
      </summary>
      <example>
        <code>
          DateTime expiration = Server.Time.AddMinutes(120);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          Symbol.Bid, null, 10, 10, expiration);
        </code>
      </example>
      <signature>
        <code>public DateTime? ExpirationTime { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.StopLoss">
      <summary>
        The order stop loss in price
      </summary>
      <example>
        <code>
          var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          Symbol.Bid, null, 10, 10);

          var order = result.PendingOrder;
          Print("Order SL price = {0}", order.StopLoss);
        </code>
      </example>
      <signature>
        <code>public double? StopLoss { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.StopLossPips">
      <summary>
        The order stop loss in pips
      </summary>
      <example>
        <code>
          var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          Symbol.Bid, null, 10, 10);

          var order = result.PendingOrder;
          Print("Order SL pips = {0}", order.StopLossPips);
        </code>
      </example>
      <signature>
        <code>public double? StopLossPips { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.TakeProfit">
      <summary>
        The order take profit in price
      </summary>
      <example>
        <code>
          var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          Symbol.Bid, null, 10, 10);

          var order = result.PendingOrder;
          Print("Order TP price = {0}", order.TakeProfit);
        </code>
      </example>
      <signature>
        <code>public double? TakeProfit { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.TakeProfitPips">
      <summary>
        The order take profit in pips
      </summary>
      <example>
        <code>
          var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          Symbol.Bid, null, 10, 10);

          var order = result.PendingOrder;
          Print("TP Pips = {0}", order.TakeProfitPips);
        </code>
      </example>
      <signature>
        <code>public double? TakeProfitPips { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.Label">
      <summary>
        User assigned identifier for the order.
      </summary>
      <example>
        <code>
          var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          Symbol.Bid, "myLabel", 10, 10);

          if(result.IsSuccessful)
          {
          var order = result.PendingOrder;
          Print("Label = {0}", order.Label);
          }
        </code>
      </example>
      <signature>
        <code>public string Label { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.Comment">
      <summary>
        User assigned Order Comment
      </summary>
      <example>
        <code>
          var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          Symbol.Bid, null, 10, 10, null, "this is a comment");
          var order = result.PendingOrder;
          Print("comment = {0}", order.Comment);
        </code>
      </example>
      <signature>
        <code>public string Comment { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.Quantity">
      <summary>
        Quantity (lots) of this order
      </summary>
      <signature>
        <code>public double Quantity { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.HasTrailingStop">
      <summary>
        When HasTrailingStop set to true,
        server updates Stop Loss every time position moves in your favor.
      </summary>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10, 2, "comment", true);
          Print("Position was opened, has Trailing Stop = {0}", result.Position.HasTrailingStop);
        </code>
      </example>
      <signature>
        <code>public bool HasTrailingStop { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.StopLossTriggerMethod">
      <summary>
        Trigger method for position's StopLoss
      </summary>
      <signature>
        <code>public StopTriggerMethod? StopLossTriggerMethod { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.StopOrderTriggerMethod">
      <summary>
        Determines how pending order will be triggered in case it's a StopOrder
      </summary>
      <signature>
        <code>public StopTriggerMethod? StopOrderTriggerMethod { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.StopLimitRangePips">
      <summary>
        Maximum limit from order target price, where order can be executed.
      </summary>
      <example>
        <code>
          var targetPrice = Symbol.Ask;
          var result = PlaceStopLimitOrder(TradeType.Buy, Symbol, 10000, targetPrice, 2.0);
        </code>
      </example>
      <signature>
        <code>public double? StopLimitRangePips { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.SymbolName">
      <summary>
        Gets the symbol name.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public string SymbolName { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.Symbol">
      <summary>
        Gets the order symbol.
      </summary>
      <signature>
        <code>public Symbol Symbol { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.CurrentPrice">
      <summary>
        Gets the current price of the symbol for which the pending order is placed.
      </summary>
      <signature>
        <code>public double CurrentPrice { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrder.DistancePips">
      <summary>
        Gets the distance in pips between the current price of the symbol and the target price of the pending order (via <c>TargetPrice</c>).
      </summary>
      <signature>
        <code>public double DistancePips { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.PendingOrder.ModifyStopLossPips(System.Nullable{System.Double})">
      <summary>
        Shortcut for Robot.ModifyPendingOrder method to change Stop Loss
      </summary>
      <param name="stopLossPips">New Stop Loss value in Pips</param>
      <signature>
        <code>public TradeResult ModifyStopLossPips(double? stopLossPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.PendingOrder.ModifyTakeProfitPips(System.Nullable{System.Double})">
      <summary>
        Shortcut for Robot.ModifyPendingOrder method to change Take Profit
      </summary>
      <param name="takeProfitPips">New Take Profit value in Pips</param>
      <signature>
        <code>public TradeResult ModifyTakeProfitPips(double? takeProfitPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.PendingOrder.ModifyStopLimitRange(System.Double)">
      <summary>
        Shortcut for Robot.ModifyPendingOrder method to change Stop Limit Range
      </summary>
      <param name="stopLimitRangePips">New Stop Limit Range value in Pips</param>
      <signature>
        <code>public TradeResult ModifyStopLimitRange(double stopLimitRangePips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.PendingOrder.ModifyExpirationTime(System.Nullable{System.DateTime})">
      <summary>
        Shortcut for Robot.ModifyPendingOrder method to change Expiration Time
      </summary>
      <param name="expirationTime">New Expiration Time</param>
      <signature>
        <code>public TradeResult ModifyExpirationTime(DateTime? expirationTime)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.PendingOrder.ModifyVolume(System.Double)">
      <summary>
        Shortcut for Robot.ModifyPendingOrder method to change VolumeInUnits
      </summary>
      <param name="volume">New Volume in Units</param>
      <signature>
        <code>public TradeResult ModifyVolume(double volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.PendingOrder.ModifyTargetPrice(System.Double)">
      <summary>
        Shortcut for Robot.ModifyPendingOrder method to change Target Price
      </summary>
      <param name="targetPrice">New Target Price</param>
      <signature>
        <code>public TradeResult ModifyTargetPrice(double targetPrice)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.PendingOrder.Cancel">
      <summary>
        Shortcut for Robot.CancelPendingOrder method
      </summary>
      <returns>
      </returns>
      <signature>
        <code>public TradeResult Cancel()</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.PendingOrderCancellationReason">
      <summary>
        The reason for the order cancellation.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo.Robots
          {
          // This sample shows how to use PendingOrderCancellationReason
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PendingOrderCancellationReasonSample : Robot
          {
          protected override void OnStart()
          {
          PendingOrders.Cancelled += PendingOrders_Cancelled;
          }

          private void PendingOrders_Cancelled(PendingOrderCancelledEventArgs obj)
          {
          Print(obj.Reason);

          switch (obj.Reason)
          {
          case PendingOrderCancellationReason.Cancelled:
          // Do something if order cancelled
          break;

          case PendingOrderCancellationReason.Expired:
          // Do something if order expired
          break;

          case PendingOrderCancellationReason.Rejected:
          // Do something if order rejected
          break;
          }
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.PendingOrder" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.TradingOrders" />
      <signature>
        <code>public enum PendingOrderCancellationReason</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PendingOrderCancellationReason.Cancelled">
      <summary>
        THe order was cancelled by trader.
      </summary>
      <signature>
        <code>public static PendingOrderCancellationReason Cancelled;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PendingOrderCancellationReason.Expired">
      <summary>
        The order was cancelled due to expiration.
      </summary>
      <signature>
        <code>public static PendingOrderCancellationReason Expired;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PendingOrderCancellationReason.Rejected">
      <summary>
        The order fill was rejected and the order was cancelled.
      </summary>
      <signature>
        <code>public static PendingOrderCancellationReason Rejected;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.PendingOrders">
      <summary>
        Provides access to methods of the Pending Orders collection
      </summary>
      <seealso cref="T:cAlgo.API.PendingOrder" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.TradingOrders" />
      <signature>
        <code>public interface PendingOrders</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrders.Item(System.Int32)">
      <summary>
        Find a pending order by index
      </summary>
      <param name="index">The position of the order in the collection</param>
      <example>
        <code>
          if(PendingOrders.Count &gt; 0)
          Print(PendingOrders[0].Id);
        </code>
      </example>
      <signature>
        <code>public PendingOrder this[int index] { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.PendingOrders.Count">
      <summary>
        Total number of pending orders
      </summary>
      <example>
        <code>
          var totalOrders = PendingOrders.Count;
        </code>
      </example>
      <signature>
        <code>public int Count { get; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.PendingOrders.Created">
      <summary>
        Occurs when pending order is created
      </summary>
      <example>
        <code>
          protected override void OnStart()
          {
          PendingOrders.Created += PendingOrdersOnCreated;
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize);
          }
          private void PendingOrdersOnCreated(PendingOrderCreatedEventArgs args)
          {
          Print("Pending order with id {0} was created", args.PendingOrder.Id);
          }
        </code>
      </example>
      <signature>
        <code>public event Action&lt;PendingOrderCreatedEventArgs&gt; Created;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.PendingOrders.Modified">
      <summary>
        Occurs when pending order is modified
      </summary>
      <example>
        <code>
          protected override void OnStart()
          {
          PendingOrders.Modified += PendingOrdersOnModified;
          var result = PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize);
          ModifyPendingOrder(result.PendingOrder, Symbol.Ask + 20 * Symbol.PipSize ,null, null, null);
          }
          private void PendingOrdersOnModified(PendingOrderModifiedEventArgs args)
          {
          Print("Pending order with id {0} was modifed", args.PendingOrder.Id);
          }
        </code>
      </example>
      <signature>
        <code>public event Action&lt;PendingOrderModifiedEventArgs&gt; Modified;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.PendingOrders.Cancelled">
      <summary>
        Occurs when pending order is cancelled
      </summary>
      <example>
        <code>
          protected override void OnStart()
          {
          PendingOrders.Cancelled += PendingOrdersOnCancelled;
          var result = PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask + 10 * Symbol.PipSize);
          CancelPendingOrder(result.PendingOrder);
          }
          private void PendingOrdersOnCancelled(PendingOrderCancelledEventArgs args)
          {
          Print("Pending order with id {0} was cancelled. Reason: {1}", args.PendingOrder.Id, args.Reason);
          }
        </code>
      </example>
      <signature>
        <code>public event Action&lt;PendingOrderCancelledEventArgs&gt; Cancelled;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.PendingOrders.Filled">
      <summary>
        Occurs when pending order is filled
      </summary>
      <example>
        <code>
          protected override void OnStart()
          {
          PendingOrders.Filled += PendingOrdersOnFilled;
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
          }
          private void PendingOrdersOnFilled(PendingOrderFilledEventArgs args)
          {
          Print("Pending order with id {0} was filled, position id  is {1}", args.PendingOrder.Id, args.Position.Id);
          }
        </code>
      </example>
      <signature>
        <code>public event Action&lt;PendingOrderFilledEventArgs&gt; Filled;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.PendingOrderType">
      <summary>
        Represents the type (Limit or Stop) of pending order.
      </summary>
      <seealso cref="T:cAlgo.API.PendingOrder" />
      <example>
        <code>
          if(PendingOrders.Count &gt; 0)
          {
          PendingOrderType type = PendingOrders[0].OrderType;
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.TradingOrders" />
      <signature>
        <code>public enum PendingOrderType</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PendingOrderType.Limit">
      <summary>
        A limit order is an order to buy or sell at a specific price or better.
      </summary>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if(order.OrderType == PendingOrderType.Limit)
          Print(order.Id);
          }
        </code>
      </example>
      <signature>
        <code>public static PendingOrderType Limit;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PendingOrderType.Stop">
      <summary>
        A stop order is an order to buy or sell once the price of the symbol reaches a specified price.
      </summary>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if(order.OrderType == PendingOrderType.Stop)
          Print(order.Id);
          }
        </code>
      </example>
      <signature>
        <code>public static PendingOrderType Stop;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PendingOrderType.StopLimit">
      <summary>
        A stop limit order is an order to buy or sell once the price of the symbol reaches specific price.
        Order has a parameter for maximum distance from that target price, where it can be executed.
      </summary>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if(order.OrderType == PendingOrderType.StopLimit)
          Print(order.Id);
          }
        </code>
      </example>
      <signature>
        <code>public static PendingOrderType StopLimit;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartRobotsPermission">
      <summary>
        Chart Robots Permission
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Permissions" />
      <signature>
        <code>public interface ChartRobotsPermission</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Permission">
      <summary>
        Base interface for Permissions
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Permissions" />
      <signature>
        <code>public interface Permission</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Permission.Request">
      <summary>
        Requests the permission from user.
      </summary>
      <returns>
      </returns>
      <signature>
        <code>public bool Request()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Permission.IsAllowed">
      <summary>
        True if Permission is given by user otherwise false.
      </summary>
      <signature>
        <code>public bool IsAllowed { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Permissions">
      <summary>
        Provides all permissions state.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Permissions" />
      <signature>
        <code>public interface Permissions</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Permissions.TradingPermission">
      <summary>
        Trading permission.
      </summary>
      <signature>
        <code>public TradingPermission TradingPermission { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Permissions.ChartRobotsPermission">
      <summary>
        Chart Robots Permission.
      </summary>
      <signature>
        <code>public ChartRobotsPermission ChartRobotsPermission { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TradingPermission">
      <summary>
        Trading Permission
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Permissions" />
      <signature>
        <code>public interface TradingPermission</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.PlotType">
      <summary>
        The Plot type.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Indicators;

          namespace cAlgo
          {
          // This sample shows how to use different types of plots for your indicator outputs
          [Indicator(IsOverlay = false, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PlotTypeSample : Indicator
          {
          private StandardDeviation _standardDeviation;

          [Output("Discontinuous Line", LineColor = "Red", PlotType = PlotType.DiscontinuousLine)]
          public IndicatorDataSeries DiscontinuousLine { get; set; }

          [Output("Histogram", LineColor = "Green", PlotType = PlotType.Histogram)]
          public IndicatorDataSeries Histogram { get; set; }

          [Output("Line", LineColor = "Blue", PlotType = PlotType.Line)]
          public IndicatorDataSeries Line { get; set; }

          [Output("Points", LineColor = "Yellow", PlotType = PlotType.Points)]
          public IndicatorDataSeries Points { get; set; }

          protected override void Initialize()
          {
          _standardDeviation = Indicators.StandardDeviation(Bars.ClosePrices, 20, MovingAverageType.Simple);
          }

          public override void Calculate(int index)
          {
          DiscontinuousLine[index] = Bars.ClosePrices[index] + _standardDeviation.Result[index];
          Histogram[index] = Bars.ClosePrices[index] + (_standardDeviation.Result[index] * 1.5);
          Line[index] = Bars.ClosePrices[index] + (_standardDeviation.Result[index] * 2);
          Points[index] = Bars.ClosePrices[index] + (_standardDeviation.Result[index] * 2.5);
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Indicators" />
      <signature>
        <code>public enum PlotType</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PlotType.Line">
      <summary>
        Plot Indicator result as a line.
      </summary>
      <example>
        <code>
          [Output("Main", PlotType = PlotType.Line)]
          public IndicatorDataSeries Result { get; set; }
        </code>
      </example>
      <signature>
        <code>public static PlotType Line;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PlotType.Histogram">
      <summary>
        Plot Indicator result as a histogram.
      </summary>
      <example>
        <code>
          [Output("Main", PlotType = PlotType.Histogram)]
          public IndicatorDataSeries Result { get; set; }
        </code>
      </example>
      <signature>
        <code>public static PlotType Histogram;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PlotType.Points">
      <summary>
        Plot Indicator result as a sequence of points.
      </summary>
      <example>
        <code>
          [Output("Main", PlotType = PlotType.Points)]
          public IndicatorDataSeries Result { get; set; }
        </code>
      </example>
      <signature>
        <code>public static PlotType Points;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PlotType.DiscontinuousLine">
      <summary>
        Plot Indicator result as a line with breaks where there are no values in the IndicatorDataSeries.
      </summary>
      <example>
        <code>
          [Output("Main", PlotType = PlotType.DiscontinuousLine)]
          public IndicatorDataSeries Result { get; set; }
        </code>
      </example>
      <signature>
        <code>public static PlotType DiscontinuousLine;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Asp">
      <summary>
        Represents the active symbol panel.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public interface Asp</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Asp.SymbolTab">
      <summary>
        Symbol tab in active symbol panel.
      </summary>
      <signature>
        <code>public AspSymbolTab SymbolTab { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Asp.AddTab(System.String)">
      <summary>
        Adds a new tab to active symbol panel.
      </summary>
      <param name="title">Tab title</param>
      <returns>ASP Tab</returns>
      <signature>
        <code>public AspTab AddTab(string title)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Asp.RemoveTab(System.String)">
      <summary>
        Removes a tab from active symbol panel.
      </summary>
      <param name="id">Tab Id</param>
      <returns>True if remove was successful otherwise false.</returns>
      <signature>
        <code>public bool RemoveTab(string id)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Asp.RemoveTab(cAlgo.API.AspTab)">
      <summary>
        Removes a tab from active symbol panel.
      </summary>
      <param name="tab">Tab</param>
      <returns>True if remove was successful otherwise false.</returns>
      <signature>
        <code>public bool RemoveTab(AspTab tab)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.AspBlock">
      <summary>
        Represents an active symbol panel block.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public interface AspBlock</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspBlock.Id">
      <summary>
        Returns unique ID of the current block.
      </summary>
      <signature>
        <code>public string Id { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspBlock.Title">
      <summary>
        Returns title of the current block.
      </summary>
      <signature>
        <code>public string Title { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspBlock.Child">
      <summary>
        Get / set content of current block.
      </summary>
      <signature>
        <code>public ControlBase Child { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspBlock.Height">
      <summary>
        Get / set height of current block (default is 200).
      </summary>
      <signature>
        <code>public double Height { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspBlock.Index">
      <summary>
        Get / set index of current block (Must be greater than zero).
      </summary>
      <signature>
        <code>public int Index { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspBlock.IsExpanded">
      <summary>
        Get / set expanded state of current block.
      </summary>
      <signature>
        <code>public bool IsExpanded { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspBlock.IsAttached">
      <summary>
        Get / set block attached  / detached state.
      </summary>
      <signature>
        <code>public bool IsAttached { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspBlock.IsDetachable">
      <summary>
        Get / set block detachability, if True user can attach or detach the block.
      </summary>
      <signature>
        <code>public bool IsDetachable { get; set; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.AspBlock.Attached">
      <summary>
        Occurs when block attached.
      </summary>
      <signature>
        <code>public event Action&lt;AspBlockAttachedEventArgs&gt; Attached;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.AspBlock.Detached">
      <summary>
        Occurs when block is detached.
      </summary>
      <signature>
        <code>public event Action&lt;AspBlockDetachedEventArgs&gt; Detached;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.AspBlock.Updated">
      <summary>
        Occurs when block is updated.
      </summary>
      <signature>
        <code>public event Action&lt;AspBlockUpdatedEventArgs&gt; Updated;</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspBlock.DetachedWindow">
      <summary>
        Returns detached window properties.
      </summary>
      <signature>
        <code>public DetachedWindow DetachedWindow { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.AspSymbolTab">
      <summary>
        Active symbol panel tab.
      </summary>
      <remarks>
      </remarks>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public interface AspSymbolTab</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspSymbolTab.Symbol">
      <summary>
        Current symbol of Active symbol panel.
      </summary>
      <signature>
        <code>public Symbol Symbol { get; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.AspSymbolTab.SymbolChanged">
      <summary>
        Occurs when active symbol panel selected symbol changes.
      </summary>
      <signature>
        <code>public event Action&lt;AspSymbolChangedEventArgs&gt; SymbolChanged;</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.AspSymbolTab.AddBlock(System.String)">
      <summary>
        Adds a new section block to active symbol panel.
      </summary>
      <param name="title">Block title</param>
      <returns>ASP Block</returns>
      <signature>
        <code>public AspBlock AddBlock(string title)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.AspSymbolTab.RemoveBlock(System.String)">
      <summary>
        Removes a section block from active symbol panel.
      </summary>
      <param name="id">Block Id</param>
      <returns>True if remove was successful otherwise false.</returns>
      <signature>
        <code>public bool RemoveBlock(string id)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.AspSymbolTab.RemoveBlock(cAlgo.API.AspBlock)">
      <summary>
        Removes a section block from active symbol panel.
      </summary>
      <param name="block">Block</param>
      <returns>True if remove was successful otherwise false.</returns>
      <signature>
        <code>public bool RemoveBlock(AspBlock block)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.AspTab">
      <summary>
        Represents an active symbol panel tab.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public interface AspTab</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspTab.Id">
      <summary>
        Returns unique ID of the current tab.
      </summary>
      <signature>
        <code>public string Id { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspTab.Title">
      <summary>
        Returns title of the current tab.
      </summary>
      <signature>
        <code>public string Title { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspTab.Child">
      <summary>
        Get / set content of current tab.
      </summary>
      <signature>
        <code>public ControlBase Child { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspTab.Index">
      <summary>
        Get / set index of current tab (Must be greater than zero).
      </summary>
      <signature>
        <code>public int Index { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.AspTab.IsSelected">
      <summary>
        Get / set selected state of current tab.
      </summary>
      <signature>
        <code>public bool IsSelected { get; set; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.AspTab.IsSelectedChanged">
      <summary>
        Occurs after tab IsSelected value change.
      </summary>
      <signature>
        <code>public event Action&lt;AspTabIsSelectedChangedEventArgs&gt; IsSelectedChanged;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Backtesting">
      <summary>
        %DOCUMENTATION%
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public interface Backtesting</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Backtesting.Start(cAlgo.API.RobotType,System.String,cAlgo.API.TimeFrame,cAlgo.API.BacktestingSettings,System.Object[])">
      <summary>
        %DOCUMENTATION%
      </summary>
      <param name="robotType">%DOCUMENTATION%</param>
      <param name="symbolName">%DOCUMENTATION%</param>
      <param name="timeFrame">%DOCUMENTATION%</param>
      <param name="settings">%DOCUMENTATION%</param>
      <param name="parameterValues">%DOCUMENTATION%</param>
      <returns>%DOCUMENTATION%</returns>
      <signature>
        <code>public BacktestingProcess Start(RobotType robotType, string symbolName, TimeFrame timeFrame, BacktestingSettings settings, object[] parameterValues)</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Backtesting.ProgressChanged">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public event Action&lt;BacktestingProgressChangedEventArgs&gt; ProgressChanged;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Backtesting.Completed">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public event Action&lt;BacktestingCompletedEventArgs&gt; Completed;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.BacktestingCompletedEventArgs">
      <summary>
        %DOCUMENTATION%
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public class BacktestingCompletedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BacktestingCompletedEventArgs.Process">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public BacktestingProcess Process { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BacktestingCompletedEventArgs.JsonReport">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public string JsonReport { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BacktestingCompletedEventArgs.HtmlReport">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public string HtmlReport { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.BacktestingDataMode">
      <summary>
        %DOCUMENTATION%
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public enum BacktestingDataMode</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.BacktestingDataMode.Ticks">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public static BacktestingDataMode Ticks;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.BacktestingDataMode.M1">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public static BacktestingDataMode M1;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.BacktestingDataMode.M1Csv">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public static BacktestingDataMode M1Csv;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.BacktestingDataMode.OpenPrices">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public static BacktestingDataMode OpenPrices;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.BacktestingError">
      <summary>
        %DOCUMENTATION%
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public enum BacktestingError</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.BacktestingError.None">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public static BacktestingError None;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.BacktestingError.Other">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public static BacktestingError Other;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.BacktestingError.Net4IsNotSupported">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public static BacktestingError Net4IsNotSupported;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.BacktestingError.NoConnection">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public static BacktestingError NoConnection;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.BacktestingError.NoHistoricalData">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public static BacktestingError NoHistoricalData;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.BacktestingError.NotSupported">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public static BacktestingError NotSupported;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.BacktestingError.InvalidSettings">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public static BacktestingError InvalidSettings;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.BacktestingProcess">
      <summary>
        %DOCUMENTATION%
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public interface BacktestingProcess</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BacktestingProcess.BacktestingError">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public BacktestingError BacktestingError { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BacktestingProcess.IsCompleted">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public bool IsCompleted { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BacktestingProcess.JsonReport">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public string JsonReport { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BacktestingProcess.HtmlReport">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public string HtmlReport { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.BacktestingProcess.Terminate">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public void Terminate()</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.BacktestingProcess.ProgressChanged">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public event Action&lt;BacktestingProgressChangedEventArgs&gt; ProgressChanged;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.BacktestingProcess.Completed">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public event Action&lt;BacktestingCompletedEventArgs&gt; Completed;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.BacktestingProgressChangedEventArgs">
      <summary>
        %DOCUMENTATION%
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public class BacktestingProgressChangedEventArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BacktestingProgressChangedEventArgs.Process">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public BacktestingProcess Process { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BacktestingProgressChangedEventArgs.Progress">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public double Progress { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BacktestingProgressChangedEventArgs.Operation">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public string Operation { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.BacktestingSettings">
      <summary>
        %DOCUMENTATION%
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public class BacktestingSettings</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.BacktestingSettings.#ctor">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public BacktestingSettings()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BacktestingSettings.StartTimeUtc">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public DateTime StartTimeUtc { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BacktestingSettings.EndTimeUtc">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public DateTime EndTimeUtc { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BacktestingSettings.Balance">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public double Balance { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BacktestingSettings.DataMode">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public BacktestingDataMode DataMode { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BacktestingSettings.DataFile">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public string DataFile { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BacktestingSettings.CommissionUsdPerMillionUsd">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public double CommissionUsdPerMillionUsd { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.BacktestingSettings.SpreadPips">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public double SpreadPips { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartContainer">
      <summary>
        Represents a chart frames container.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />\
      <signature>
        <code>public interface ChartContainer</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartContainer.Id">
      <summary>
        Returns container Id.
      </summary>
      <signature>
        <code>public string Id { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartContainer.Item(System.Int32)">
      <summary>
        Returns a frame by it's index inside chart container.
      </summary>
      <param name="index">Frame index</param>
      <signature>
        <code>public Frame this[int index] { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartContainer.Count">
      <summary>
        Returns number of frames existing in chart container.
      </summary>
      <signature>
        <code>public int Count { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartContainer.Mode">
      <summary>
        Get / set chart mode of chart container.
      </summary>
      <signature>
        <code>public ChartMode Mode { get; set; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartContainer.Close">
      <summary>
        Closes current chart container window.
      </summary>
      <remarks>You can't close main chart container.</remarks>
      <returns>True if successful otherwise false.</returns>
      <signature>
        <code>public bool Close()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartContainer.DetachedWindow">
      <summary>
        Returns detached window properties of chart container.
      </summary>
      <signature>
        <code>public DetachedWindow DetachedWindow { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartContainers">
      <summary>
        Represents the list of all the chart containers.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public interface ChartContainers</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartContainers.Count">
      <summary>
        Returns number of all chart containers.
      </summary>
      <signature>
        <code>public int Count { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartContainers.MainChartContainer">
      <summary>
        Returns main chart container.
      </summary>
      <signature>
        <code>public ChartContainer MainChartContainer { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartContainers.Get(System.String)">
      <summary>
        Returns a chart container by it's ID.
      </summary>
      <param name="id">Chart container ID</param>
      <returns>Returns the matching chart container or null.</returns>
      <signature>
        <code>public ChartContainer Get(string id)</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartContainers.ContainersAdded">
      <summary>
        Occurs when new containers are added.
      </summary>
      <signature>
        <code>public event Action&lt;ChartContainersAddedEventArgs&gt; ContainersAdded;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartContainers.ContainersRemoved">
      <summary>
        Occurs when containers are removed.
      </summary>
      <signature>
        <code>public event Action&lt;ChartContainersRemovedEventArgs&gt; ContainersRemoved;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartFrame">
      <summary>
        Represents a chart frame.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Chart" />
      <signature>
        <code>public interface ChartFrame</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFrame.Chart">
      <summary>
        Returns frame chart.
      </summary>
      <signature>
        <code>public Chart Chart { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFrame.TimeFrame">
      <summary>
        Get / set frame chart timeframe.
      </summary>
      <signature>
        <code>public TimeFrame TimeFrame { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFrame.Symbol">
      <summary>
        Get / set frame chart symbol.
      </summary>
      <signature>
        <code>public Symbol Symbol { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartFrame.LinkedChartGroup">
      <summary>
        Get / set linked group of frame.
      </summary>
      <signature>
        <code>public LinkedChartGroup LinkedChartGroup { get; set; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartFrame.LinkedChartGroupChanged">
      <summary>
        Occurs when frame LinkedChartGroup is changed.
      </summary>
      <signature>
        <code>public event Action&lt;ChartFrameLinkedChartGroupChangedEventArgs&gt; LinkedChartGroupChanged;</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartFrame.TryChangeTimeFrame(cAlgo.API.TimeFrame)">
      <summary>
        Changes the time frame on the chart.
      </summary>
      <param name="timeFrame">The time frame to change the current chart time frame to</param>
      <returns>True if successful otherwise false.</returns>
      <signature>
        <code>public bool TryChangeTimeFrame(TimeFrame timeFrame)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartFrame.TryChangeTimeFrameAndSymbol(cAlgo.API.TimeFrame,System.String)">
      <summary>
        Changes the time frame and the symbol on the chart.
      </summary>
      <param name="timeFrame">The time frame to change the current chart time frame to</param>
      <param name="symbolName">The symbol name to change the current chart symbol to</param>
      <returns>True if successful otherwise false.</returns>
      <signature>
        <code>public bool TryChangeTimeFrameAndSymbol(TimeFrame timeFrame, string symbolName)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartManager">
      <summary>
        Represents the list of all the chart frames.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public interface ChartManager</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartManager.Count">
      <summary>
        Returns number of all frames.
      </summary>
      <signature>
        <code>public int Count { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartManager.ChartContainers">
      <summary>
        Returns chart containers.
      </summary>
      <signature>
        <code>public ChartContainers ChartContainers { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.ChartManager.ActiveFrame">
      <summary>
        Returns current active frame if any otherwise null.
      </summary>
      <signature>
        <code>public Frame ActiveFrame { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartManager.GetChartFrame(System.String)">
      <summary>
        Gets a chart frame by it's Id.
      </summary>
      <param name="frameId">Frame Id</param>
      <returns>Returns matching chart frame.</returns>
      <signature>
        <code>public ChartFrame GetChartFrame(string frameId)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartManager.GetCustomFrame(System.String)">
      <summary>
        Gets a custom frame by it's Id.
      </summary>
      <param name="frameId">Frame Id</param>
      <returns>Returns matching custom frame.</returns>
      <signature>
        <code>public CustomFrame GetCustomFrame(string frameId)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartManager.RemoveFrame(System.String)">
      <summary>
        Removes a frame by it's Id.
      </summary>
      <param name="frameId">Frame Id</param>
      <returns>True if successful otherwise false.</returns>
      <signature>
        <code>public bool RemoveFrame(string frameId)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartManager.AddChartFrame(System.String,cAlgo.API.TimeFrame)">
      <summary>
        Adds a new chart frame to main chart container.
      </summary>
      <param name="symbolName">Symbol name</param>
      <param name="timeFrame">Timeframe</param>
      <returns>Returns newly added chart frame.</returns>
      <signature>
        <code>public ChartFrame AddChartFrame(string symbolName, TimeFrame timeFrame)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartManager.AddChartFrame(System.String,cAlgo.API.TimeFrame,cAlgo.API.ChartContainer)">
      <summary>
        Adds a new chart frame to target chart container.
      </summary>
      <param name="symbolName">Symbol name</param>
      <param name="timeFrame">Timeframe</param>
      <param name="targetChartContainer">Target chart container</param>
      <returns>Returns newly added chart frame.</returns>
      <signature>
        <code>public ChartFrame AddChartFrame(string symbolName, TimeFrame timeFrame, ChartContainer targetChartContainer)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartManager.AddCustomFrame(System.String)">
      <summary>
        Adds a new custom frame to main chart container.
      </summary>
      <param name="title">Custom frame title.</param>
      <returns>Returns newly added custom frame.</returns>
      <signature>
        <code>public CustomFrame AddCustomFrame(string title)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.ChartManager.AddCustomFrame(System.String,cAlgo.API.ChartContainer)">
      <summary>
        Adds a new custom frame to target chart container.
      </summary>
      <param name="title">Custom frame title.</param>
      <param name="targetChartContainer">Target chart container</param>
      <returns>Returns newly added custom frame.</returns>
      <signature>
        <code>public CustomFrame AddCustomFrame(string title, ChartContainer targetChartContainer)</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartManager.FramesAdded">
      <summary>
        Occurs when new frames are added.
      </summary>
      <signature>
        <code>public event Action&lt;FramesAddedEventArgs&gt; FramesAdded;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartManager.FramesRemoved">
      <summary>
        Occurs when frames are removed.
      </summary>
      <signature>
        <code>public event Action&lt;FramesRemovedEventArgs&gt; FramesRemoved;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.ChartManager.ActiveFrameChanged">
      <summary>
        Occurs when active frame is changed.
      </summary>
      <signature>
        <code>public event Action&lt;ActiveFrameChangedEventArgs&gt; ActiveFrameChanged;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ChartMode">
      <summary>
        Represents the predefined chart container modes.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public enum ChartMode</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartMode.Single">
      <summary>
        Single chart mode.
      </summary>
      <signature>
        <code>public static ChartMode Single;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartMode.Multi">
      <summary>
        Multiple chart mode.
      </summary>
      <signature>
        <code>public static ChartMode Multi;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ChartMode.Free">
      <summary>
        Free chart mode.
      </summary>
      <signature>
        <code>public static ChartMode Free;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.CustomFrame">
      <summary>
        Represents a custom frame.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public interface CustomFrame</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.CustomFrame.Child">
      <summary>
        Get / set child control of frame.
      </summary>
      <signature>
        <code>public ControlBase Child { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Frame">
      <summary>
        Base interface for chart frames.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public interface Frame</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Frame.Id">
      <summary>
        Returns frame Id.
      </summary>
      <signature>
        <code>public string Id { get; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Frame.SizeChanged">
      <summary>
        Occurs when frame size changes.
      </summary>
      <signature>
        <code>public event Action&lt;FrameSizeChangedEventArgs&gt; SizeChanged;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Frame.Attached">
      <summary>
        Occurs when frame is attached.
      </summary>
      <signature>
        <code>public event Action&lt;FrameAttachedEventArgs&gt; Attached;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Frame.Detached">
      <summary>
        Occurs when frame is detached.
      </summary>
      <signature>
        <code>public event Action&lt;FrameDetachedEventArgs&gt; Detached;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Frame.ContainerChanged">
      <summary>
        Occurs when frame container is changed.
      </summary>
      <signature>
        <code>public event Action&lt;FrameContainerChangedEventArgs&gt; ContainerChanged;</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Frame.ChartContainer">
      <summary>
        Returns frame container.
      </summary>
      <signature>
        <code>public ChartContainer ChartContainer { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Frame.Attach">
      <summary>
        Attaches frame to main chart container.
      </summary>
      <returns>True if successful otherwise false</returns>
      <signature>
        <code>public bool Attach()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Frame.Attach(cAlgo.API.ChartContainer)">
      <summary>
        Attaches frame to passed chart container.
      </summary>
      <param name="targetContainer">Target chart container</param>
      <returns>True if successful otherwise false</returns>
      <signature>
        <code>public bool Attach(ChartContainer targetContainer)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Frame.Detach">
      <summary>
        Detaches frame from it's chart container.
      </summary>
      <returns>True if successful otherwise false</returns>
      <signature>
        <code>public bool Detach()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Frame.Width">
      <summary>
        Returns current width of frame.
      </summary>
      <signature>
        <code>public double Width { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Frame.Height">
      <summary>
        Returns current height of frame.
      </summary>
      <signature>
        <code>public double Height { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Frame.IsAttached">
      <summary>
        Returns true if frame is attached otherwise false.
      </summary>
      <signature>
        <code>public bool IsAttached { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Frame.Index">
      <summary>
        Get / set frame index in container.
      </summary>
      <signature>
        <code>public int Index { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.LinkedChartGroup">
      <summary>
        Represents the predefined chart linked groups.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public enum LinkedChartGroup</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.LinkedChartGroup.None">
      <summary>
        No Group.
      </summary>
      <signature>
        <code>public static LinkedChartGroup None;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.LinkedChartGroup.A">
      <summary>
        A Group.
      </summary>
      <signature>
        <code>public static LinkedChartGroup A;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.LinkedChartGroup.B">
      <summary>
        B Group.
      </summary>
      <signature>
        <code>public static LinkedChartGroup B;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.LinkedChartGroup.C">
      <summary>
        C Group.
      </summary>
      <signature>
        <code>public static LinkedChartGroup C;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.LinkedChartGroup.D">
      <summary>
        D Group.
      </summary>
      <signature>
        <code>public static LinkedChartGroup D;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.LinkedChartGroup.E">
      <summary>
        E Group.
      </summary>
      <signature>
        <code>public static LinkedChartGroup E;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.LinkedChartGroup.F">
      <summary>
        F Group.
      </summary>
      <signature>
        <code>public static LinkedChartGroup F;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.LinkedChartGroup.G">
      <summary>
        G Group.
      </summary>
      <signature>
        <code>public static LinkedChartGroup G;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.LinkedChartGroup.H">
      <summary>
        H Group.
      </summary>
      <signature>
        <code>public static LinkedChartGroup H;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Command">
      <summary>
        Represents a plugin command.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public interface Command</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Command.Id">
      <summary>
        Gets command unique Id.
      </summary>
      <signature>
        <code>public Guid Id { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Command.Type">
      <summary>
        Gets command type.
      </summary>
      <signature>
        <code>public CommandType Type { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Command.IsEnabled">
      <summary>
        Gets / sets if command is enabled or not.
      </summary>
      <signature>
        <code>public bool IsEnabled { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Command.ToolTip">
      <summary>
        Gets / sets command tooltips.
      </summary>
      <signature>
        <code>public string ToolTip { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.CommandArgs">
      <summary>
        Represents a plugin command callback arguments.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public class CommandArgs</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.CommandArgs.Command">
      <summary>
        Gets Callback Command.
      </summary>
      <signature>
        <code>public Command Command { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.CommandArgs.Context">
      <summary>
        Gets Command context.
      </summary>
      <signature>
        <code>public object Context { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.CommandResult">
      <summary>
        Represents a command callback result.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public class CommandResult</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.CommandResult.#ctor(cAlgo.API.ControlBase)">
      <summary>
        Creates a command result with control.
      </summary>
      <param name="child">Base command control.</param>
      <signature>
        <code>public CommandResult(ControlBase child)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.CommandResult.Child">
      <summary>
        The control that will be shown for command UI.
      </summary>
      <signature>
        <code>public ControlBase Child { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Commands">
      <summary>
        Represents the collection of plugin commands.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public interface Commands</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Commands.Count">
      <summary>
        Returns number of all commands.
      </summary>
      <signature>
        <code>public int Count { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Commands.GetByType(cAlgo.API.CommandType)">
      <summary>
        Returns all commands based on type.
      </summary>
      <param name="type">Command Type</param>
      <returns>An array of matching commands</returns>
      <signature>
        <code>public Command[] GetByType(CommandType type)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Commands.GetById(System.Guid)">
      <summary>
        Returns a command by Id.
      </summary>
      <param name="id">Command Id</param>
      <returns>Matching command or null</returns>
      <signature>
        <code>public Command GetById(Guid id)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Commands.Add(cAlgo.API.CommandType,System.Action{cAlgo.API.CommandArgs})">
      <summary>
        Adds a new command with a callback.
      </summary>
      <param name="type">Command Type</param>
      <param name="callback">Command callback action without result.</param>
      <returns>Command</returns>
      <signature>
        <code>public Command Add(CommandType type, Action&lt;CommandArgs&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Commands.Add(cAlgo.API.CommandType,System.Action{cAlgo.API.CommandArgs},cAlgo.API.SvgIcon)">
      <summary>
        Adds a new command with a callback.
      </summary>
      <param name="type">Command Type</param>
      <param name="callback">Command callback action without result.</param>
      <param name="icon">Command Icon</param>
      <returns>Command</returns>
      <signature>
        <code>public Command Add(CommandType type, Action&lt;CommandArgs&gt; callback, SvgIcon icon)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Commands.Add(cAlgo.API.CommandType,System.Func{cAlgo.API.CommandArgs,cAlgo.API.CommandResult})">
      <summary>
        Adds a new command with a callback.
      </summary>
      <param name="type">Command Type</param>
      <param name="callback">Command callback action</param>
      <returns>Command</returns>
      <signature>
        <code>public Command Add(CommandType type, Func&lt;CommandArgs, CommandResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Commands.Add(cAlgo.API.CommandType,System.Func{cAlgo.API.CommandArgs,cAlgo.API.CommandResult},cAlgo.API.SvgIcon)">
      <summary>
        Adds a new command with a callback and icon.
      </summary>
      <param name="type">Command Type</param>
      <param name="callback">Command callback action</param>
      <param name="icon">Command Icon</param>
      <returns>Command</returns>
      <signature>
        <code>public Command Add(CommandType type, Func&lt;CommandArgs, CommandResult&gt; callback, SvgIcon icon)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Commands.Remove(System.Guid)">
      <summary>
        Removes a command by Id.
      </summary>
      <param name="id">Command Id</param>
      <returns>True if command removed otherwise false.</returns>
      <signature>
        <code>public bool Remove(Guid id)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.CommandType">
      <summary>
        Represents the predefined types of plugin commands.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public enum CommandType</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.CommandType.ChartContainerToolbar">
      <summary>
        A command for chart group container toolbar.
      </summary>
      <signature>
        <code>public static CommandType ChartContainerToolbar;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Plugin">
      <summary>
        Base class for Plugins.
      </summary>
      <remarks>
        Contains all necessary data, provides framework for
        convenient Plugin's creation.
      </remarks>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.General" />
      <signature>
        <code>public abstract class Plugin</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.#ctor">
      <summary>
        Plugin class constructor
      </summary>
      <signature>
        <code>public Plugin()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.Server">
      <summary>
        Server related information.
      </summary>
      <example>
        <code>
          protected override void OnStart()
          {
          Print("The server time is: {0}", Server.Time);
          }
        </code>
      </example>
      <signature>
        <code>public IServer Server { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.OnException(System.Exception)">
      <summary>
        Called on each unhandled exception.
      </summary>
      <example>
        <code>
          protected override void OnException(Exception exception)
          {
          // Place your exception handling code here
          Print(exception.Message);
          }
        </code>
      </example>
      <signature>
        <code>public void OnException(Exception exception)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ToString">
      <summary>
        The name of the plugin class.
      </summary>
      <returns>Plugin Class Name</returns>
      <signature>
        <code>public string ToString()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.Timer">
      <summary>
        Access to the Timer object.
      </summary>
      <example>
        <code>
          protected override void OnStart()
          {
          Timer.Start(1);//start timer with 1 second interval
          }

          protected override void OnTimer()
          {
          Print("Timer interval elapsed");
          }
        </code>
      </example>
      <signature>
        <code>public Timer Timer { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.OnTimer">
      <summary>
        Called when the timer interval has elapsed.
      </summary>
      <example>
        <code>
          protected override void OnStart()
          {
          Timer.Start(1);//start timer with 1 second interval
          }

          protected override void OnTimer()
          {
          Print("Timer interval elapsed");
          }
        </code>
      </example>
      <signature>
        <code>public void OnTimer()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.TimeZone">
      <summary>
        TimeZone of a Plugin.
      </summary>
      <signature>
        <code>public TimeZoneInfo TimeZone { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.Time">
      <summary>
        Returns the current server time. The shortcut to the Server.Time property.
      </summary>
      <example>
        <code>
          protected override void OnStart()
          {
          Print("The Server Time is: {0}", Time);
          }
        </code>
      </example>
      <signature>
        <code>public DateTime Time { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.TimeInUtc">
      <summary>
        Returns the current server time in UTC. The shortcut to the Server.TimeInUtc property.
      </summary>
      <example>
        <code>
          protected override void OnStart()
          {
          Print("The Server Time in UTC is: {0}", TimeInUtc);
          }
        </code>
      </example>
      <signature>
        <code>public DateTime TimeInUtc { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.RefreshData">
      <summary>
        Updates MarketSeries, Positions, PendingOrders, History, etc.
        And sends postponed events after Thread sleep call.
        If you put the main thread on sleep by calling Thread sleep method
        then you have to call RefreshData after Thread wakes up to send
        the postponed events while thread was sleeping.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using System.Linq;
          using System.Threading;

          namespace Plugins
          {
          [Plugin(AccessRights = AccessRights.None)]
          public class NewPlugin : Plugin
          {
          protected override void OnStart()
          {
          Thread.Sleep(2000);

          RefreshData();
          }
          }
        </code>
      </example>
      <signature>
        <code>public void RefreshData()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.BeginInvokeOnMainThread(System.Action)">
      <summary>
        Invokes asynchronously the specified code on the main Plugin thread.
      </summary>
      <param name="action">The code to invoke on the main Plugin thread</param>
      <signature>
        <code>public void BeginInvokeOnMainThread(Action action)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.Application">
      <summary>
        Represents the application.
      </summary>
      <signature>
        <code>public Application Application { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.OnStart">
      <summary>
        Called when Plugin is being started. Override this method to initialize your Plugin.
      </summary>
      <example>
        <code>
          protected override void OnStart()
          {
          //This method is invoked when the Plugin is started.
          }
        </code>
      </example>
      <signature>
        <code>public void OnStart()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.OnStop">
      <summary>
        Called when Plugin is stopped.
      </summary>
      <example>
        <code>
          protected override void OnStop()
          {
          //This method is called when the Plugin is stopped
          }
        </code>
      </example>
      <signature>
        <code>public void OnStop()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.OnError(cAlgo.API.Error)">
      <summary>
        Called if there is an error executing a trade operation.
      </summary>
      <param name="error">Error description.</param>
      <example>
        <code>
          protected override void OnError(Error error)
          {
          Print("There has been an Error");
          }
        </code>
      </example>
      <signature>
        <code>public void OnError(Error error)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.Print(System.Object)">
      <summary>
        Prints text representation of the specified object to the log.
      </summary>
      <param name="value">Object to print.</param>
      <example>
        <code>
          Print(Application.ColorTheme);
        </code>
      </example>
      <signature>
        <code>public void Print(object value)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.Print(System.Object[])">
      <summary>
        Prints a message to the Log
      </summary>
      <param name="parameters">Parameters to print</param>
      <example>
        <code>
          Print(Application.ColorTheme, " ", Application.Version);
        </code>
      </example>
      <signature>
        <code>public void Print(object[] parameters)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.Print(System.String,System.Object[])">
      <summary>
        Prints a message to the Log.
      </summary>
      <param name="message">Message to print.</param>
      <param name="parameters">Parameters (optional)</param>
      <example>
        <code>
          Print("Application ColorTheme is {0}, Version is {1}.", Application.ColorTheme, Application.Version);
        </code>
      </example>
      <signature>
        <code>public void Print(string message, object[] parameters)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.Symbols">
      <summary>
        Gets the symbol names.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public Symbols Symbols { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.Asp">
      <summary>
        Gets the active symbol panel.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public Asp Asp { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.Account">
      <summary>
        Contains all Account information
      </summary>
      <example>
        <code>
          double balance = Account.Balance;
          string currency = Account.Currency;
          double equity = Account.Equity;
          double freemargin = Account.FreeMargin;
          double margin = Account.Margin;
          double? marginlevel = Account.MarginLevel;
          int leverage = Account.Leverage;
        </code>
      </example>
      <signature>
        <code>public IAccount Account { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.AssetConverter">
      <summary>
        Converts an asset to another asset.
      </summary>
      <signature>
        <code>public IAssetConverter AssetConverter { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.Assets">
      <summary>
        Returns list of all available assets.
      </summary>
      <signature>
        <code>public Assets Assets { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.History">
      <summary>
        Represents the collection of all historical trades of the account.
      </summary>
      <example>
        <code>
          foreach (HistoricalTrade trade in History)
          {
          Print(trade.EntryTime);
          }
        </code>
      </example>
      <signature>
        <code>public History History { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.Permissions">
      <summary>
        Contains all Permissions information
      </summary>
      <signature>
        <code>public Permissions Permissions { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.TradeWatch">
      <summary>
        Gets the Trade Watch panel.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public TradeWatch TradeWatch { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.MarketSessions">
      <summary>
        Returns current market sessions.
      </summary>
      <signature>
        <code>public MarketSession MarketSessions { get; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Plugin.MarketSessionsChanged">
      <summary>
        Occurs when market sessions change.
      </summary>
      <signature>
        <code>public event Action&lt;MarketSessionChangedEventArgs&gt; MarketSessionsChanged;</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.Watchlists">
      <summary>
        Gets the watchlist.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public Watchlists Watchlists { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.Http">
      <summary>
        Send HTTP requests.
      </summary>
      <signature>
        <code>public Http Http { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.Notifications">
      <summary>
        Represents the notifications, such as sounds and email.
      </summary>
      <example>
        <code>
          Notifications.PlaySound(@"C:\Windows\Media\notify.wav");
        </code>
      </example>
      <example>
        <code>
          string emailBody = "this is the message send";
          Notifications.SendEmail("from@example.com", "to@example.com", "my subject", emailBody);
        </code>
      </example>
      <signature>
        <code>public INotifications Notifications { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.Sleep(System.TimeSpan)">
      <summary>
        Suspends the plugin until the specified <c>timespan</c> elapses.
      </summary>
      <param name="timespan">
        The <c>Timespan</c> during which the plugin should not react to any events.
      </param>
      <signature>
        <code>public void Sleep(TimeSpan timespan)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.Sleep(System.Int32)">
      <summary>
        Suspends the plugin until the specified number of milliseconds elapses.
      </summary>
      <param name="milliseconds">The number of milliseconds for which the plugin should be suspended.</param>
      <signature>
        <code>public void Sleep(int milliseconds)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.Sleep(System.DateTime)">
      <summary>
        Suspends the plugin until the specified <c>datetime</c>.
      </summary>
      <param name="dateTime">
        The <c>DateTime</c> until the plugin should be suspended.
      </param>
      <signature>
        <code>public void Sleep(DateTime dateTime)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.ChartManager">
      <summary>
        Returns chart manager.
      </summary>
      <signature>
        <code>public ChartManager ChartManager { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.MarketData">
      <summary>
        Provides access to Market Data.
      </summary>
      <example>
        <code>
          private MarketDepth _md;
          _md = MarketData.GetMarketDepth("GBPUSD");
        </code>
      </example>
      <signature>
        <code>public MarketData MarketData { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.LocalStorage">
      <summary>
        Access the local storage API.
      </summary>
      <signature>
        <code>public LocalStorage LocalStorage { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.AlgoRegistry">
      <summary>
        Provides access to installed Algorithms.
      </summary>
      <signature>
        <code>public AlgoRegistry AlgoRegistry { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.Backtesting">
      <summary>
        %DOCUMENTATION%
      </summary>
      <signature>
        <code>public Backtesting Backtesting { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.Indicators">
      <summary>
        Access to the built-in Indicators.
      </summary>
      <example>
        <code>

          protected override void Initialize()
          {
          //Use MarketSeries price data as parameters to indicators
          _ma = Indicators.SimpleMovingAverage(MarketSeries.Close, 20);
          }

        </code>
      </example>
      <signature>
        <code>public IIndicatorsAccessor Indicators { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.Commands">
      <summary>
        Provides access to commands.
      </summary>
      <signature>
        <code>public Commands Commands { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.LastResult">
      <summary>
        The latest trade result
      </summary>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 20000, null, 10, null);
          if(LastResult.IsSuccessful)
          Print(LastResult.Position.StopLoss);
        </code>
      </example>
      <signature>
        <code>public TradeResult LastResult { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double)">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String)">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="label">Label representing the order</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 100000,
          Symbol.Bid - 2*Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 200000,
          Symbol.Bid - 2*Symbol.PipSize, "myLabel");
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 5*Symbol.PipSize, "112", 10, 10);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry, "first order");
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean)">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 100000,
          Symbol.Bid - 2*Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 200000,
          Symbol.Bid - 2*Symbol.PipSize, "myLabel");
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 5*Symbol.PipSize, "112", 10, 10);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry, "first order");
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry, "first order", HasTrailingStop);
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 100000,
          Symbol.Bid - 2*Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 200000,
          Symbol.Bid - 2*Symbol.PipSize, "myLabel");
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 5*Symbol.PipSize, "112", 10, 10);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry, "first order");
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry, "first order", HasTrailingStop);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry, "first order", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="label">Label that represents the order</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="label">Label that represents the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="label">Label that represents the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="label">Label that represents the order</param>
      <param name="stopLossPips">Stop loss in pips from target price</param>
      <param name="takeProfitPips">Take profit in pips from target price</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel");
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10,10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, Symbol.Bid, LimitOrderOnPlaced);
          }
          private void LimitOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Limit order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="label">Label that represents the order</param>
      <param name="stopLossPips">Stop loss in pips from target price</param>
      <param name="takeProfitPips">Take profit in pips from target price</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel");
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10,10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, Symbol.Bid, LimitOrderOnPlaced);
          }
          private void LimitOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Limit order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", HasTrailingStop);
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="label">Label that represents the order</param>
      <param name="stopLossPips">Stop loss in pips from target price</param>
      <param name="takeProfitPips">Take profit in pips from target price</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel");
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10,10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, Symbol.Bid, LimitOrderOnPlaced);
          }
          private void LimitOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Limit order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", HasTrailingStop);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double)">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String)">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask,
          "myStopOrder");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20);
        </code>
      </example>
      <example>
        <code>
          DateTime expiration = Server.Time.AddHours(1);
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, expiration);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment");
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean)">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask,
          "myStopOrder");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20);
        </code>
      </example>
      <example>
        <code>
          DateTime expiration = Server.Time.AddHours(1);
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, expiration);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment", HasTrailingStop);
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask,
          "myStopOrder");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20);
        </code>
      </example>
      <example>
        <code>
          DateTime expiration = Server.Time.AddHours(1);
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, expiration);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment", HasTrailingStop);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod)">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask,
          "myStopOrder");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20);
        </code>
      </example>
      <example>
        <code>
          DateTime expiration = Server.Time.AddHours(1);
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, expiration);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment", HasTrailingStop);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod stopOrderTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          bool hasTrailingStop = true;
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", hasTrailingStop);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed with HasTrailingStop: {0}", tradeResult.PendingOrder.HasTrailingStop);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          bool hasTrailingStop = true;
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", hasTrailingStop);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed with HasTrailingStop: {0}", tradeResult.PendingOrder.HasTrailingStop);
          }
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          bool hasTrailingStop = true;
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry,
          "order comment", hasTrailingStop, StopTriggerMethod.Trade);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed with stop trigger method: {0}", tradeResult.PendingOrder.StopTriggerMethod);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          bool hasTrailingStop = true;
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", hasTrailingStop);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed with HasTrailingStop: {0}", tradeResult.PendingOrder.HasTrailingStop);
          }
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          bool hasTrailingStop = true;
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry,
          "order comment", hasTrailingStop, StopTriggerMethod.Trade);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed with stop loss trigger method: {0}", tradeResult.PendingOrder.StopLossTriggerMethod);
          }
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          bool hasTrailingStop = true;
          StopTriggerMethod stopLossTriggerMethod = StopTriggerMethod.Trade;
          StopTriggerMethod stopOrderTriggerMethod = StopTriggerMethod.Trade;
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry,
          "order comment", hasTrailingStop, stopLossTriggerMethod, stopOrderTriggerMethod);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed with stop order trigger method: {0}", tradeResult.PendingOrder.StopOrderTriggerMethod);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod stopOrderTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ExecuteMarketOrder(TradeType tradeType, string symbolName, double volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double,System.String)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Representing label</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ExecuteMarketOrder(TradeType tradeType, string symbolName, double volume, string label)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ExecuteMarketOrder(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">order comment</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
        </code>
      </example>
      <signature>
        <code>public TradeResult ExecuteMarketOrder(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, string comment)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment", HasTrailingStop);
        </code>
      </example>
      <signature>
        <code>public TradeResult ExecuteMarketOrder(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment", HasTrailingStop);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage,
          "this is a comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeResult ExecuteMarketOrder(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ExecuteMarketOrderAsync(TradeType tradeType, string symbolName, double volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Label representing the order</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ExecuteMarketOrderAsync(TradeType tradeType, string symbolName, double volume, string label, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ExecuteMarketOrderAsync(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">Order comment</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", OnOpened);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ExecuteMarketOrderAsync(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, string comment, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", OnOpened);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", HasTrailingStop, OnOpened);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ExecuteMarketOrderAsync(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", OnOpened);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", HasTrailingStop, OnOpened);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage,
          "this is a comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ExecuteMarketOrderAsync(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ExecuteMarketRangeOrder(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Representing label</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ExecuteMarketRangeOrder(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ExecuteMarketRangeOrder(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">order comment</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
        </code>
      </example>
      <signature>
        <code>public TradeResult ExecuteMarketRangeOrder(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, string comment)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment", HasTrailingStop);
        </code>
      </example>
      <signature>
        <code>public TradeResult ExecuteMarketRangeOrder(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment", HasTrailingStop);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage,
          "this is a comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeResult ExecuteMarketRangeOrder(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ExecuteMarketRangeOrderAsync(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Label representing the order</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ExecuteMarketRangeOrderAsync(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ExecuteMarketRangeOrderAsync(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">Order comment</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", OnOpened);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ExecuteMarketRangeOrderAsync(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, string comment, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", OnOpened);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", HasTrailingStop, OnOpened);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ExecuteMarketRangeOrderAsync(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", OnOpened);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", HasTrailingStop, OnOpened);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage,
          "this is a comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ExecuteMarketRangeOrderAsync(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double)">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String)">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean)">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod)">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopLimitOrder</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod stopOrderTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopLimitOrder</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod stopOrderTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.Positions">
      <summary>
        The list of all open positions of the account.
      </summary>
      <example>
        <code>
          foreach (var position in Positions)
          {
          if (position.StopLoss == null)
          ModifyPosition(position, 10, position.TakeProfit);
          }
        </code>
      </example>
      <example>
        var position = Positions.Find("myLabel", Symbol, TradeType.Sell);
      </example>
      <signature>
        <code>public Positions Positions { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ReversePosition(cAlgo.API.Position)">
      <summary>
        Modify the direction of trade at position
      </summary>
      <param name="position">Position which is affected</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          ReversePosition(position);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ReversePosition(Position position)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPosition(cAlgo.API.Position,System.Double)">
      <summary>
        Modify the volume of a position
      </summary>
      <param name="position">Position which is affected</param>
      <param name="volume">Volume (in units) of Trade</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          ModifyPosition(position, 20000);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPosition(Position position, double volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ReversePosition(cAlgo.API.Position,System.Double)">
      <summary>
        Modify the direction of trade and volume of a position
      </summary>
      <param name="position">Position which is affected</param>
      <param name="volume">Volume (in units) of Trade</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          ReversePosition(position, 20000);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ReversePosition(Position position, double volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPosition(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Modify the protection of a position
      </summary>
      <param name="position">Position which is affected</param>
      <param name="stopLoss">New stop loss price</param>
      <param name="takeProfit">New take profit price</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          ModifyPosition(position, stopLoss,  takeProfit);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPosition(Position position, double? stopLoss, double? takeProfit)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPosition(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean)">
      <summary>
        Modify the protection of a position
      </summary>
      <param name="position">Position which is affected</param>
      <param name="stopLoss">New stop loss price</param>
      <param name="takeProfit">New take profit price</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          ModifyPosition(position, stopLoss,  takeProfit);
          }
        </code>
      </example>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          bool hasTrailingStop = true;
          ModifyPosition(position, stopLoss,  takeProfit, hasTrailingStop);
          Print("Position was modified, has Trailing Stop = {0}", result.Position.HasTrailingStop);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPosition(Position position, double? stopLoss, double? takeProfit, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPosition(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Modify the protection of a position
      </summary>
      <param name="position">Position which is affected</param>
      <param name="stopLoss">New stop loss price</param>
      <param name="takeProfit">New take profit price</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          ModifyPosition(position, stopLoss,  takeProfit);
          }
        </code>
      </example>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          bool hasTrailingStop = true;
          ModifyPosition(position, stopLoss,  takeProfit, hasTrailingStop);
          Print("Position was modified, has Trailing Stop = {0}", result.Position.HasTrailingStop);
          }
        </code>
      </example>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          bool hasTrailingStop = true;
          ModifyPosition(position, stopLoss,  takeProfit, hasTrailingStop, StopTriggerMethod.Opposite);
          Print("Position was modified, stop loss trigger method = {0}", result.Position.StopLossTriggerMethod);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPosition(Position position, double? stopLoss, double? takeProfit, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ClosePosition(cAlgo.API.Position)">
      <summary>
        Close a position
      </summary>
      <param name="position">Position to close</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ClosePosition(Position position)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ClosePosition(cAlgo.API.Position,System.Int64)">
      <summary>
        Close a position
      </summary>
      <param name="position">Position to close</param>
      <param name="volume">Volume which is closed</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ClosePosition(position);
        </code>
      </example>
      <example>
        <code>
          if (position.Volume &gt;= 20000)
          ClosePosition(position, 10000);
        </code>
      </example>
      <signature>
        <code>public TradeResult ClosePosition(Position position, long volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ClosePosition(cAlgo.API.Position,System.Double)">
      <summary>
        Close a position
      </summary>
      <param name="position">Position to close</param>
      <param name="volume">Volume which is closed</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ClosePosition(position);
        </code>
      </example>
      <example>
        <code>
          if (position.Volume &gt;= 20000)
          ClosePosition(position, 10000);
        </code>
      </example>
      <signature>
        <code>public TradeResult ClosePosition(Position position, double volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ClosePositionAsync(cAlgo.API.Position,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Close a position in asynchronous execution mode
      </summary>
      <param name="position">The position to close</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ClosePositionAsync(Position position, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ClosePositionAsync(cAlgo.API.Position,System.Int64,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Close a position in asynchronous execution mode
      </summary>
      <param name="position">The position to close</param>
      <param name="volume">The volume to close</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ClosePositionAsync(position);
        </code>
      </example>
      <example>
        <code>
          if (position.Volume &gt;= 20000)
          ClosePositionAsync(position, 10000);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ClosePositionAsync(Position position, long volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ClosePositionAsync(cAlgo.API.Position,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Close a position in asynchronous execution mode
      </summary>
      <param name="position">The position to close</param>
      <param name="volume">The volume to close</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ClosePositionAsync(position);
        </code>
      </example>
      <example>
        <code>
          if (position.Volume &gt;= 20000)
          ClosePositionAsync(position, 10000);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ClosePositionAsync(Position position, double volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ReversePositionAsync(cAlgo.API.Position,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify Position in asynchronous execution mode
      </summary>
      <param name="position">Position to modify</param>
      <param name="callback">Method that is called when position is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          ReversePositionAsync(position, TradeType.Sell);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ReversePositionAsync(Position position, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPositionAsync(cAlgo.API.Position,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify Position in asynchronous execution mode
      </summary>
      <param name="position">Position to modify</param>
      <param name="volume">New volume</param>
      <param name="callback">Method that is called when position is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          ModifyPositionAsync(position, 20000);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPositionAsync(Position position, double volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ReversePositionAsync(cAlgo.API.Position,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify Position in asynchronous execution mode
      </summary>
      <param name="position">Position to modify</param>
      <param name="volume">New volume</param>
      <param name="callback">Method that is called when position is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          ReversePositionAsync(position, 20000);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ReversePositionAsync(Position position, double volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPositionAsync(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify Position in asynchronous execution mode
      </summary>
      <param name="position">Position to modify</param>
      <param name="stopLoss">New stop loss price</param>
      <param name="takeProfit">New take profit price</param>
      <param name="callback">Method that is called when position is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          ModifyPositionAsync(position, stopLoss,  takeProfit);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPositionAsync(Position position, double? stopLoss, double? takeProfit, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPositionAsync(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify Position in asynchronous execution mode
      </summary>
      <param name="position">Position to modify</param>
      <param name="stopLoss">New stop loss price</param>
      <param name="takeProfit">New take profit price</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">Method that is called when position is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          ModifyPositionAsync(position, stopLoss,  takeProfit);
          }
        </code>
      </example>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          bool hasTrailingStop = true;
          ModifyPositionAsync(position, stopLoss,  takeProfit, hasTrailingStop);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPositionAsync(Position position, double? stopLoss, double? takeProfit, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPositionAsync(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify Position in asynchronous execution mode
      </summary>
      <param name="position">Position to modify</param>
      <param name="stopLoss">New stop loss price</param>
      <param name="takeProfit">New take profit price</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">Method that is called when position is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          ModifyPositionAsync(position, stopLoss,  takeProfit);
          }
        </code>
      </example>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          bool hasTrailingStop = true;
          ModifyPositionAsync(position, stopLoss,  takeProfit, hasTrailingStop);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPositionAsync(Position position, double? stopLoss, double? takeProfit, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Plugin.PendingOrders">
      <summary>
        The array of all Pending Orders of the account.
      </summary>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfit,
          order.ExpirationTime);
          }
        </code>
      </example>
      <signature>
        <code>public PendingOrders PendingOrders { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.CancelPendingOrder(cAlgo.API.PendingOrder)">
      <summary>
        Cancel a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          CancelPendingOrder(order);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult CancelPendingOrder(PendingOrder pendingOrder)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double)">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Int64)">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <param name="volume">New volume in units for the order</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, long volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double)">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <param name="volume">New volume in units for the order</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean)">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, hasTrailingStop);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 10000, hasTrailingStop, StopTriggerMethod.Trade);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop, StopTriggerMethod.Trade, StopTriggerMethod.Trade);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod? stopOrderTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{System.Double})">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop, StopTriggerMethod.Trade, StopTriggerMethod.Trade, 2);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod? stopOrderTriggerMethod, double? stopLimitRangePips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.CancelPendingOrderAsync(cAlgo.API.PendingOrder,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Cancel a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to cancel</param>
      <param name="callback">Method that is called when pending order is cancelled</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          if (PendingOrders.Count &gt; 0)
          {
          var pendingOrder = PendingOrders[0];
          CancelPendingOrderAsync(pendingOrder);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation CancelPendingOrderAsync(PendingOrder pendingOrder, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Int64,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, long volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop, StopTriggerMethod.Trade, StopTriggerMethod.Opposite);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod? stopOrderTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop, StopTriggerMethod.Trade);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Plugin.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, hasTrailingStop);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, hasTrailingStop, StopTriggerMethod.Trade);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, hasTrailingStop, 5, StopTriggerMethod.Trade, StopTriggerMethod.Opposite);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod? stopOrderTriggerMethod, double? stopLimitRangePips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TradeWatch">
      <summary>
        Represents the trade watch panel.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public interface TradeWatch</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.TradeWatch.AddTab(System.String)">
      <summary>
        Adds a new tab.
      </summary>
      <param name="title">Tab title</param>
      <returns>Added tab.</returns>
      <signature>
        <code>public TradeWatchTab AddTab(string title)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.TradeWatch.RemoveTab(System.String)">
      <summary>
        Removes a tab by ID.
      </summary>
      <param name="id">Tab ID</param>
      <returns>True if tab was removed otherwise false.</returns>
      <signature>
        <code>public bool RemoveTab(string id)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.TradeWatch.RemoveTab(cAlgo.API.TradeWatchTab)">
      <summary>
        Removes a tab.
      </summary>
      <param name="tab">Tab</param>
      <returns>True if tab was removed otherwise false.</returns>
      <signature>
        <code>public bool RemoveTab(TradeWatchTab tab)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeWatch.Height">
      <summary>
        Get / set height of trade watch.
      </summary>
      <signature>
        <code>public double Height { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeWatch.Width">
      <summary>
        Get / set width of trade watch.
      </summary>
      <signature>
        <code>public double Width { get; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.TradeWatch.SizeChanged">
      <summary>
        Occurs after trade watch size (height / width) changed.
      </summary>
      <signature>
        <code>public event Action&lt;TradeWatchSizeChangedEventArgs&gt; SizeChanged;</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeWatch.IsVisible">
      <summary>
        Get / set visibility of trade watch.
      </summary>
      <signature>
        <code>public bool IsVisible { get; set; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.TradeWatch.IsVisibleChanged">
      <summary>
        Occurs after trade watch visibility (IsVisible) changed.
      </summary>
      <signature>
        <code>public event Action&lt;TradeWatchIsVisibleChangedEventArgs&gt; IsVisibleChanged;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TradeWatchTab">
      <summary>
        Represents a trade watch panel tab.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Plugin" />
      <signature>
        <code>public interface TradeWatchTab</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeWatchTab.Id">
      <summary>
        Returns unique ID of the current tab.
      </summary>
      <signature>
        <code>public string Id { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeWatchTab.Title">
      <summary>
        Returns title of the current tab.
      </summary>
      <signature>
        <code>public string Title { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeWatchTab.Child">
      <summary>
        Get / set content of current tab.
      </summary>
      <signature>
        <code>public ControlBase Child { get; set; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.TradeWatchTab.Detach">
      <summary>
        Detaches current tab to a separate window.
      </summary>
      <returns>
      </returns>
      <signature>
        <code>public bool Detach()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.TradeWatchTab.Attach">
      <summary>
        Attaches current tab back to trade watch.
      </summary>
      <returns>
      </returns>
      <signature>
        <code>public bool Attach()</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.TradeWatchTab.Detached">
      <summary>
        Occurs when tab detached.
      </summary>
      <signature>
        <code>public event Action&lt;TradeWatchTabDetachedEventArgs&gt; Detached;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.TradeWatchTab.Attached">
      <summary>
        Occurs when tab attached.
      </summary>
      <signature>
        <code>public event Action&lt;TradeWatchTabAttachedEventArgs&gt; Attached;</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeWatchTab.IsSelected">
      <summary>
        Get / set selected state of current tab.
      </summary>
      <signature>
        <code>public bool IsSelected { get; set; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.TradeWatchTab.IsSelectedChanged">
      <summary>
        Occurs after tab IsSelected value change.
      </summary>
      <signature>
        <code>public event Action&lt;TradeWatchTabIsSelectedChangedEventArgs&gt; IsSelectedChanged;</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeWatchTab.Width">
      <summary>
        Returns current width of tab.
      </summary>
      <signature>
        <code>public double Width { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeWatchTab.Height">
      <summary>
        Returns current height of tab.
      </summary>
      <signature>
        <code>public double Height { get; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.TradeWatchTab.SizeChanged">
      <summary>
        Occurs after tab size (height / width) value change.
      </summary>
      <signature>
        <code>public event Action&lt;TradeWatchTabSizeChangedEventArgs&gt; SizeChanged;</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeWatchTab.IsBalanceBarVisible">
      <summary>
        Get / set the visibility of balance bar for the tab.
      </summary>
      <signature>
        <code>public bool IsBalanceBarVisible { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeWatchTab.Index">
      <summary>
        Get / set the index of the tab.
      </summary>
      <signature>
        <code>public int Index { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeWatchTab.DetachedWindow">
      <summary>
        Returns detached window properties.
      </summary>
      <signature>
        <code>public DetachedWindow DetachedWindow { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Position">
      <summary>
        Taking or opening a position means buying or selling a trading pair.
      </summary>
      <example>
        <code>
          protected override void OnStart()
          {
          foreach (var position in Positions)
          {
          Print("Position Label {0}", position.Label);
          Print("Position ID {0}", position.Id);
          Print("Profit {0}", position.GrossProfit);
          Print("Entry Price {0}", position.EntryPrice);
          }
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Internals;

          namespace cAlgo.Robots
          {
          /// <summary>
            /// This sample shows how to execute a position or market order
            ///
          </summary>
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PositionExecutionSample : Robot
          {
          [Parameter("Direction", DefaultValue = TradeType.Buy)]
          public TradeType Direction { get; set; }

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Distance (Pips)", DefaultValue = 20, MinValue = 1)]
          public double DistanceInPips { get; set; }

          [Parameter("Stop (Pips)", DefaultValue = 10, MinValue = 0)]
          public double StopInPips { get; set; }

          [Parameter("Target (Pips)", DefaultValue = 10, MinValue = 0)]
          public double TargetInPips { get; set; }

          [Parameter("Label")]
          public string Label { get; set; }

          [Parameter("Comment")]
          public string Comment { get; set; }

          [Parameter("Trailing Stop", DefaultValue = false)]
          public bool HasTrailingStop { get; set; }

          [Parameter("Stop Loss Trigger Method", DefaultValue = StopTriggerMethod.Trade)]
          public StopTriggerMethod StopLossTriggerMethod { get; set; }

          [Parameter("Async", DefaultValue = false)]
          public bool IsAsync { get; set; }

          protected override void OnStart()
          {
          var volumeInUnits = Symbol.QuantityToVolumeInUnits(VolumeInLots);

          DistanceInPips *= Symbol.PipSize;

          var stopLoss = StopInPips == 0 ? null : (double?)StopInPips;
          var takeProfit = TargetInPips == 0 ? null : (double?)TargetInPips;

          TradeResult result = null;

          if (IsAsync)
          ExecuteMarketOrderAsync(Direction, SymbolName, volumeInUnits, Label, stopLoss, takeProfit, Comment, HasTrailingStop, StopLossTriggerMethod, OnCompleted);
          else
          result = ExecuteMarketOrder(Direction, SymbolName, volumeInUnits, Label, stopLoss, takeProfit, Comment, HasTrailingStop, StopLossTriggerMethod);

          if (!IsAsync) OnCompleted(result);
          }

          private void OnCompleted(TradeResult result)
          {
          if (!result.IsSuccessful) Print("Error: ", result.Error);

          Stop();
          }
          }
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using System;
          using System.Linq;

          namespace cAlgo.Robots
          {
          /// <summary>
            /// This sample shows how to close a position
            ///
          </summary>
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PositionClosingSample : Robot
          {
          [Parameter("Position Comment")]
          public string PositionComment { get; set; }

          [Parameter("Position Label")]
          public string PositionLabel { get; set; }

          protected override void OnStart()
          {
          Position position = null;

          if (!string.IsNullOrWhiteSpace(PositionComment) &amp;&amp; !string.IsNullOrWhiteSpace(PositionLabel))
          {
          position = Positions.FindAll(PositionLabel).FirstOrDefault(iOrder =&gt; string.Equals(iOrder.Comment, PositionComment, StringComparison.OrdinalIgnoreCase));
          }
          else if (!string.IsNullOrWhiteSpace(PositionComment))
          {
          position = Positions.FirstOrDefault(iOrder =&gt; string.Equals(iOrder.Comment, PositionComment, StringComparison.OrdinalIgnoreCase));
          }
          else if (!string.IsNullOrWhiteSpace(PositionLabel))
          {
          position = Positions.Find(PositionLabel);
          }

          if (position == null)
          {
          Print("Couldn't find the position, please check the comment and label");

          Stop();
          }

          ClosePosition(position);
          }
          }
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;
          using System;
          using System.Linq;

          namespace cAlgo.Robots
          {
          /// <summary>
            /// This sample shows how to modify a position
            ///
          </summary>
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PositionModificationSample : Robot
          {
          [Parameter("Position Comment")]
          public string PositionComment { get; set; }

          [Parameter("Position Label")]
          public string PositionLabel { get; set; }

          [Parameter("Stop Loss (Pips)", DefaultValue = 10)]
          public double StopLossInPips { get; set; }

          [Parameter("Stop Loss Trigger Method", DefaultValue = StopTriggerMethod.Trade)]
          public StopTriggerMethod StopLossTriggerMethod { get; set; }

          [Parameter("Take Profit (Pips)", DefaultValue = 10)]
          public double TakeProfitInPips { get; set; }

          [Parameter("Volume (Lots)", DefaultValue = 0.01)]
          public double VolumeInLots { get; set; }

          [Parameter("Has Trailing Stop", DefaultValue = false)]
          public bool HasTrailingStop { get; set; }

          protected override void OnStart()
          {
          Position position = null;

          if (!string.IsNullOrWhiteSpace(PositionComment) &amp;&amp; !string.IsNullOrWhiteSpace(PositionLabel))
          {
          position = Positions.FindAll(PositionLabel).FirstOrDefault(iOrder =&gt; string.Equals(iOrder.Comment, PositionComment, StringComparison.OrdinalIgnoreCase));
          }
          else if (!string.IsNullOrWhiteSpace(PositionComment))
          {
          position = Positions.FirstOrDefault(iOrder =&gt; string.Equals(iOrder.Comment, PositionComment, StringComparison.OrdinalIgnoreCase));
          }
          else if (!string.IsNullOrWhiteSpace(PositionLabel))
          {
          position = Positions.Find(PositionLabel);
          }

          if (position == null)
          {
          Print("Couldn't find the position, please check the comment and label");

          Stop();
          }

          var positionSymbol = Symbols.GetSymbol(position.SymbolName);

          var stopLossInPrice = position.StopLoss;

          if (StopLossInPips &gt; 0)
          {
          var stopLossInPipsPrice = StopLossInPips * positionSymbol.PipSize;

          stopLossInPrice = position.TradeType == TradeType.Buy ? position.EntryPrice - stopLossInPipsPrice : position.EntryPrice + stopLossInPipsPrice;
          }

          var takeProfitInPrice = position.TakeProfit;

          if (TakeProfitInPips &gt; 0)
          {
          var takeProfitInPipsPrice = TakeProfitInPips * positionSymbol.PipSize;

          takeProfitInPrice = position.TradeType == TradeType.Buy ? position.EntryPrice + takeProfitInPipsPrice : position.EntryPrice - takeProfitInPipsPrice;
          }

          ModifyPosition(position, stopLossInPrice, takeProfitInPrice, HasTrailingStop, StopLossTriggerMethod);

          if (VolumeInLots &gt; 0)
          {
          var volumeInUnits = positionSymbol.QuantityToVolumeInUnits(VolumeInLots);

          ModifyPosition(position, volumeInUnits);
          }
          }
          }
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo.Robots
          {
          /// <summary>
            /// This sample shows how to handle position events
            ///
          </summary>
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PositionEventsSample : Robot
          {
          protected override void OnStart()
          {
          Positions.Opened += Positions_Opened;
          Positions.Closed += Positions_Closed;
          Positions.Modified += Positions_Modified;
          }

          private void Positions_Modified(PositionModifiedEventArgs obj)
          {
          var modifiedPosition = obj.Position;
          }

          private void Positions_Closed(PositionClosedEventArgs obj)
          {
          var closedPosition = obj.Position;

          var closeReason = obj.Reason;
          }

          private void Positions_Opened(PositionOpenedEventArgs obj)
          {
          var openedPosition = obj.Position;
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.TradingPositions" />
      <signature>
        <code>public interface Position</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.SymbolName">
      <summary>
        Gets the symbol name.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public string SymbolName { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.TradeType">
      <summary>
        Trade type (Buy/Sell) of the position.
      </summary>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
          Print(LastResult.Position.TradeType);
        </code>
      </example>
      <signature>
        <code>public TradeType TradeType { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.VolumeInUnits">
      <summary>
        The amount traded by the position.
      </summary>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
          Print(LastResult.Position.VolumeInUnits);
        </code>
      </example>
      <signature>
        <code>public double VolumeInUnits { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.Id">
      <summary>
        The position's unique identifier.
      </summary>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
          Print(LastResult.Position.Id);
        </code>
      </example>
      <signature>
        <code>public int Id { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.GrossProfit">
      <summary>
        Gross profit accrued by the order associated with the position.
      </summary>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
          Print(LastResult.Position.GrossProfit);
        </code>
      </example>
      <signature>
        <code>public double GrossProfit { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.EntryPrice">
      <summary>
        Entry price of the position.
      </summary>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
          Print(LastResult.Position.EntryPrice);
        </code>
      </example>
      <signature>
        <code>public double EntryPrice { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.StopLoss">
      <summary>
        The Stop Loss level of the position.
      </summary>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
          Print(LastResult.Position.StopLoss);
        </code>
      </example>
      <signature>
        <code>public double? StopLoss { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.TakeProfit">
      <summary>
        The take profit level of the position.
      </summary>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
          Print(LastResult.Position.TakeProfit);
        </code>
      </example>
      <signature>
        <code>public double? TakeProfit { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.NetProfit">
      <summary>
        The Net profit of the position.
      </summary>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
          Print(LastResult.Position.NetProfit);
        </code>
      </example>
      <signature>
        <code>public double NetProfit { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.Swap">
      <summary>
        Swap is the overnight interest rate if any, accrued on the position.
      </summary>
      <example>
        <code>
          Print(LastResult.Position.Swap);
        </code>
      </example>
      <signature>
        <code>public double Swap { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.Commissions">
      <summary>
        Commission Amount of the request to trade one way (Buy/Sell) associated with this position.
      </summary>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
          Print(LastResult.Position.Commissions);
        </code>
      </example>
      <signature>
        <code>public double Commissions { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.EntryTime">
      <summary>
        Entry time of trade associated with the position.
        The Timezone used is set in the cBot attribute.
      </summary>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
          Print(LastResult.Position.EntryTime);
        </code>
      </example>
      <signature>
        <code>public DateTime EntryTime { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.Pips">
      <summary>
        Represents the winning or loosing pips of the position.
      </summary>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10,10);
          Print(LastResult.Position.Pips);
        </code>
      </example>
      <signature>
        <code>public double Pips { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.Label">
      <summary>
        Label can be used to represent the order.
      </summary>
      <example>
        <code>
          var result = ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "myLabel");
          if(result.IsSuccessful)
          Print("Position {0} is open", result.Position.Label);
        </code>
      </example>
      <signature>
        <code>public string Label { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.Comment">
      <summary>
        Comment can be used as a note for the order.
      </summary>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myLabel", 10, 10, 2, "this is a comment");
          if(result.IsSuccessful)
          Print("Position is open: {0}", result.Position.Comment);
        </code>
      </example>
      <signature>
        <code>public string Comment { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.Quantity">
      <summary>
        Quantity of lots traded by the position.
      </summary>
      <signature>
        <code>public double Quantity { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.HasTrailingStop">
      <summary>
        When HasTrailingStop set to true, the server updates the Stop Loss every time the position moves in your favor.
      </summary>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10, 2, "comment", true);
          Print("Position was opened, has Trailing Stop = {0}", result.Position.HasTrailingStop);
        </code>
      </example>
      <signature>
        <code>public bool HasTrailingStop { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.StopLossTriggerMethod">
      <summary>
        Trigger method for the position's Stop Loss.
      </summary>
      <signature>
        <code>public StopTriggerMethod? StopLossTriggerMethod { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.Margin">
      <summary>
        The amount of used margin by the position.
      </summary>
      <signature>
        <code>public double Margin { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.CurrentPrice">
      <summary>
        Gets the position current market price.
        If Position's TradeType is Buy it returns Symbol current Bid price.
        If position's TradeType is Sell it returns Symbol current Ask price.
      </summary>
      <signature>
        <code>public double CurrentPrice { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Position.Symbol">
      <summary>
        Gets the position symbol.
      </summary>
      <signature>
        <code>public Symbol Symbol { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Position.ModifyStopLossPrice(System.Nullable{System.Double})">
      <summary>
        Shortcut for Robot.ModifyPosition method to change the Stop Loss.
      </summary>
      <param name="stopLoss">New Stop Loss price</param>
      <signature>
        <code>public TradeResult ModifyStopLossPrice(double? stopLoss)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Position.ModifyTakeProfitPrice(System.Nullable{System.Double})">
      <summary>
        Shortcut for Robot.ModifyPosition method to change the Take Profit.
      </summary>
      <param name="takeProfit">New Take Profit price</param>
      <signature>
        <code>public TradeResult ModifyTakeProfitPrice(double? takeProfit)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Position.ModifyStopLossPips(System.Nullable{System.Double})">
      <summary>
        Shortcut for the Robot.ModifyPosition method to change the Stop Loss pips
      </summary>
      <param name="stopLossPips">New Stop Loss in Pips</param>
      <signature>
        <code>public TradeResult ModifyStopLossPips(double? stopLossPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Position.ModifyTakeProfitPips(System.Nullable{System.Double})">
      <summary>
        Shortcut for the Robot.ModifyPosition method to change the Take Profit pips
      </summary>
      <param name="takeProfitPips">New Take Profit in Pips</param>
      <signature>
        <code>public TradeResult ModifyTakeProfitPips(double? takeProfitPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Position.ModifyTrailingStop(System.Boolean)">
      <summary>
        Shortcut for the Robot.ModifyPosition method to change the Trailing Stop.
      </summary>
      <param name="hasTrailingStop">If true position will have trailing stop loss</param>
      <signature>
        <code>public TradeResult ModifyTrailingStop(bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Position.ModifyVolume(System.Double)">
      <summary>
        Shortcut for the Robot.ModifyPosition method to change the VolumeInUnits.
      </summary>
      <param name="volume">New Volume in Units</param>
      <signature>
        <code>public TradeResult ModifyVolume(double volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Position.Reverse">
      <summary>
        Shortcut for the Robot.ReversePosition method to change the direction of the trade.
      </summary>
      <signature>
        <code>public TradeResult Reverse()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Position.Reverse(System.Double)">
      <summary>
        Shortcut for the Robot.ReversePosition method to change the direction of trade and the volume.
      </summary>
      <param name="volume">New Volume in Units</param>
      <signature>
        <code>public TradeResult Reverse(double volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Position.Close">
      <summary>
        Shortcut for the Robot.ClosePosition method.
      </summary>
      <signature>
        <code>public TradeResult Close()</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.PositionCloseReason">
      <summary>
        The reason for closing the position.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo.Robots
          {
          // This sample shows how to use PositionCloseReason
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class PositionCloseReasonSample : Robot
          {
          protected override void OnStart()
          {
          Positions.Closed += Positions_Closed;
          }

          private void Positions_Closed(PositionClosedEventArgs obj)
          {
          Print(obj.Reason);

          switch (obj.Reason)
          {
          case PositionCloseReason.Closed:
          // Do something if position closed
          break;

          case PositionCloseReason.StopLoss:
          // Do something if position stop loss got hit
          break;

          case PositionCloseReason.StopOut:
          // Do something if position stopped out
          break;

          case PositionCloseReason.TakeProfit:
          // Do something if position take profit got hit
          break;
          }
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.Position" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.TradingPositions" />
      <signature>
        <code>public enum PositionCloseReason</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PositionCloseReason.Closed">
      <summary>
        Positions was closed by the trader.
      </summary>
      <signature>
        <code>public static PositionCloseReason Closed;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PositionCloseReason.StopLoss">
      <summary>
        Position was closed by the Stop Loss.
      </summary>
      <signature>
        <code>public static PositionCloseReason StopLoss;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PositionCloseReason.TakeProfit">
      <summary>
        Position was closed by the Take Profit.
      </summary>
      <signature>
        <code>public static PositionCloseReason TakeProfit;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.PositionCloseReason.StopOut">
      <summary>
        Position was closed because the Stop Out level reached.
      </summary>
      <signature>
        <code>public static PositionCloseReason StopOut;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Positions">
      <summary>
        Provides access to methods of the positions collection.
      </summary>
      <seealso cref="T:cAlgo.API.Position" />
      <example>
        <code>
          int totalPositions = Positions.Count;
        </code>
      </example>
      <example>
        <code>
          Position position =  Positions.Find("myLabel", Symbol, TradeType.Buy);
        </code>
      </example>
      <example>
        <code>
          Position[] positions = Positions.FindAll("myLabel", Symbol, TradeType.Buy);
        </code>
      </example>
      <example>
        <code>
          Positions.Opened += PositionsOnOpened;
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.TradingPositions" />
      <signature>
        <code>public interface Positions</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Positions.Item(System.Int32)">
      <summary>
        Finds a position by index.
      </summary>
      <param name="index">the index in the list</param>
      <example>
        <code>
          var position = Positions[0];
        </code>
      </example>
      <signature>
        <code>public Position this[int index] { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Positions.Count">
      <summary>
        The total number of open positions.
      </summary>
      <example>
        <code>
          int totalPositions = Positions.Count;
        </code>
      </example>
      <signature>
        <code>public int Count { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Positions.Find(System.String)">
      <summary>
        Find a position by its label.
      </summary>
      <param name="label">Label to search by</param>
      <returns>Position if it exists, null otherwise</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel");
        </code>
      </example>
      <signature>
        <code>public Position Find(string label)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Positions.Find(System.String,System.String)">
      <summary>
        Find a position by its label and symbol name.
      </summary>
      <param name="label">Label to search by</param>
      <param name="symbolName">Symbol name to search by</param>
      <returns>Position if it exists, null otherwise</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", "EURUSD");
        </code>
      </example>
      <signature>
        <code>public Position Find(string label, string symbolName)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Positions.Find(System.String,System.String,cAlgo.API.TradeType)">
      <summary>
        Find a position by its label, symbol name and trade type
      </summary>
      <param name="label">Label to search by</param>
      <param name="symbolName">Symbol name to search by </param>
      <param name="tradeType">Trade type to search by</param>
      <returns>Position if it exists, null otherwise</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", "EURUSD", TradeType.Buy);
        </code>
      </example>
      <signature>
        <code>public Position Find(string label, string symbolName, TradeType tradeType)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Positions.FindAll(System.String)">
      <summary>
        Find all positions with this label.
      </summary>
      <param name="label">Label to search by</param>
      <returns>Array of Positions</returns>
      <example>
        <code>
          var positions = Positions.FindAll("myLabel");

          foreach (var position in positions)
          {
          double? newStopLoss = position.StopLoss ?? 10;
          ModifyPosition(position, newStopLoss, position.TakeProfit);
          }
        </code>
      </example>
      <signature>
        <code>public Position[] FindAll(string label)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Positions.FindAll(System.String,System.String)">
      <summary>
        Find all positions with this label and symbol name.
      </summary>
      <param name="label">Label to search by</param>
      <param name="symbolName">Symbol name to search by </param>
      <returns>Array of Positions</returns>
      <example>
        <code>
          var positions = Positions.FindAll("myLabel", "EURUSD");

          foreach (var position in positions)
          {
          double? newStopLoss = position.StopLoss ?? 10;
          ModifyPosition(position, newStopLoss, position.TakeProfit);
          }
        </code>
      </example>
      <signature>
        <code>public Position[] FindAll(string label, string symbolName)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Positions.FindAll(System.String,System.String,cAlgo.API.TradeType)">
      <summary>
        Finds all the positions of this label, symbol name and trade type.
      </summary>
      <param name="label">Label to search by</param>
      <param name="symbolName">Symbol name to search by </param>
      <param name="tradeType">Trade type to search by</param>
      <returns>Array of Positions</returns>
      <example>
        <code>
          var positions = Positions.FindAll("myLabel", "EURUSD", TradeType.Buy);

          foreach (var position in positions)
          {
          double? newStopLoss = position.StopLoss ?? 10;
          ModifyPosition(position, newStopLoss, position.TakeProfit);
          }
        </code>
      </example>
      <signature>
        <code>public Position[] FindAll(string label, string symbolName, TradeType tradeType)</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Positions.Closed">
      <summary>
        Occurs each time a position is closed.
      </summary>
      <example>
        <code>
          protected override void OnStart()
          {
          Positions.Closed += PositionsOnClosed;
          }
          private void PositionsOnClosed(PositionClosedEventArgs args)
          {
          var position = args.Position;
          Print("Position closed with {0} profit", position.GrossProfit);
          }
        </code>
      </example>
      <signature>
        <code>public event Action&lt;PositionClosedEventArgs&gt; Closed;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Positions.Opened">
      <summary>
        Occurs each time a position is opened.
      </summary>
      <example>
        <code>
          protected override void OnStart()
          {
          Positions.Opened += PositionsOnOpened;
          }
          private void PositionsOnOpened(PositionOpenedEventArgs args)
          {
          Print("Position opened {0}", args.Position.Label);
          }
        </code>
      </example>
      <signature>
        <code>public event Action&lt;PositionOpenedEventArgs&gt; Opened;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Positions.Modified">
      <summary>
        Occurs each time a position is modified.
      </summary>
      <signature>
        <code>public event Action&lt;PositionModifiedEventArgs&gt; Modified;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Key">
      <summary>
        Specifies the possible key values on a keyboard.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Utility" />
      <signature>
        <code>public enum Key</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.None">
      <summary>No key pressed. </summary>
      <signature>
        <code>public static Key None;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Cancel">
      <summary>The Cancel key. </summary>
      <signature>
        <code>public static Key Cancel;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Back">
      <summary>The Backspace key. </summary>
      <signature>
        <code>public static Key Back;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Tab">
      <summary>The Tab key. </summary>
      <signature>
        <code>public static Key Tab;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.LineFeed">
      <summary>The Linefeed key. </summary>
      <signature>
        <code>public static Key LineFeed;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Clear">
      <summary>The Clear key. </summary>
      <signature>
        <code>public static Key Clear;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Enter">
      <summary>The Enter key. </summary>
      <signature>
        <code>public static Key Enter;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Pause">
      <summary>The Pause key. </summary>
      <signature>
        <code>public static Key Pause;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.CapsLock">
      <summary>The Caps Lock key. </summary>
      <signature>
        <code>public static Key CapsLock;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.KanaMode">
      <summary>The IME Kana mode key. </summary>
      <signature>
        <code>public static Key KanaMode;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.JunjaMode">
      <summary>The IME Junja mode key. </summary>
      <signature>
        <code>public static Key JunjaMode;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.FinalMode">
      <summary>The IME Final mode key. </summary>
      <signature>
        <code>public static Key FinalMode;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.HanjaMode">
      <summary>The IME Hanja mode key. </summary>
      <signature>
        <code>public static Key HanjaMode;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Escape">
      <summary>The ESC key. </summary>
      <signature>
        <code>public static Key Escape;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.ImeConvert">
      <summary>The IME Convert key. </summary>
      <signature>
        <code>public static Key ImeConvert;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.ImeNonConvert">
      <summary>The IME NonConvert key. </summary>
      <signature>
        <code>public static Key ImeNonConvert;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.ImeAccept">
      <summary>The IME Accept key. </summary>
      <signature>
        <code>public static Key ImeAccept;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.ImeModeChange">
      <summary>The IME Mode change request. </summary>
      <signature>
        <code>public static Key ImeModeChange;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Space">
      <summary>The Spacebar key. </summary>
      <signature>
        <code>public static Key Space;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.PageUp">
      <summary>The Page Up key. </summary>
      <signature>
        <code>public static Key PageUp;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.PageDown">
      <summary>The Page Down key. </summary>
      <signature>
        <code>public static Key PageDown;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.End">
      <summary>The End key. </summary>
      <signature>
        <code>public static Key End;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Home">
      <summary>The Home key. </summary>
      <signature>
        <code>public static Key Home;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Left">
      <summary>The Left Arrow key. </summary>
      <signature>
        <code>public static Key Left;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Up">
      <summary>The Up Arrow key. </summary>
      <signature>
        <code>public static Key Up;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Right">
      <summary>The Right Arrow key. </summary>
      <signature>
        <code>public static Key Right;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Down">
      <summary>The Down Arrow key. </summary>
      <signature>
        <code>public static Key Down;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Select">
      <summary>The Select key. </summary>
      <signature>
        <code>public static Key Select;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Print">
      <summary>The Print key. </summary>
      <signature>
        <code>public static Key Print;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Execute">
      <summary>The Execute key. </summary>
      <signature>
        <code>public static Key Execute;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.PrintScreen">
      <summary>The Print Screen key. </summary>
      <signature>
        <code>public static Key PrintScreen;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Insert">
      <summary>The Insert key. </summary>
      <signature>
        <code>public static Key Insert;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Delete">
      <summary>The Delete key. </summary>
      <signature>
        <code>public static Key Delete;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Help">
      <summary>The Help key. </summary>
      <signature>
        <code>public static Key Help;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.D0">
      <summary>The 0 (zero) key. </summary>
      <signature>
        <code>public static Key D0;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.D1">
      <summary>The 1 (one) key. </summary>
      <signature>
        <code>public static Key D1;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.D2">
      <summary>The 2 key. </summary>
      <signature>
        <code>public static Key D2;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.D3">
      <summary>The 3 key. </summary>
      <signature>
        <code>public static Key D3;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.D4">
      <summary>The 4 key. </summary>
      <signature>
        <code>public static Key D4;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.D5">
      <summary>The 5 key. </summary>
      <signature>
        <code>public static Key D5;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.D6">
      <summary>The 6 key. </summary>
      <signature>
        <code>public static Key D6;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.D7">
      <summary>The 7 key. </summary>
      <signature>
        <code>public static Key D7;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.D8">
      <summary>The 8 key. </summary>
      <signature>
        <code>public static Key D8;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.D9">
      <summary>The 9 key. </summary>
      <signature>
        <code>public static Key D9;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.A">
      <summary>The A key. </summary>
      <signature>
        <code>public static Key A;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.B">
      <summary>The B key. </summary>
      <signature>
        <code>public static Key B;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.C">
      <summary>The C key. </summary>
      <signature>
        <code>public static Key C;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.D">
      <summary>The D key. </summary>
      <signature>
        <code>public static Key D;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.E">
      <summary>The E key. </summary>
      <signature>
        <code>public static Key E;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F">
      <summary>The F key. </summary>
      <signature>
        <code>public static Key F;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.G">
      <summary>The G key. </summary>
      <signature>
        <code>public static Key G;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.H">
      <summary>The H key. </summary>
      <signature>
        <code>public static Key H;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.I">
      <summary>The I key. </summary>
      <signature>
        <code>public static Key I;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.J">
      <summary>The J key. </summary>
      <signature>
        <code>public static Key J;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.K">
      <summary>The K key. </summary>
      <signature>
        <code>public static Key K;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.L">
      <summary>The L key. </summary>
      <signature>
        <code>public static Key L;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.M">
      <summary>The M key. </summary>
      <signature>
        <code>public static Key M;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.N">
      <summary>The N key. </summary>
      <signature>
        <code>public static Key N;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.O">
      <summary>The O key. </summary>
      <signature>
        <code>public static Key O;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.P">
      <summary>The P key. </summary>
      <signature>
        <code>public static Key P;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Q">
      <summary>The Q key. </summary>
      <signature>
        <code>public static Key Q;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.R">
      <summary>The R key. </summary>
      <signature>
        <code>public static Key R;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.S">
      <summary>The S key. </summary>
      <signature>
        <code>public static Key S;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.T">
      <summary>The T key. </summary>
      <signature>
        <code>public static Key T;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.U">
      <summary>The U key. </summary>
      <signature>
        <code>public static Key U;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.V">
      <summary>The V key. </summary>
      <signature>
        <code>public static Key V;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.W">
      <summary>The W key. </summary>
      <signature>
        <code>public static Key W;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.X">
      <summary>The X key. </summary>
      <signature>
        <code>public static Key X;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Y">
      <summary>The Y key. </summary>
      <signature>
        <code>public static Key Y;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Z">
      <summary>The Z key. </summary>
      <signature>
        <code>public static Key Z;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.LWin">
      <summary>The left Windows logo key (Microsoft Natural Keyboard). </summary>
      <signature>
        <code>public static Key LWin;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.RWin">
      <summary>The right Windows logo key (Microsoft Natural Keyboard). </summary>
      <signature>
        <code>public static Key RWin;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Apps">
      <summary>The Application key (Microsoft Natural Keyboard). </summary>
      <signature>
        <code>public static Key Apps;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Sleep">
      <summary>The Computer Sleep key. </summary>
      <signature>
        <code>public static Key Sleep;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.NumPad0">
      <summary>The 0 key on the numeric keypad. </summary>
      <signature>
        <code>public static Key NumPad0;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.NumPad1">
      <summary>The 1 key on the numeric keypad. </summary>
      <signature>
        <code>public static Key NumPad1;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.NumPad2">
      <summary>The 2 key on the numeric keypad. </summary>
      <signature>
        <code>public static Key NumPad2;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.NumPad3">
      <summary>The 3 key on the numeric keypad. </summary>
      <signature>
        <code>public static Key NumPad3;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.NumPad4">
      <summary>The 4 key on the numeric keypad. </summary>
      <signature>
        <code>public static Key NumPad4;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.NumPad5">
      <summary>The 5 key on the numeric keypad. </summary>
      <signature>
        <code>public static Key NumPad5;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.NumPad6">
      <summary>The 6 key on the numeric keypad. </summary>
      <signature>
        <code>public static Key NumPad6;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.NumPad7">
      <summary>The 7 key on the numeric keypad. </summary>
      <signature>
        <code>public static Key NumPad7;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.NumPad8">
      <summary>The 8 key on the numeric keypad. </summary>
      <signature>
        <code>public static Key NumPad8;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.NumPad9">
      <summary>The 9 key on the numeric keypad. </summary>
      <signature>
        <code>public static Key NumPad9;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Multiply">
      <summary>The Multiply key. </summary>
      <signature>
        <code>public static Key Multiply;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Add">
      <summary>The Add key. </summary>
      <signature>
        <code>public static Key Add;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Separator">
      <summary>The Separator key. </summary>
      <signature>
        <code>public static Key Separator;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Subtract">
      <summary>The Subtract key. </summary>
      <signature>
        <code>public static Key Subtract;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Decimal">
      <summary>The Decimal key. </summary>
      <signature>
        <code>public static Key Decimal;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Divide">
      <summary>The Divide key. </summary>
      <signature>
        <code>public static Key Divide;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F1">
      <summary>The F1 key. </summary>
      <signature>
        <code>public static Key F1;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F2">
      <summary>The F2 key. </summary>
      <signature>
        <code>public static Key F2;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F3">
      <summary>The F3 key. </summary>
      <signature>
        <code>public static Key F3;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F4">
      <summary>The F4 key. </summary>
      <signature>
        <code>public static Key F4;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F5">
      <summary>The F5 key. </summary>
      <signature>
        <code>public static Key F5;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F6">
      <summary>The F6 key. </summary>
      <signature>
        <code>public static Key F6;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F7">
      <summary>The F7 key. </summary>
      <signature>
        <code>public static Key F7;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F8">
      <summary>The F8 key. </summary>
      <signature>
        <code>public static Key F8;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F9">
      <summary>The F9 key. </summary>
      <signature>
        <code>public static Key F9;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F10">
      <summary>The F10 key. </summary>
      <signature>
        <code>public static Key F10;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F11">
      <summary>The F11 key. </summary>
      <signature>
        <code>public static Key F11;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F12">
      <summary>The F12 key. </summary>
      <signature>
        <code>public static Key F12;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F13">
      <summary>The F13 key. </summary>
      <signature>
        <code>public static Key F13;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F14">
      <summary>The F14 key. </summary>
      <signature>
        <code>public static Key F14;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F15">
      <summary>The F15 key. </summary>
      <signature>
        <code>public static Key F15;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F16">
      <summary>The F16 key. </summary>
      <signature>
        <code>public static Key F16;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F17">
      <summary>The F17 key. </summary>
      <signature>
        <code>public static Key F17;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F18">
      <summary>The F18 key. </summary>
      <signature>
        <code>public static Key F18;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F19">
      <summary>The F19 key. </summary>
      <signature>
        <code>public static Key F19;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F20">
      <summary>The F20 key. </summary>
      <signature>
        <code>public static Key F20;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F21">
      <summary>The F21 key. </summary>
      <signature>
        <code>public static Key F21;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F22">
      <summary>The F22 key. </summary>
      <signature>
        <code>public static Key F22;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F23">
      <summary>The F23 key. </summary>
      <signature>
        <code>public static Key F23;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.F24">
      <summary>The F24 key. </summary>
      <signature>
        <code>public static Key F24;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.NumLock">
      <summary>The Num Lock key. </summary>
      <signature>
        <code>public static Key NumLock;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Scroll">
      <summary>The Scroll Lock key. </summary>
      <signature>
        <code>public static Key Scroll;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.LeftShift">
      <summary>The left Shift key. </summary>
      <signature>
        <code>public static Key LeftShift;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.RightShift">
      <summary>The right Shift key. </summary>
      <signature>
        <code>public static Key RightShift;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.LeftCtrl">
      <summary>The left CTRL key. </summary>
      <signature>
        <code>public static Key LeftCtrl;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.RightCtrl">
      <summary>The right CTRL key. </summary>
      <signature>
        <code>public static Key RightCtrl;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.LeftAlt">
      <summary>The left ALT key. </summary>
      <signature>
        <code>public static Key LeftAlt;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.RightAlt">
      <summary>The right ALT key. </summary>
      <signature>
        <code>public static Key RightAlt;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.BrowserBack">
      <summary>The Browser Back key. </summary>
      <signature>
        <code>public static Key BrowserBack;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.BrowserForward">
      <summary>The Browser Forward key. </summary>
      <signature>
        <code>public static Key BrowserForward;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.BrowserRefresh">
      <summary>The Browser Refresh key. </summary>
      <signature>
        <code>public static Key BrowserRefresh;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.BrowserStop">
      <summary>The Browser Stop key. </summary>
      <signature>
        <code>public static Key BrowserStop;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.BrowserSearch">
      <summary>The Browser Search key. </summary>
      <signature>
        <code>public static Key BrowserSearch;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.BrowserFavorites">
      <summary>The Browser Favorites key. </summary>
      <signature>
        <code>public static Key BrowserFavorites;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.BrowserHome">
      <summary>The Browser Home key. </summary>
      <signature>
        <code>public static Key BrowserHome;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.VolumeMute">
      <summary>The Volume Mute key. </summary>
      <signature>
        <code>public static Key VolumeMute;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.VolumeDown">
      <summary>The Volume Down key. </summary>
      <signature>
        <code>public static Key VolumeDown;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.VolumeUp">
      <summary>The Volume Up key. </summary>
      <signature>
        <code>public static Key VolumeUp;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.MediaNextTrack">
      <summary>The Media Next Track key. </summary>
      <signature>
        <code>public static Key MediaNextTrack;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.MediaPreviousTrack">
      <summary>The Media Previous Track key. </summary>
      <signature>
        <code>public static Key MediaPreviousTrack;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.MediaStop">
      <summary>The Media Stop key. </summary>
      <signature>
        <code>public static Key MediaStop;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.MediaPlayPause">
      <summary>The Media Play Pause key. </summary>
      <signature>
        <code>public static Key MediaPlayPause;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.LaunchMail">
      <summary>The Launch Mail key. </summary>
      <signature>
        <code>public static Key LaunchMail;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.SelectMedia">
      <summary>The Select Media key. </summary>
      <signature>
        <code>public static Key SelectMedia;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.LaunchApplication1">
      <summary>The Launch Application1 key. </summary>
      <signature>
        <code>public static Key LaunchApplication1;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.LaunchApplication2">
      <summary>The Launch Application2 key. </summary>
      <signature>
        <code>public static Key LaunchApplication2;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Oem1">
      <summary>The OEM 1 key. </summary>
      <signature>
        <code>public static Key Oem1;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.OemPlus">
      <summary>The OEM Addition key. </summary>
      <signature>
        <code>public static Key OemPlus;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.OemComma">
      <summary>The OEM Comma key. </summary>
      <signature>
        <code>public static Key OemComma;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.OemMinus">
      <summary>The OEM Minus key. </summary>
      <signature>
        <code>public static Key OemMinus;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.OemPeriod">
      <summary>The OEM Period key. </summary>
      <signature>
        <code>public static Key OemPeriod;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Oem2">
      <summary>The OEM 2 key. </summary>
      <signature>
        <code>public static Key Oem2;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Oem3">
      <summary>The OEM 3 key. </summary>
      <signature>
        <code>public static Key Oem3;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.AbntC1">
      <summary>The ABNT_C1 (Brazilian) key. </summary>
      <signature>
        <code>public static Key AbntC1;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.AbntC2">
      <summary>The ABNT_C2 (Brazilian) key. </summary>
      <signature>
        <code>public static Key AbntC2;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Oem4">
      <summary>The OEM 4 key. </summary>
      <signature>
        <code>public static Key Oem4;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Oem5">
      <summary>The OEM 5 key. </summary>
      <signature>
        <code>public static Key Oem5;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Oem6">
      <summary>The OEM 6 key. </summary>
      <signature>
        <code>public static Key Oem6;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Oem7">
      <summary>The OEM 7 key. </summary>
      <signature>
        <code>public static Key Oem7;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Oem8">
      <summary>The OEM 8 key. </summary>
      <signature>
        <code>public static Key Oem8;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Oem102">
      <summary>The OEM 102 key. </summary>
      <signature>
        <code>public static Key Oem102;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.ImeProcessed">
      <summary>A special key masking the real key being processed by an IME. </summary>
      <signature>
        <code>public static Key ImeProcessed;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.System">
      <summary>A special key masking the real key being processed as a system key. </summary>
      <signature>
        <code>public static Key System;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.OemAttn">
      <summary>The OEM ATTN key. </summary>
      <signature>
        <code>public static Key OemAttn;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.OemFinish">
      <summary>The OEM FINISH key. </summary>
      <signature>
        <code>public static Key OemFinish;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.OemCopy">
      <summary>The OEM COPY key. </summary>
      <signature>
        <code>public static Key OemCopy;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.OemAuto">
      <summary>The OEM AUTO key. </summary>
      <signature>
        <code>public static Key OemAuto;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.OemEnlw">
      <summary>The OEM ENLW key. </summary>
      <signature>
        <code>public static Key OemEnlw;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.OemBackTab">
      <summary>The OEM BACKTAB key. </summary>
      <signature>
        <code>public static Key OemBackTab;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Attn">
      <summary>The ATTN key. </summary>
      <signature>
        <code>public static Key Attn;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.CrSel">
      <summary>The CRSEL key. </summary>
      <signature>
        <code>public static Key CrSel;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.ExSel">
      <summary>The EXSEL key. </summary>
      <signature>
        <code>public static Key ExSel;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.EraseEof">
      <summary>The ERASE EOF key. </summary>
      <signature>
        <code>public static Key EraseEof;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Play">
      <summary>The PLAY key. </summary>
      <signature>
        <code>public static Key Play;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Zoom">
      <summary>The ZOOM key. </summary>
      <signature>
        <code>public static Key Zoom;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.NoName">
      <summary>A constant reserved for future use. </summary>
      <signature>
        <code>public static Key NoName;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.Pa1">
      <summary>The PA1 key. </summary>
      <signature>
        <code>public static Key Pa1;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.OemClear">
      <summary>The OEM Clear key. </summary>
      <signature>
        <code>public static Key OemClear;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.Key.DeadCharProcessed">
      <summary>The key is used with another key to create a single combined character. </summary>
      <signature>
        <code>public static Key DeadCharProcessed;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ModifierKeys">
      <summary>
        Specifies the set of modifier keys.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use the ModifierKeys
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class ModifierKeysSample : Indicator
          {
          private double _mouseBarIndex, _mousePrice;

          [Parameter(DefaultValue = Key.R)]
          public Key HotKey { get; set; }

          [Parameter(DefaultValue = ModifierKeys.Control)]
          public ModifierKeys HotKeyModifier { get; set; }

          protected override void Initialize()
          {
          Chart.MouseMove += Chart_MouseMove;
          Chart.MouseEnter += ResetMouseLocation;
          Chart.MouseLeave += ResetMouseLocation;

          ResetMouseLocation(null);

          Chart.AddHotkey(DrawLines, HotKey, HotKeyModifier);
          }

          private void ResetMouseLocation(ChartMouseEventArgs obj)
          {
          _mouseBarIndex = -1;
          _mousePrice = double.NaN;
          }

          private void Chart_MouseMove(ChartMouseEventArgs obj)
          {
          _mouseBarIndex = obj.BarIndex;
          _mousePrice = obj.YValue;
          }

          private void DrawLines()
          {
          if (_mouseBarIndex == -1 || double.IsNaN(_mousePrice)) return;

          Chart.DrawVerticalLine(_mouseBarIndex.ToString(), (int)_mouseBarIndex, Color.Red);
          Chart.DrawHorizontalLine(_mousePrice.ToString(), _mousePrice, Color.Red);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Utility" />
      <signature>
        <code>public enum ModifierKeys</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ModifierKeys.None">
      <summary>No modifiers are pressed. </summary>
      <signature>
        <code>public static ModifierKeys None;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ModifierKeys.Alt">
      <summary>The ALT key. </summary>
      <signature>
        <code>public static ModifierKeys Alt;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ModifierKeys.Control">
      <summary>The CTRL key. </summary>
      <signature>
        <code>public static ModifierKeys Control;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ModifierKeys.Shift">
      <summary>The SHIFT key. </summary>
      <signature>
        <code>public static ModifierKeys Shift;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TimeFrame">
      <summary>
        Contains supported timeframe values.
      </summary>
      <example>
        <code>
          if (TimeFrame  &lt; TimeFrame.Daily)
          Print("Intraday Trading");
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample indicator shows how to get a time frame from user via parameters and the get that time frame bars
          // Also you can use the pre-defined time frames
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TimeFrameSample : Indicator
          {
          // Getting time frame via a parameter from user
          [Parameter("Time Frame", DefaultValue = "Daily")]
          public TimeFrame UserSelectedTimeFrame { get; set; }

          protected override void Initialize()
          {
          Print("Name: ", UserSelectedTimeFrame.Name, " | Short Name: ", UserSelectedTimeFrame.ShortName);

          // Getting another time frame bars data, using user selected time frame
          var barsBasedOnUserSelectedTimeFrame = MarketData.GetBars(UserSelectedTimeFrame);
          // Getting another time frame bars data, using pre-defined TimeFrames
          var barsBasedOnOtherTimeFrame = MarketData.GetBars(TimeFrame.Day2);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Period" />
      <signature>
        <code>public class TimeFrame</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TimeFrame.Name">
      <summary>
        Returns the name of timeframe
      </summary>
      <signature>
        <code>public string Name { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TimeFrame.ShortName">
      <summary>
        Returns the short name of timeframe
      </summary>
      <signature>
        <code>public string ShortName { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.TimeFrame.Equals(cAlgo.API.TimeFrame)">
      <summary>
        Defines whether the specified object is equal to this instance.
      </summary>
      <param name="other">The other time frame object to compare with current instance</param>
      <signature>
        <code>public bool Equals(TimeFrame other)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.TimeFrame.Equals(System.Object)">
      <summary>
        Defines whether the specified object is equal to this instance.
      </summary>
      <param name="obj">The other object to compare with current instance</param>
      <signature>
        <code>public bool Equals(object obj)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.TimeFrame.GetHashCode">
      <summary>
        Returns the hash code for this instance.
      </summary>
      <signature>
        <code>public int GetHashCode()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.TimeFrame.ToString">
      <summary>
        Returns a <c>System.String</c> that represents this instance.
      </summary>
      <returns>
        A <c>System.String</c> that represents this instance.
      </returns>
      <signature>
        <code>public string ToString()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.TimeFrame.Parse(System.String)">
      <summary>
        It parses a string and if it matched to a timeframe name it returns that time frame otherwise it throws FormatException
      </summary>
      <param name="value">Timeframe name</param>
      <returns>TimeFrame</returns>
      <signature>
        <code>public static TimeFrame Parse(string value)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.TimeFrame.TryParse(System.String,cAlgo.API.TimeFrame@)">
      <summary>
        It parses a string and if it matched to a timeframe name it sets it to the passed timeFrame parameter
      </summary>
      <param name="value">The timeframe name</param>
      <param name="timeFrame">The storage variable for the matching timeframe</param>
      <returns>True if a matching timeframe found otherwise False</returns>
      <signature>
        <code>public static bool TryParse(string value, TimeFrame&amp; timeFrame)</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick">
      <summary>
        Tick / t1
      </summary>
      <signature>
        <code>public static TimeFrame Tick;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick2">
      <summary>
        Tick2 / t2
      </summary>
      <signature>
        <code>public static TimeFrame Tick2;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick3">
      <summary>
        Tick3 / t3
      </summary>
      <signature>
        <code>public static TimeFrame Tick3;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick4">
      <summary>
        Tick4 / t4
      </summary>
      <signature>
        <code>public static TimeFrame Tick4;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick5">
      <summary>
        Tick5 / t5
      </summary>
      <signature>
        <code>public static TimeFrame Tick5;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick6">
      <summary>
        Tick6 / t6
      </summary>
      <signature>
        <code>public static TimeFrame Tick6;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick7">
      <summary>
        Tick7 / t7
      </summary>
      <signature>
        <code>public static TimeFrame Tick7;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick8">
      <summary>
        Tick8 / t8
      </summary>
      <signature>
        <code>public static TimeFrame Tick8;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick9">
      <summary>
        Tick9 / t9
      </summary>
      <signature>
        <code>public static TimeFrame Tick9;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick10">
      <summary>
        Tick10 / t10
      </summary>
      <signature>
        <code>public static TimeFrame Tick10;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick15">
      <summary>
        Tick15 / t15
      </summary>
      <signature>
        <code>public static TimeFrame Tick15;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick20">
      <summary>
        Tick20 / t20
      </summary>
      <signature>
        <code>public static TimeFrame Tick20;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick25">
      <summary>
        Tick25 / t25
      </summary>
      <signature>
        <code>public static TimeFrame Tick25;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick30">
      <summary>
        Tick30 / t30
      </summary>
      <signature>
        <code>public static TimeFrame Tick30;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick40">
      <summary>
        Tick40 / t40
      </summary>
      <signature>
        <code>public static TimeFrame Tick40;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick50">
      <summary>
        Tick50 / t50
      </summary>
      <signature>
        <code>public static TimeFrame Tick50;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick60">
      <summary>
        Tick60 / t60
      </summary>
      <signature>
        <code>public static TimeFrame Tick60;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick80">
      <summary>
        Tick80 / t80
      </summary>
      <signature>
        <code>public static TimeFrame Tick80;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick90">
      <summary>
        Tick90 / t90
      </summary>
      <signature>
        <code>public static TimeFrame Tick90;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick100">
      <summary>
        Tick100 / t100
      </summary>
      <signature>
        <code>public static TimeFrame Tick100;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick150">
      <summary>
        Tick150 / t150
      </summary>
      <signature>
        <code>public static TimeFrame Tick150;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick200">
      <summary>
        Tick200 / t200
      </summary>
      <signature>
        <code>public static TimeFrame Tick200;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick250">
      <summary>
        Tick250 / t250
      </summary>
      <signature>
        <code>public static TimeFrame Tick250;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick300">
      <summary>
        Tick300 / t300
      </summary>
      <signature>
        <code>public static TimeFrame Tick300;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick500">
      <summary>
        Tick500 / t500
      </summary>
      <signature>
        <code>public static TimeFrame Tick500;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick750">
      <summary>
        Tick750 / t750
      </summary>
      <signature>
        <code>public static TimeFrame Tick750;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Tick1000">
      <summary>
        Tick1000 / t1000
      </summary>
      <signature>
        <code>public static TimeFrame Tick1000;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Minute">
      <summary>
        Minute / m1
      </summary>
      <signature>
        <code>public static TimeFrame Minute;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Minute2">
      <summary>
        Minute2 / m2
      </summary>
      <signature>
        <code>public static TimeFrame Minute2;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Minute3">
      <summary>
        Minute3 / m3
      </summary>
      <signature>
        <code>public static TimeFrame Minute3;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Minute4">
      <summary>
        Minute4 / m4
      </summary>
      <signature>
        <code>public static TimeFrame Minute4;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Minute5">
      <summary>
        Minute5 / m5
      </summary>
      <signature>
        <code>public static TimeFrame Minute5;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Minute6">
      <summary>
        Minute6 / m6
      </summary>
      <signature>
        <code>public static TimeFrame Minute6;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Minute7">
      <summary>
        Minute7 / m7
      </summary>
      <signature>
        <code>public static TimeFrame Minute7;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Minute8">
      <summary>
        Minute8 / m8
      </summary>
      <signature>
        <code>public static TimeFrame Minute8;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Minute9">
      <summary>
        Minute9 / m9
      </summary>
      <signature>
        <code>public static TimeFrame Minute9;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Minute10">
      <summary>
        Minute10 / m10
      </summary>
      <signature>
        <code>public static TimeFrame Minute10;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Minute15">
      <summary>
        Minute15 / m15
      </summary>
      <signature>
        <code>public static TimeFrame Minute15;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Minute20">
      <summary>
        Minute20 / m20
      </summary>
      <signature>
        <code>public static TimeFrame Minute20;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Minute30">
      <summary>
        Minute30 / m30
      </summary>
      <signature>
        <code>public static TimeFrame Minute30;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Minute45">
      <summary>
        Minute45 / m45
      </summary>
      <signature>
        <code>public static TimeFrame Minute45;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Hour">
      <summary>
        Hour / h1
      </summary>
      <signature>
        <code>public static TimeFrame Hour;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Hour2">
      <summary>
        Hour2 / h2
      </summary>
      <signature>
        <code>public static TimeFrame Hour2;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Hour3">
      <summary>
        Hour3 / h3
      </summary>
      <signature>
        <code>public static TimeFrame Hour3;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Hour4">
      <summary>
        Hour4 / h4
      </summary>
      <signature>
        <code>public static TimeFrame Hour4;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Hour6">
      <summary>
        Hour6 / h6
      </summary>
      <signature>
        <code>public static TimeFrame Hour6;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Hour8">
      <summary>
        Hour8 / h8
      </summary>
      <signature>
        <code>public static TimeFrame Hour8;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Hour12">
      <summary>
        Hour12 / h12
      </summary>
      <signature>
        <code>public static TimeFrame Hour12;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Daily">
      <summary>
        Daily / D1
      </summary>
      <signature>
        <code>public static TimeFrame Daily;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Day2">
      <summary>
        Day2 / D2
      </summary>
      <signature>
        <code>public static TimeFrame Day2;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Day3">
      <summary>
        Day3 / D3
      </summary>
      <signature>
        <code>public static TimeFrame Day3;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Weekly">
      <summary>
        Weekly / W1
      </summary>
      <signature>
        <code>public static TimeFrame Weekly;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Monthly">
      <summary>
        Monthly / Month1
      </summary>
      <signature>
        <code>public static TimeFrame Monthly;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko1">
      <summary>
        Renko1 / Re1
      </summary>
      <signature>
        <code>public static TimeFrame Renko1;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko2">
      <summary>
        Renko2 / Re2
      </summary>
      <signature>
        <code>public static TimeFrame Renko2;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko3">
      <summary>
        Renko3 / Re3
      </summary>
      <signature>
        <code>public static TimeFrame Renko3;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko4">
      <summary>
        Renko4 / Re4
      </summary>
      <signature>
        <code>public static TimeFrame Renko4;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko5">
      <summary>
        Renko5 / Re5
      </summary>
      <signature>
        <code>public static TimeFrame Renko5;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko6">
      <summary>
        Renko6 / Re6
      </summary>
      <signature>
        <code>public static TimeFrame Renko6;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko7">
      <summary>
        Renko7 / Re7
      </summary>
      <signature>
        <code>public static TimeFrame Renko7;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko8">
      <summary>
        Renko8 / Re8
      </summary>
      <signature>
        <code>public static TimeFrame Renko8;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko9">
      <summary>
        Renko9 / Re9
      </summary>
      <signature>
        <code>public static TimeFrame Renko9;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko10">
      <summary>
        Renko10 / Re10
      </summary>
      <signature>
        <code>public static TimeFrame Renko10;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko15">
      <summary>
        Renko15 / Re15
      </summary>
      <signature>
        <code>public static TimeFrame Renko15;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko20">
      <summary>
        Renko20 / Re20
      </summary>
      <signature>
        <code>public static TimeFrame Renko20;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko25">
      <summary>
        Renko25 / Re25
      </summary>
      <signature>
        <code>public static TimeFrame Renko25;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko30">
      <summary>
        Renko30 / Re30
      </summary>
      <signature>
        <code>public static TimeFrame Renko30;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko35">
      <summary>
        Renko35 / Re35
      </summary>
      <signature>
        <code>public static TimeFrame Renko35;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko40">
      <summary>
        Renko40 / Re40
      </summary>
      <signature>
        <code>public static TimeFrame Renko40;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko45">
      <summary>
        Renko45 / Re45
      </summary>
      <signature>
        <code>public static TimeFrame Renko45;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko50">
      <summary>
        Renko50 / Re50
      </summary>
      <signature>
        <code>public static TimeFrame Renko50;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko100">
      <summary>
        Renko100 / Re100
      </summary>
      <signature>
        <code>public static TimeFrame Renko100;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko150">
      <summary>
        Renko150 / Re150
      </summary>
      <signature>
        <code>public static TimeFrame Renko150;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko200">
      <summary>
        Renko200 / Re200
      </summary>
      <signature>
        <code>public static TimeFrame Renko200;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko300">
      <summary>
        Renko300 / Re300
      </summary>
      <signature>
        <code>public static TimeFrame Renko300;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko500">
      <summary>
        Renko500 / Re500
      </summary>
      <signature>
        <code>public static TimeFrame Renko500;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko800">
      <summary>
        Renko800 / Re800
      </summary>
      <signature>
        <code>public static TimeFrame Renko800;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko1000">
      <summary>
        Renko1000 / Re1000
      </summary>
      <signature>
        <code>public static TimeFrame Renko1000;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Renko2000">
      <summary>
        Renko2000 / Re2000
      </summary>
      <signature>
        <code>public static TimeFrame Renko2000;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range1">
      <summary>
        Range1 / Ra1
      </summary>
      <signature>
        <code>public static TimeFrame Range1;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range2">
      <summary>
        Range2 / Ra2
      </summary>
      <signature>
        <code>public static TimeFrame Range2;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range3">
      <summary>
        Range3 / Ra3
      </summary>
      <signature>
        <code>public static TimeFrame Range3;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range4">
      <summary>
        Range4 / Ra4
      </summary>
      <signature>
        <code>public static TimeFrame Range4;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range5">
      <summary>
        Range5 / Ra5
      </summary>
      <signature>
        <code>public static TimeFrame Range5;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range8">
      <summary>
        Range8 / Ra8
      </summary>
      <signature>
        <code>public static TimeFrame Range8;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range10">
      <summary>
        Range10 / Ra10
      </summary>
      <signature>
        <code>public static TimeFrame Range10;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range20">
      <summary>
        Range20 / Ra20
      </summary>
      <signature>
        <code>public static TimeFrame Range20;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range30">
      <summary>
        Range30 / Ra30
      </summary>
      <signature>
        <code>public static TimeFrame Range30;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range50">
      <summary>
        Range50 / Ra50
      </summary>
      <signature>
        <code>public static TimeFrame Range50;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range80">
      <summary>
        Range80 / Ra80
      </summary>
      <signature>
        <code>public static TimeFrame Range80;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range100">
      <summary>
        Range100 / Ra100
      </summary>
      <signature>
        <code>public static TimeFrame Range100;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range150">
      <summary>
        Range150 / Ra150
      </summary>
      <signature>
        <code>public static TimeFrame Range150;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range200">
      <summary>
        Range200 / Ra200
      </summary>
      <signature>
        <code>public static TimeFrame Range200;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range300">
      <summary>
        Range300 / Ra300
      </summary>
      <signature>
        <code>public static TimeFrame Range300;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range500">
      <summary>
        Range500 / Ra500
      </summary>
      <signature>
        <code>public static TimeFrame Range500;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range800">
      <summary>
        Range800 / Ra800
      </summary>
      <signature>
        <code>public static TimeFrame Range800;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range1000">
      <summary>
        Range1000 / Ra1000
      </summary>
      <signature>
        <code>public static TimeFrame Range1000;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range2000">
      <summary>
        Range2000 / Ra2000
      </summary>
      <signature>
        <code>public static TimeFrame Range2000;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range5000">
      <summary>
        Range5000 / Ra5000
      </summary>
      <signature>
        <code>public static TimeFrame Range5000;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range7500">
      <summary>
        Range7500 / Ra7500
      </summary>
      <signature>
        <code>public static TimeFrame Range7500;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.Range10000">
      <summary>
        Range10000 / Ra10000
      </summary>
      <signature>
        <code>public static TimeFrame Range10000;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinMinute">
      <summary>
        HeikinMinute / Hm1
      </summary>
      <signature>
        <code>public static TimeFrame HeikinMinute;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinMinute2">
      <summary>
        HeikinMinute2 / Hm2
      </summary>
      <signature>
        <code>public static TimeFrame HeikinMinute2;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinMinute3">
      <summary>
        HeikinMinute3 / Hm3
      </summary>
      <signature>
        <code>public static TimeFrame HeikinMinute3;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinMinute4">
      <summary>
        HeikinMinute4 / Hm4
      </summary>
      <signature>
        <code>public static TimeFrame HeikinMinute4;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinMinute5">
      <summary>
        HeikinMinute5 / Hm5
      </summary>
      <signature>
        <code>public static TimeFrame HeikinMinute5;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinMinute6">
      <summary>
        HeikinMinute6 / Hm6
      </summary>
      <signature>
        <code>public static TimeFrame HeikinMinute6;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinMinute7">
      <summary>
        HeikinMinute7 / Hm7
      </summary>
      <signature>
        <code>public static TimeFrame HeikinMinute7;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinMinute8">
      <summary>
        HeikinMinute8 / Hm8
      </summary>
      <signature>
        <code>public static TimeFrame HeikinMinute8;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinMinute9">
      <summary>
        HeikinMinute9 / Hm9
      </summary>
      <signature>
        <code>public static TimeFrame HeikinMinute9;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinMinute10">
      <summary>
        HeikinMinute10 / Hm10
      </summary>
      <signature>
        <code>public static TimeFrame HeikinMinute10;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinMinute15">
      <summary>
        HeikinMinute15 / Hm15
      </summary>
      <signature>
        <code>public static TimeFrame HeikinMinute15;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinMinute20">
      <summary>
        HeikinMinute20 / Hm20
      </summary>
      <signature>
        <code>public static TimeFrame HeikinMinute20;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinMinute30">
      <summary>
        HeikinMinute30 / Hm30
      </summary>
      <signature>
        <code>public static TimeFrame HeikinMinute30;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinMinute45">
      <summary>
        HeikinMinute45 / Hm45
      </summary>
      <signature>
        <code>public static TimeFrame HeikinMinute45;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinHour">
      <summary>
        HeikinHour / Hh1
      </summary>
      <signature>
        <code>public static TimeFrame HeikinHour;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinHour2">
      <summary>
        HeikinHour2 / Hh2
      </summary>
      <signature>
        <code>public static TimeFrame HeikinHour2;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinHour3">
      <summary>
        HeikinHour3 / Hh3
      </summary>
      <signature>
        <code>public static TimeFrame HeikinHour3;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinHour4">
      <summary>
        HeikinHour4 / Hh4
      </summary>
      <signature>
        <code>public static TimeFrame HeikinHour4;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinHour6">
      <summary>
        HeikinHour6 / Hh6
      </summary>
      <signature>
        <code>public static TimeFrame HeikinHour6;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinHour8">
      <summary>
        HeikinHour8 / Hh8
      </summary>
      <signature>
        <code>public static TimeFrame HeikinHour8;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinHour12">
      <summary>
        HeikinHour12 / Hh12
      </summary>
      <signature>
        <code>public static TimeFrame HeikinHour12;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinDaily">
      <summary>
        HeikinDaily / HD1
      </summary>
      <signature>
        <code>public static TimeFrame HeikinDaily;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinDay2">
      <summary>
        HeikinDay2 / HD2
      </summary>
      <signature>
        <code>public static TimeFrame HeikinDay2;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinDay3">
      <summary>
        HeikinDay3 / HD3
      </summary>
      <signature>
        <code>public static TimeFrame HeikinDay3;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinWeekly">
      <summary>
        HeikinWeekly / HW1
      </summary>
      <signature>
        <code>public static TimeFrame HeikinWeekly;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TimeFrame.HeikinMonthly">
      <summary>
        HeikinMonthly / HMonth1
      </summary>
      <signature>
        <code>public static TimeFrame HeikinMonthly;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Robot">
      <summary>
        Base class for all cBots.
      </summary>
      <remarks>
        Provides a convenient framework for creating cBots including methods to create, modify, cancel orders and close positions, methods triggered by each tick and each bar, access to built-in Indicators and more.
      </remarks>
      <example>
        <code>
          namespace cAlgo.Robots
          {
          [Robot]
          public class myCBot : Robot
          {

          protected override void OnStart()
          {
          //This method is called when the cBot is being started, once.
          }

          protected override void OnBar()
          {
          // Called on each incoming Bar.
          }

          protected override void OnTick()
          {
          // Called on each incoming tick.

          }

          protected override void OnError(Error error)
          {
          Print("There has been an Error");
          }

          protected override void OnStop()
          {
          //This method is called when the cBot is being stoped.
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.General" />
      <signature>
        <code>public class Robot : Algo</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.#ctor">
      <summary>
        Robot class constructor
      </summary>
      <signature>
        <code>public Robot()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.OnStart">
      <summary>
        Called when cBot is being started. Override this method to initialize cBot, create nested indicators, etc.
      </summary>
      <example>
        <code>
          protected override void OnStart()
          {
          //This method is invoked when the cBot is started.
          }
        </code>
      </example>
      <signature>
        <code>public void OnStart()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.OnStop">
      <summary>
        Called when cBot is stopped.
      </summary>
      <example>
        <code>
          protected override void OnStop()
          {
          //This method is called when the cBot is stopped
          }
        </code>
      </example>
      <signature>
        <code>public void OnStop()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.OnTick">
      <summary>
        Called on each incoming market tick.
      </summary>
      <example>
        <code>
          protected override void OnTick()
          {
          // Place cBot's Logic here.
          }
        </code>
      </example>
      <signature>
        <code>public void OnTick()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.OnBar">
      <summary>
        Called on each incoming Bar.
      </summary>
      <example>
        <code>
          protected override void OnBar()
          {
          //Place cBot's Logic here.
          }
        </code>
      </example>
      <signature>
        <code>public void OnBar()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.OnBarClosed">
      <summary>
        Called when a new bar is opened; the method is called for the previous (closed) bar.
      </summary>
      <signature>
        <code>public void OnBarClosed()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.OnError(cAlgo.API.Error)">
      <summary>
        Called if there is an error executing a trade operation.
      </summary>
      <param name="error">Error description.</param>
      <example>
        <code>
          protected override void OnError(Error error)
          {
          Print("There has been an Error");
          }
        </code>
      </example>
      <signature>
        <code>public void OnError(Error error)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Robot.Account">
      <summary>
        Contains all Account information
      </summary>
      <example>
        <code>
          double balance = Account.Balance;
          string currency = Account.Currency;
          double equity = Account.Equity;
          double freemargin = Account.FreeMargin;
          double margin = Account.Margin;
          double? marginlevel = Account.MarginLevel;
          int leverage = Account.Leverage;
        </code>
      </example>
      <signature>
        <code>public IAccount Account { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.Stop">
      <summary>
        Stops the cBot. cBot will be completely stopped and will not send/receive any signals.
      </summary>
      <example>
        <code>
          // Will stop the cBot if the balance of the account goes under 1000
          if(Account.Balance &lt; 1000)
          {
          Stop();
          }
        </code>
      </example>
      <signature>
        <code>public void Stop()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Robot.LastResult">
      <summary>
        The latest trade result
      </summary>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 20000, null, 10, null);
          if(LastResult.IsSuccessful)
          Print(LastResult.Position.StopLoss);
        </code>
      </example>
      <signature>
        <code>public TradeResult LastResult { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ToString">
      <summary>
        Returns the cBot class name
      </summary>
      <returns>cBot Type/Class Name</returns>
      <example>
        <code>
          protected override void OnStart()
          {
          Print(ToString());
          }
        </code>
      </example>
      <signature>
        <code>public string ToString()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.GetFitness(cAlgo.API.GetFitnessArgs)">
      <summary>
        Override this method to provide custom fitness value for Optimization
      </summary>
      <returns>Fitness value of your cBot</returns>
      <signature>
        <code>public double GetFitness(GetFitnessArgs args)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double)">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String)">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="label">Label representing the order</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 100000,
          Symbol.Bid - 2*Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 200000,
          Symbol.Bid - 2*Symbol.PipSize, "myLabel");
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 5*Symbol.PipSize, "112", 10, 10);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry, "first order");
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean)">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 100000,
          Symbol.Bid - 2*Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 200000,
          Symbol.Bid - 2*Symbol.PipSize, "myLabel");
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 5*Symbol.PipSize, "112", 10, 10);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry, "first order");
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry, "first order", HasTrailingStop);
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Place a Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 100000,
          Symbol.Bid - 2*Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 200000,
          Symbol.Bid - 2*Symbol.PipSize, "myLabel");
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 5*Symbol.PipSize, "112", 10, 10);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry, "first order");
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry, "first order", HasTrailingStop);
        </code>
      </example>
      <example>
        <code>
          double targetPrice = Symbol.Bid - 5*Symbol.PipSize;
          DateTime expiry = DateTime.Now.AddMinutes(30);
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000,
          targetPrice, "112", 10, 10, expiry, "first order", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="label">Label that represents the order</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="label">Label that represents the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="label">Label that represents the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="label">Label that represents the order</param>
      <param name="stopLossPips">Stop loss in pips from target price</param>
      <param name="takeProfitPips">Take profit in pips from target price</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel");
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10,10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, Symbol.Bid, LimitOrderOnPlaced);
          }
          private void LimitOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Limit order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="label">Label that represents the order</param>
      <param name="stopLossPips">Stop loss in pips from target price</param>
      <param name="takeProfitPips">Take profit in pips from target price</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel");
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10,10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, Symbol.Bid, LimitOrderOnPlaced);
          }
          private void LimitOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Limit order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", HasTrailingStop);
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Target price (or better) at which the order is filled</param>
      <param name="label">Label that represents the order</param>
      <param name="stopLossPips">Stop loss in pips from target price</param>
      <param name="takeProfitPips">Take profit in pips from target price</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel");
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10,10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000, Symbol.Bid, LimitOrderOnPlaced);
          }
          private void LimitOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Limit order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", HasTrailingStop);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceLimitOrderAsync(TradeType.Buy, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ExecuteMarketOrder(TradeType tradeType, string symbolName, double volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double,System.String)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Representing label</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ExecuteMarketOrder(TradeType tradeType, string symbolName, double volume, string label)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ExecuteMarketOrder(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">order comment</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
        </code>
      </example>
      <signature>
        <code>public TradeResult ExecuteMarketOrder(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, string comment)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment", HasTrailingStop);
        </code>
      </example>
      <signature>
        <code>public TradeResult ExecuteMarketOrder(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketOrder(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment", HasTrailingStop);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage,
          "this is a comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeResult ExecuteMarketOrder(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ExecuteMarketOrderAsync(TradeType tradeType, string symbolName, double volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Label representing the order</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ExecuteMarketOrderAsync(TradeType tradeType, string symbolName, double volume, string label, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ExecuteMarketOrderAsync(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">Order comment</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", OnOpened);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ExecuteMarketOrderAsync(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, string comment, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", OnOpened);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", HasTrailingStop, OnOpened);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ExecuteMarketOrderAsync(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", OnOpened);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", HasTrailingStop, OnOpened);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage,
          "this is a comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ExecuteMarketOrderAsync(TradeType tradeType, string symbolName, double volume, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ExecuteMarketRangeOrder(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Representing label</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ExecuteMarketRangeOrder(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ExecuteMarketRangeOrder(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">order comment</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
        </code>
      </example>
      <signature>
        <code>public TradeResult ExecuteMarketRangeOrder(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, string comment)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean)">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment", HasTrailingStop);
        </code>
      </example>
      <signature>
        <code>public TradeResult ExecuteMarketRangeOrder(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Execute a Market Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 10000, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Sell, Symbol, 10000, "Robot1", 10, 10, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage, "this is a comment", HasTrailingStop);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage,
          "this is a comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeResult ExecuteMarketRangeOrder(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ExecuteMarketRangeOrderAsync(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Label representing the order</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ExecuteMarketRangeOrderAsync(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ExecuteMarketRangeOrderAsync(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">Order comment</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", OnOpened);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ExecuteMarketRangeOrderAsync(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, string comment, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", OnOpened);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", HasTrailingStop, OnOpened);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ExecuteMarketRangeOrderAsync(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ExecuteMarketRangeOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Execute a market order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="marketRangePips">The market range (slippage) in Pips</param>
      <param name="basePrice">Base price to calculate relative slippage price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">Event raised when position is opened</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2, "order comment");
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", OnOpened);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrderAsync(TradeType.Buy, Symbol, 10000, "myLabel", 10, 20, 2,
          "order comment", HasTrailingStop, OnOpened);
        </code>
      </example>
      <example>
        <code>
          ExecuteMarketRangeOrder(TradeType.Buy, Symbol, 5000, "myRobot", StopLoss, TakeProfit, Slippage,
          "this is a comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ExecuteMarketRangeOrderAsync(TradeType tradeType, string symbolName, double volume, double marketRangePips, double basePrice, string label, double? stopLossPips, double? takeProfitPips, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.CancelPendingOrder(cAlgo.API.PendingOrder)">
      <summary>
        Cancel a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          CancelPendingOrder(order);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult CancelPendingOrder(PendingOrder pendingOrder)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double)">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Int64)">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <param name="volume">New volume in units for the order</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, long volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double)">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <param name="volume">New volume in units for the order</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean)">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, hasTrailingStop);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 10000, hasTrailingStop, StopTriggerMethod.Trade);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop, StopTriggerMethod.Trade, StopTriggerMethod.Trade);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod? stopOrderTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPendingOrder(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{System.Double})">
      <summary>
        Modify a Pending Order
      </summary>
      <param name="pendingOrder">Pending Order which is affected</param>
      <param name="targetPrice">New target price</param>
      <param name="stopLossPips">New stop loss pips value from target price</param>
      <param name="takeProfitPips">New take profit pips value from target price</param>
      <param name="expirationTime">New order expiration time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrder(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop, StopTriggerMethod.Trade, StopTriggerMethod.Trade, 2);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPendingOrder(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod? stopOrderTriggerMethod, double? stopLimitRangePips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.CancelPendingOrderAsync(cAlgo.API.PendingOrder,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Cancel a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to cancel</param>
      <param name="callback">Method that is called when pending order is cancelled</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          if (PendingOrders.Count &gt; 0)
          {
          var pendingOrder = PendingOrders[0];
          CancelPendingOrderAsync(pendingOrder);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation CancelPendingOrderAsync(PendingOrder pendingOrder, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Int64,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, long volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop, StopTriggerMethod.Trade, StopTriggerMethod.Opposite);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod? stopOrderTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop, StopTriggerMethod.Trade);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, 5, hasTrailingStop);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPendingOrderAsync(cAlgo.API.PendingOrder,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Double,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{cAlgo.API.StopTriggerMethod},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify a Pending Order in asynchronous execution mode
      </summary>
      <param name="pendingOrder">Pending Order to modify</param>
      <param name="targetPrice">New target price at which the order becomes market order</param>
      <param name="stopLossPips">New stop loss</param>
      <param name="takeProfitPips">New take profit</param>
      <param name="expirationTime">New expiry date and time</param>
      <param name="volume">New volume in units for the order</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="callback">Method that is called when order is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, hasTrailingStop);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, hasTrailingStop, StopTriggerMethod.Trade);
          }
        </code>
      </example>
      <example>
        <code>
          bool hasTrailingStop = false;
          foreach (var order in PendingOrders)
          {
          if (order.StopLossPips == null)
          ModifyPendingOrderAsync(order, order.TargetPrice, 10, order.TakeProfitPips,
          order.ExpirationTime, hasTrailingStop, 5, StopTriggerMethod.Trade, StopTriggerMethod.Opposite);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPendingOrderAsync(PendingOrder pendingOrder, double targetPrice, double? stopLossPips, double? takeProfitPips, DateTime? expirationTime, double volume, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod? stopOrderTriggerMethod, double? stopLimitRangePips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ReversePosition(cAlgo.API.Position)">
      <summary>
        Modify the direction of trade at position
      </summary>
      <param name="position">Position which is affected</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          ReversePosition(position);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ReversePosition(Position position)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPosition(cAlgo.API.Position,System.Double)">
      <summary>
        Modify the volume of a position
      </summary>
      <param name="position">Position which is affected</param>
      <param name="volume">Volume (in units) of Trade</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          ModifyPosition(position, 20000);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPosition(Position position, double volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ReversePosition(cAlgo.API.Position,System.Double)">
      <summary>
        Modify the direction of trade and volume of a position
      </summary>
      <param name="position">Position which is affected</param>
      <param name="volume">Volume (in units) of Trade</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          ReversePosition(position, 20000);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ReversePosition(Position position, double volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPosition(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Modify the protection of a position
      </summary>
      <param name="position">Position which is affected</param>
      <param name="stopLoss">New stop loss price</param>
      <param name="takeProfit">New take profit price</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          ModifyPosition(position, stopLoss,  takeProfit);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPosition(Position position, double? stopLoss, double? takeProfit)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPosition(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean)">
      <summary>
        Modify the protection of a position
      </summary>
      <param name="position">Position which is affected</param>
      <param name="stopLoss">New stop loss price</param>
      <param name="takeProfit">New take profit price</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          ModifyPosition(position, stopLoss,  takeProfit);
          }
        </code>
      </example>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          bool hasTrailingStop = true;
          ModifyPosition(position, stopLoss,  takeProfit, hasTrailingStop);
          Print("Position was modified, has Trailing Stop = {0}", result.Position.HasTrailingStop);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPosition(Position position, double? stopLoss, double? takeProfit, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPosition(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Modify the protection of a position
      </summary>
      <param name="position">Position which is affected</param>
      <param name="stopLoss">New stop loss price</param>
      <param name="takeProfit">New take profit price</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          ModifyPosition(position, stopLoss,  takeProfit);
          }
        </code>
      </example>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          bool hasTrailingStop = true;
          ModifyPosition(position, stopLoss,  takeProfit, hasTrailingStop);
          Print("Position was modified, has Trailing Stop = {0}", result.Position.HasTrailingStop);
          }
        </code>
      </example>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null )
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          bool hasTrailingStop = true;
          ModifyPosition(position, stopLoss,  takeProfit, hasTrailingStop, StopTriggerMethod.Opposite);
          Print("Position was modified, stop loss trigger method = {0}", result.Position.StopLossTriggerMethod);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult ModifyPosition(Position position, double? stopLoss, double? takeProfit, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ClosePosition(cAlgo.API.Position)">
      <summary>
        Close a position
      </summary>
      <param name="position">Position to close</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult ClosePosition(Position position)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ClosePosition(cAlgo.API.Position,System.Int64)">
      <summary>
        Close a position
      </summary>
      <param name="position">Position to close</param>
      <param name="volume">Volume which is closed</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ClosePosition(position);
        </code>
      </example>
      <example>
        <code>
          if (position.Volume &gt;= 20000)
          ClosePosition(position, 10000);
        </code>
      </example>
      <signature>
        <code>public TradeResult ClosePosition(Position position, long volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ClosePosition(cAlgo.API.Position,System.Double)">
      <summary>
        Close a position
      </summary>
      <param name="position">Position to close</param>
      <param name="volume">Volume which is closed</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          ClosePosition(position);
        </code>
      </example>
      <example>
        <code>
          if (position.Volume &gt;= 20000)
          ClosePosition(position, 10000);
        </code>
      </example>
      <signature>
        <code>public TradeResult ClosePosition(Position position, double volume)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ClosePositionAsync(cAlgo.API.Position,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Close a position in asynchronous execution mode
      </summary>
      <param name="position">The position to close</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation ClosePositionAsync(Position position, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ClosePositionAsync(cAlgo.API.Position,System.Int64,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Close a position in asynchronous execution mode
      </summary>
      <param name="position">The position to close</param>
      <param name="volume">The volume to close</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ClosePositionAsync(position);
        </code>
      </example>
      <example>
        <code>
          if (position.Volume &gt;= 20000)
          ClosePositionAsync(position, 10000);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ClosePositionAsync(Position position, long volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ClosePositionAsync(cAlgo.API.Position,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Close a position in asynchronous execution mode
      </summary>
      <param name="position">The position to close</param>
      <param name="volume">The volume to close</param>
      <param name="callback">The action when the position closes</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          ClosePositionAsync(position);
        </code>
      </example>
      <example>
        <code>
          if (position.Volume &gt;= 20000)
          ClosePositionAsync(position, 10000);
        </code>
      </example>
      <signature>
        <code>public TradeOperation ClosePositionAsync(Position position, double volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ReversePositionAsync(cAlgo.API.Position,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify Position in asynchronous execution mode
      </summary>
      <param name="position">Position to modify</param>
      <param name="callback">Method that is called when position is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          ReversePositionAsync(position, TradeType.Sell);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ReversePositionAsync(Position position, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPositionAsync(cAlgo.API.Position,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify Position in asynchronous execution mode
      </summary>
      <param name="position">Position to modify</param>
      <param name="volume">New volume</param>
      <param name="callback">Method that is called when position is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          ModifyPositionAsync(position, 20000);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPositionAsync(Position position, double volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ReversePositionAsync(cAlgo.API.Position,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify Position in asynchronous execution mode
      </summary>
      <param name="position">Position to modify</param>
      <param name="volume">New volume</param>
      <param name="callback">Method that is called when position is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          ReversePositionAsync(position, 20000);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ReversePositionAsync(Position position, double volume, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPositionAsync(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify Position in asynchronous execution mode
      </summary>
      <param name="position">Position to modify</param>
      <param name="stopLoss">New stop loss price</param>
      <param name="takeProfit">New take profit price</param>
      <param name="callback">Method that is called when position is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          ModifyPositionAsync(position, stopLoss,  takeProfit);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPositionAsync(Position position, double? stopLoss, double? takeProfit, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPositionAsync(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify Position in asynchronous execution mode
      </summary>
      <param name="position">Position to modify</param>
      <param name="stopLoss">New stop loss price</param>
      <param name="takeProfit">New take profit price</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">Method that is called when position is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          ModifyPositionAsync(position, stopLoss,  takeProfit);
          }
        </code>
      </example>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          bool hasTrailingStop = true;
          ModifyPositionAsync(position, stopLoss,  takeProfit, hasTrailingStop);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPositionAsync(Position position, double? stopLoss, double? takeProfit, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.ModifyPositionAsync(cAlgo.API.Position,System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Modify Position in asynchronous execution mode
      </summary>
      <param name="position">Position to modify</param>
      <param name="stopLoss">New stop loss price</param>
      <param name="takeProfit">New take profit price</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">Method that is called when position is modified</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          ModifyPositionAsync(position, stopLoss,  takeProfit);
          }
        </code>
      </example>
      <example>
        <code>
          var position = Positions.Find("myLabel", Symbol, TradeType.Buy);
          if (position != null)
          {
          double? stopLoss = Symbol.Ask- 10*Symbol.PipSize;
          double? takeProfit = Symbol.Ask + 10 * Symbol.PipSize;
          bool hasTrailingStop = true;
          ModifyPositionAsync(position, stopLoss,  takeProfit, hasTrailingStop);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation ModifyPositionAsync(Position position, double? stopLoss, double? takeProfit, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double)">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String)">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean)">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopLimitOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod)">
      <summary>
        Place a Stop Limit Order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopLimitOrder</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopLimitOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod stopOrderTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopLimitOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place Stop Limit order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price (or better) at which order is filled</param>
      <param name="stopLimitRangePips">Maximum distance for order execution from target price</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopLimitOrder</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopLimitOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, double stopLimitRangePips, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod stopOrderTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double)">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String)">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime})">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <returns>Trade Result</returns>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String)">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask,
          "myStopOrder");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20);
        </code>
      </example>
      <example>
        <code>
          DateTime expiration = Server.Time.AddHours(1);
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, expiration);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment");
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean)">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask,
          "myStopOrder");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20);
        </code>
      </example>
      <example>
        <code>
          DateTime expiration = Server.Time.AddHours(1);
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, expiration);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment", HasTrailingStop);
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod})">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask,
          "myStopOrder");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20);
        </code>
      </example>
      <example>
        <code>
          DateTime expiration = Server.Time.AddHours(1);
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, expiration);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment", HasTrailingStop);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopOrder(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod)">
      <summary>
        Place a stop order
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume (in units) of trade</param>
      <param name="targetPrice">Price at which order becomes a market order</param>
      <param name="label">Representing label</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
      <returns>Trade Result</returns>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Buy, Symbol, 10000, Symbol.Ask,
          "myStopOrder");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20);
        </code>
      </example>
      <example>
        <code>
          DateTime expiration = Server.Time.AddHours(1);
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, expiration);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment");
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment", HasTrailingStop);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrder(TradeType.Sell, Symbol, 20000, Symbol.Ask,
          "myStopOrder", 20, 20, null, "my comment", HasTrailingStop, StopTriggerMethod.Trade);
        </code>
      </example>
      <signature>
        <code>public TradeResult PlaceStopOrder(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod stopOrderTriggerMethod)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          bool hasTrailingStop = true;
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", hasTrailingStop);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed with HasTrailingStop: {0}", tradeResult.PendingOrder.HasTrailingStop);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          bool hasTrailingStop = true;
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", hasTrailingStop);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed with HasTrailingStop: {0}", tradeResult.PendingOrder.HasTrailingStop);
          }
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          bool hasTrailingStop = true;
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry,
          "order comment", hasTrailingStop, StopTriggerMethod.Trade);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed with stop trigger method: {0}", tradeResult.PendingOrder.StopTriggerMethod);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Robot.PlaceStopOrderAsync(cAlgo.API.TradeType,System.String,System.Double,System.Double,System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Boolean,System.Nullable{cAlgo.API.StopTriggerMethod},cAlgo.API.StopTriggerMethod,System.Action{cAlgo.API.TradeResult})">
      <summary>
        Place stop order in asynchronous execution mode
      </summary>
      <param name="tradeType">Direction of trade</param>
      <param name="symbolName">Symbol name of trade</param>
      <param name="volume">Volume of trade</param>
      <param name="targetPrice">Price at which the order becomes market order</param>
      <param name="label">Label representing the order</param>
      <param name="stopLossPips">Stop loss in pips</param>
      <param name="takeProfitPips">Take profit in pips</param>
      <param name="expiration">Order expiry date and time</param>
      <param name="comment">Order comment</param>
      <param name="hasTrailingStop">Enable/disable TrailingStop for position</param>
      <param name="stopLossTriggerMethod">Trigger method for position's StopLoss</param>
      <param name="stopOrderTriggerMethod">Determines how pending order will be triggered in case it's a StopOrder</param>
      <param name="callback">Action when order is placed</param>
      <returns>Trade Operation</returns>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize);
        </code>
      </example>
      <example>
        <code>
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000, Symbol.Bid - 5* Symbol.PipSize, "myLabel", 10, 10);
        </code>
      </example>
      <example>
        <code>
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment");
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          PlaceStopOrderAsync(TradeType.Buy, Symbol, 20000, Symbol.Ask, StopOrderOnPlaced);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed {0}", tradeResult.PendingOrder.Label);
          }
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          bool hasTrailingStop = true;
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry, "order comment", hasTrailingStop);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed with HasTrailingStop: {0}", tradeResult.PendingOrder.HasTrailingStop);
          }
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          bool hasTrailingStop = true;
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry,
          "order comment", hasTrailingStop, StopTriggerMethod.Trade);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed with stop loss trigger method: {0}", tradeResult.PendingOrder.StopLossTriggerMethod);
          }
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          bool hasTrailingStop = true;
          StopTriggerMethod stopLossTriggerMethod = StopTriggerMethod.Trade;
          StopTriggerMethod stopOrderTriggerMethod = StopTriggerMethod.Trade;
          DateTime? expiry = DateTime.Now.AddHours(1);
          PlaceStopOrderAsync(TradeType.Sell, Symbol, 10000,
          Symbol.Bid - 10* Symbol.PipSize,"myLabel", 10, 10, expiry,
          "order comment", hasTrailingStop, stopLossTriggerMethod, stopOrderTriggerMethod);
          }
          private void StopOrderOnPlaced(TradeResult tradeResult)
          {
          Print("Stop order placed with stop order trigger method: {0}", tradeResult.PendingOrder.StopOrderTriggerMethod);
          }
        </code>
      </example>
      <signature>
        <code>public TradeOperation PlaceStopOrderAsync(TradeType tradeType, string symbolName, double volume, double targetPrice, string label, double? stopLossPips, double? takeProfitPips, DateTime? expiration, string comment, bool hasTrailingStop, StopTriggerMethod? stopLossTriggerMethod, StopTriggerMethod stopOrderTriggerMethod, Action&lt;TradeResult&gt; callback)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.RoundingMode">
      <summary>
        The rounding mode for normalizing trade volume.
      </summary>
      <example>
        <code>
          volume = Symbol.NormalizeVolume(volume, RoundingMode.Down);
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to normalize volume based on different rounding modes
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class NormalizingVolumeSample : Indicator
          {
          [Parameter("Volume Unit", DefaultValue = VolumeUnit.Units)]
          public VolumeUnit VolumeUnit { get; set; }

          [Parameter("Volume Amount", DefaultValue = 0.01)]
          public double VolumeAmount { get; set; }

          [Parameter("Rounding Mode", DefaultValue = RoundingMode.ToNearest)]
          public RoundingMode RoundingMode { get; set; }

          protected override void Initialize()
          {
          double volumeInUnits = VolumeUnit == VolumeUnit.Units ? VolumeAmount : Symbol.QuantityToVolumeInUnits(VolumeAmount);

          double normalizedVolume = Symbol.NormalizeVolumeInUnits(volumeInUnits, RoundingMode);

          Print(normalizedVolume);
          }

          public override void Calculate(int index)
          {
          }
          }

          public enum VolumeUnit
          {
          Units,
          Lots
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataSymbols" />
      <signature>
        <code>public enum RoundingMode</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.RoundingMode.ToNearest">
      <summary>
        Round value to the nearest tradable volume.
      </summary>
      <example>
        <code>
          var volume = Symbol.NormalizeVolume(calculatedVolume, RoundingMode.ToNearest);
        </code>
      </example>
      <signature>
        <code>public static RoundingMode ToNearest;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.RoundingMode.Down">
      <summary>
        Round value down to tradable volume.
      </summary>
      <example>
        <code>
          var volume = Symbol.NormalizeVolume(calculatedVolume, RoundingMode.Down);
        </code>
      </example>
      <signature>
        <code>public static RoundingMode Down;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.RoundingMode.Up">
      <summary>
        Round value up to tradable volume.
      </summary>
      <example>
        <code>
          var volume = Symbol.NormalizeVolume(calculatedVolume, RoundingMode.Up);
        </code>
      </example>
      <signature>
        <code>public static RoundingMode Up;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.RunningMode">
      <summary>
        Defines if a cBot is running in real time, in the silent backtesting mode, in the visual backtesting mode, or in the optimization mode.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo.Robots
          {
          // This sample shows how to use the RunningMode property of your robot
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class RunningModeSample : Robot
          {
          protected override void OnStart()
          {
          switch (RunningMode)
          {
          case RunningMode.RealTime:
          // If the robot is running on real time market condition
          break;

          case RunningMode.SilentBacktesting:
          // If the robot is running on backtest and the visual mode is off
          break;

          case RunningMode.VisualBacktesting:
          // If the robot is running on backtest and the visual mode is on
          break;

          case RunningMode.Optimization:
          // If the robot is running on optimizer
          break;
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Application" />
      <signature>
        <code>public enum RunningMode</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.RunningMode.RealTime">
      <summary>
        The cBot is running in real time.
      </summary>
      <signature>
        <code>public static RunningMode RealTime;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.RunningMode.SilentBacktesting">
      <summary>
        The cBot is running in the silent backtesting mode.
      </summary>
      <signature>
        <code>public static RunningMode SilentBacktesting;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.RunningMode.VisualBacktesting">
      <summary>
        The cBot is running in the visual backtesting mode.
      </summary>
      <signature>
        <code>public static RunningMode VisualBacktesting;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.RunningMode.Optimization">
      <summary>
        The cBot is running in the optimization mode.
      </summary>
      <signature>
        <code>public static RunningMode Optimization;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.SvgIcon">
      <summary>
        Represents a SVG format vector image / icon.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.General" />
      <signature>
        <code>public class SvgIcon</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.SvgIcon.#ctor(System.String)">
      <summary>
        Creates an SVG vector from raw SVG XML string.
      </summary>
      <param name="svgXml">SVG XML</param>
      <signature>
        <code>public SvgIcon(string svgXml)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ProportionalAmountType">
      <summary>
        Defines types of amounts you can use for using symbol volume methods.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataSymbols" />
      <signature>
        <code>public enum ProportionalAmountType</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ProportionalAmountType.Balance">
      <summary>
        Account Balance.
      </summary>
      <signature>
        <code>public static ProportionalAmountType Balance;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ProportionalAmountType.Equity">
      <summary>
        Account Equity.
      </summary>
      <signature>
        <code>public static ProportionalAmountType Equity;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.SymbolCommissionType">
      <summary>
        Defines symbol commission types.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataSymbols" />
      <signature>
        <code>public enum SymbolCommissionType</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.SymbolCommissionType.UsdPerMillionUsdVolume">
      <summary>
        Commission is in USD per millions USD volume.
      </summary>
      <signature>
        <code>public static SymbolCommissionType UsdPerMillionUsdVolume;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.SymbolCommissionType.UsdPerOneLot">
      <summary>
        Commission is in USD per one symbol lot.
      </summary>
      <signature>
        <code>public static SymbolCommissionType UsdPerOneLot;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.SymbolCommissionType.PercentageOfTradingVolume">
      <summary>
        Commission is in Percentage of trading volume.
      </summary>
      <signature>
        <code>public static SymbolCommissionType PercentageOfTradingVolume;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.SymbolCommissionType.QuoteCurrencyPerOneLot">
      <summary>
        Commission is in symbol quote asset / currency per one lot.
      </summary>
      <signature>
        <code>public static SymbolCommissionType QuoteCurrencyPerOneLot;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.SymbolInfo">
      <summary>
        Represents the Symbol interface.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using cAlgo.API.Internals;
          using System;

          namespace cAlgo
          {
          /// <summary>
            /// This sample indicator shows how to get a symbol data
            ///
          </summary>
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class SymbolInfoSample : Indicator
          {
          private TextBlock _timeTillOpenTextBlock;
          private TextBlock _timeTillCloseTextBlock;
          private TextBlock _isOpenedTextBlock;
          private SymbolInfo _symbol;

          [Parameter("Use Current Symbol", DefaultValue = true)]
          public bool UseCurrentSymbol { get; set; }

          [Parameter("Other Symbol Name", DefaultValue = "GBPUSD")]
          public string OtherSymbolName { get; set; }

          protected override void Initialize()
          {
          var grid = new Grid(44, 2)
          {
          BackgroundColor = Color.Gold,
          Opacity = 0.6,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center
          };

          var style = new Style();

          style.Set(ControlProperty.Padding, 1);
          style.Set(ControlProperty.Margin, 2);
          style.Set(ControlProperty.BackgroundColor, Color.Black);
          style.Set(ControlProperty.FontSize, 8);

          _symbol = Symbols.GetSymbolInfo(UseCurrentSymbol ? SymbolName : OtherSymbolName);

          grid.AddChild(new TextBlock
          {
          Text = "Symbol Info",
          Style = style,
          HorizontalAlignment = HorizontalAlignment.Center
          }, 0, 0, 1, 2);

          grid.AddChild(new TextBlock
          {
          Text = "Name",
          Style = style
          }, 1, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.Name,
          Style = style
          }, 1, 1);

          grid.AddChild(new TextBlock
          {
          Text = "ID",
          Style = style
          }, 2, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.Id.ToString(),
          Style = style
          }, 2, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Digits",
          Style = style
          }, 3, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.Digits.ToString(),
          Style = style
          }, 3, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Description",
          Style = style
          }, 4, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.Description,
          Style = style
          }, 4, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Lot Size",
          Style = style
          }, 5, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.LotSize.ToString(),
          Style = style
          }, 5, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Pip Size",
          Style = style
          }, 6, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.PipSize.ToString(),
          Style = style
          }, 6, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Pip Value",
          Style = style
          }, 7, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.PipValue.ToString(),
          Style = style
          }, 7, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Tick Size",
          Style = style
          }, 8, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.TickSize.ToString(),
          Style = style
          }, 8, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Tick Value",
          Style = style
          }, 9, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.TickValue.ToString(),
          Style = style
          }, 9, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Volume In Units Max",
          Style = style
          }, 10, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.VolumeInUnitsMax.ToString(),
          Style = style
          }, 10, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Volume In Units Min",
          Style = style
          }, 11, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.VolumeInUnitsMin.ToString(),
          Style = style
          }, 11, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Volume In Units Step",
          Style = style
          }, 12, 0);
          grid.AddChild(new TextBlock
          {
          Text = _symbol.VolumeInUnitsStep.ToString(),
          Style = style
          }, 12, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Time Till Open",
          Style = style
          }, 18, 0);

          _timeTillOpenTextBlock = new TextBlock
          {
          Text = _symbol.MarketHours.TimeTillOpen().ToString(),
          Style = style
          };

          grid.AddChild(_timeTillOpenTextBlock, 18, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Time Till Close",
          Style = style
          }, 19, 0);

          _timeTillCloseTextBlock = new TextBlock
          {
          Text = _symbol.MarketHours.TimeTillClose().ToString(),
          Style = style
          };

          grid.AddChild(_timeTillCloseTextBlock, 19, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Is Opened",
          Style = style
          }, 20, 0);

          _isOpenedTextBlock = new TextBlock
          {
          Text = _symbol.MarketHours.IsOpened().ToString(),
          Style = style
          };

          grid.AddChild(_isOpenedTextBlock, 20, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Trading Sessions #",
          Style = style
          }, 21, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.MarketHours.Sessions.Count.ToString(),
          Style = style
          }, 21, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Trading Session Week Days",
          Style = style
          }, 22, 0);

          var weekDays = string.Empty;

          for (var iSession = 0; iSession &lt; _symbol.MarketHours.Sessions.Count; iSession++)
          {
          var currentSessionWeekDays = string.Format("{0}({1})-{2}({3})", _symbol.MarketHours.Sessions[iSession].StartDay, _symbol.MarketHours.Sessions[iSession].StartTime, _symbol.MarketHours.Sessions[iSession].EndDay, _symbol.MarketHours.Sessions[iSession].EndTime);

          weekDays = iSession == 0 ? currentSessionWeekDays : string.Format("{0}, {1}", weekDays, currentSessionWeekDays);
          }

          grid.AddChild(new TextBlock
          {
          Text = weekDays,
          Style = style
          }, 22, 1);

          grid.AddChild(new TextBlock
          {
          Text = "Leverage Tier",
          Style = style
          }, 23, 0);

          var leverageTiers = string.Empty;

          for (var iLeverageTier = 0; iLeverageTier &lt; _symbol.DynamicLeverage.Count; iLeverageTier++)
          {
          var currentLeverageTiers = string.Format("Volume up to {0} is {1}", _symbol.DynamicLeverage[iLeverageTier].Volume, _symbol.DynamicLeverage[iLeverageTier].Leverage);

          leverageTiers = iLeverageTier == 0 ? currentLeverageTiers : string.Format("{0}, {1}", leverageTiers, currentLeverageTiers);
          }

          grid.AddChild(new TextBlock
          {
          Text = leverageTiers,
          Style = style
          }, 23, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.BaseAsset),
          Style = style
          }, 24, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.BaseAsset.Name,
          Style = style
          }, 24, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.QuoteAsset),
          Style = style
          }, 25, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.QuoteAsset.Name,
          Style = style
          }, 25, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.PnLConversionFeeRate),
          Style = style
          }, 26, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.PnLConversionFeeRate.ToString(),
          Style = style
          }, 26, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.Commission),
          Style = style
          }, 27, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.Commission.ToString(),
          Style = style
          }, 27, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.CommissionType),
          Style = style
          }, 28, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.CommissionType.ToString(),
          Style = style
          }, 28, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.MinCommission),
          Style = style
          }, 29, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.MinCommission.ToString(),
          Style = style
          }, 29, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.MinCommissionAsset),
          Style = style
          }, 30, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.MinCommissionAsset.Name,
          Style = style
          }, 30, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.MinCommissionType),
          Style = style
          }, 31, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.MinCommissionType.ToString(),
          Style = style
          }, 31, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.AdministrativeCharge3DaysRollover),
          Style = style
          }, 32, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.AdministrativeCharge3DaysRollover.ToString(),
          Style = style
          }, 32, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.AdministrativeCharge),
          Style = style
          }, 33, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.AdministrativeCharge.ToString(),
          Style = style
          }, 33, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.GracePeriod),
          Style = style
          }, 34, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.GracePeriod.ToString(),
          Style = style
          }, 34, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.SwapLong),
          Style = style
          }, 35, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.SwapLong.ToString(),
          Style = style
          }, 35, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.SwapShort),
          Style = style
          }, 36, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.SwapShort.ToString(),
          Style = style
          }, 36, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.Swap3DaysRollover),
          Style = style
          }, 37, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.Swap3DaysRollover.ToString(),
          Style = style
          }, 37, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.SwapCalculationType),
          Style = style
          }, 38, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.SwapCalculationType.ToString(),
          Style = style
          }, 38, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.IsTradingEnabled),
          Style = style
          }, 39, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.IsTradingEnabled.ToString(),
          Style = style
          }, 39, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.TradingMode),
          Style = style
          }, 40, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.TradingMode.ToString(),
          Style = style
          }, 40, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.MinDistanceType),
          Style = style
          }, 41, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.MinDistanceType.ToString(),
          Style = style
          }, 41, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.MinTakeProfitDistance),
          Style = style
          }, 42, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.MinTakeProfitDistance.ToString(),
          Style = style
          }, 42, 1);

          grid.AddChild(new TextBlock
          {
          Text = nameof(_symbol.MinStopLossDistance),
          Style = style
          }, 43, 0);

          grid.AddChild(new TextBlock
          {
          Text = _symbol.MinStopLossDistance.ToString(),
          Style = style
          }, 43, 1);

          Chart.AddControl(grid);

          Timer.Start(TimeSpan.FromSeconds(1));
          }

          protected override void OnTimer()
          {
          _timeTillOpenTextBlock.Text = _symbol.MarketHours.TimeTillOpen().ToString();
          _timeTillCloseTextBlock.Text = _symbol.MarketHours.TimeTillClose().ToString();
          _isOpenedTextBlock.Text = _symbol.MarketHours.IsOpened().ToString();
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <remarks>
      </remarks>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataSymbols" />
    </member>
    <member name="P:cAlgo.API.SymbolInfo.Id">
      <summary>
        Gets the current symbol ID.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.Name">
      <summary>
        Gets the current symbol name.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.Description">
      <summary>
        Gets the current symbol description.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.LotSize">
      <summary>
        Gets the lot size.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.TickValue">
      <summary>
        Gets the tick value.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.TickSize">
      <summary>
        Gets the tick size.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.PipValue">
      <summary>
        Gets the pip value.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.PipSize">
      <summary>
        Gets the pip size.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.Digits">
      <summary>
        Gets the symbol digits.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.VolumeInUnitsStep">
      <summary>
        Gets the step volume in units.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.VolumeInUnitsMax">
      <summary>
        Gets the maximum units value.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.VolumeInUnitsMin">
      <summary>
        Gets the minimum units value.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.DynamicLeverage">
      <summary>
        Gets the symbol dynamic leverage.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.MarketHours">
      <summary>
        Gets the symbol market hours.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.BaseAsset">
      <summary>
        Gets the symbol base asset.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.QuoteAsset">
      <summary>
        Gets the symbol quote asset.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.PnLConversionFeeRate">
      <summary>
        Gets the symbol profit and loss conversion fee rate.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.Commission">
      <summary>
        Gets the amount of base commission for the symbol.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.CommissionType">
      <summary>
        Gets the symbol base commission calculation type.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.MinCommission">
      <summary>
        Gets the minimum amount of commission for the symbol.
        This is the amount of commission that will be paid by trader for any trade.
        Check MinCommissionType for interpretation of MinCommission value.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.MinCommissionAsset">
      <summary>
        Gets the symbol minimum commission asset.
        If MinCommissionType is set to Asset then you can use this property to get that asset.
        The MinCommission value will be converted from MinCommissionAsset to account deposit asset at the moment of trade.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.MinCommissionType">
      <summary>
        Gets the symbol minimum commission type.
        Use this property to interpret MinCommission value.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.AdministrativeCharge3DaysRollover">
      <summary>
        Gets the Day of the week (in UTC) when Administrative Fee charge amount will be tripled.
        Only applicable for SWAP free trading accounts.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.AdministrativeCharge">
      <summary>
        Gets symbol administrative charge.
        Administrative fee will be charged instead of SWAP if account is marked as SWAP free.
        Only applicable for SWAP free trading accounts.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.GracePeriod">
      <summary>
        Gets symbol grace period.
        This is the number of days free of Administrative fee from the time of opening a position.
        Only applicable for SWAP free trading accounts.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.SwapLong">
      <summary>
        Gets the SWAP charge for long positions of the symbol.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.SwapShort">
      <summary>
        Gets the SWAP charge for short positions of the symbol.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.Swap3DaysRollover">
      <summary>
        Gets the Day of the week when Symbol SWAP charge amount will be tripled.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.SwapCalculationType">
      <summary>
        Gets the symbol SWAP calculation type.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.IsTradingEnabled">
      <summary>
        Gets If trading is enabled or not for the symbol.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.TradingMode">
      <summary>
        Gets symbol trading mode.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.MinDistanceType">
      <summary>
        Gets the symbol minimum distances type.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.MinTakeProfitDistance">
      <summary>
        Gets symbol minimum take profit distance.
        Use MinDistanceType for interpretation.
      </summary>
    </member>
    <member name="P:cAlgo.API.SymbolInfo.MinStopLossDistance">
      <summary>
        Gets symbol minimum stop loss distance.
        Use MinDistanceType for interpretation.
      </summary>
    </member>
    <member name="M:cAlgo.API.SymbolInfo.NormalizeVolumeInUnits(System.Double)">
      <summary>
        Rounds the volume to the amount suitable for a trade.
      </summary>
      <param name="volume">The symbol volume in units to normalize</param>
      <returns>
      </returns>
      <remarks>
      </remarks>
    </member>
    <member name="M:cAlgo.API.SymbolInfo.NormalizeVolumeInUnits(System.Double,cAlgo.API.RoundingMode)">
      <summary>
        Rounds the volume to the amount suitable for a trade.
      </summary>
      <param name="volume">The symbol volume in units to normalize</param>
      <param name="roundingMode">The type of rounding to use for normalizing the volume</param>
      <returns>
      </returns>
      <remarks>
      </remarks>
    </member>
    <member name="M:cAlgo.API.SymbolInfo.QuantityToVolumeInUnits(System.Double)">
      <summary>
        Converts Quantity (in lots) to Volume in units of base currency.
      </summary>
      <param name="quantity">The Quantity (in lots) to change to symbol volume in units</param>
      <returns>
      </returns>
      <remarks>
      </remarks>
    </member>
    <member name="M:cAlgo.API.SymbolInfo.VolumeInUnitsToQuantity(System.Double)">
      <summary>
        Converts Volume in units of base currency to Quantity (in lots).
      </summary>
      <param name="volume">The symbol volume in units to change to Quantity (in lots)</param>
      <returns>
      </returns>
      <remarks>
      </remarks>
    </member>
    <member name="M:cAlgo.API.SymbolInfo.GetEstimatedMargin(cAlgo.API.TradeType,System.Double)">
      <summary>
        Returns the amount of margin you need for x amount of volume.
      </summary>
      <param name="tradeType">Order Trade type</param>
      <param name="volume">Amount of volume</param>
      <returns>Amount of Margin</returns>
    </member>
    <member name="M:cAlgo.API.SymbolInfo.VolumeForFixedRisk(System.Double,System.Double)">
      <summary>
        Calculates the volume to be risked (in X units of the account deposit currency) based on the specified stop loss. Note that the result of this calculation may be imprecise as the exact degree of risk always depends on market movement and is impossible to predict.
      </summary>
      <param name="amount">The amount you want to risk in your account deposit currency.</param>
      <param name="stopLossInPips">The stop loss in pips.</param>
      <returns>The calculated volume in units.</returns>
    </member>
    <member name="M:cAlgo.API.SymbolInfo.VolumeForFixedRisk(System.Double,System.Double,cAlgo.API.RoundingMode)">
      <summary>
        Calculates the volume to be risked (in X units of the account deposit currency) based on the specified stop loss. Note that the result of this calculation may be imprecise as the exact degree of risk always depends on market movement and is impossible to predict.
      </summary>
      <param name="amount">The amount you want to risk in your account deposit currency.</param>
      <param name="stopLossInPips">The stop loss in pips.</param>
      <param name="roundingMode">The rounding method</param>
      <returns>The calculated volume in units.</returns>
    </member>
    <member name="M:cAlgo.API.SymbolInfo.VolumeForProportionalRisk(cAlgo.API.ProportionalAmountType,System.Double,System.Double)">
      <summary>
        Calculates the volume to be risked (in X% of either the account equity or balance) based on the specified stop loss. Note that the result of this calculation may be imprecise as the exact degree of risk always depends on market movement and is impossible to predict.
      </summary>
      <param name="type">The type of the amount to be risked (either balance or equity).</param>
      <param name="percentage">The percentage of equity or balance to be risked.</param>
      <param name="stopLossInPips">The stop loss in pips.</param>
      <returns>The calculated volume in units.</returns>
    </member>
    <member name="M:cAlgo.API.SymbolInfo.VolumeForProportionalRisk(cAlgo.API.ProportionalAmountType,System.Double,System.Double,cAlgo.API.RoundingMode)">
      <summary>
        Calculates the volume to be risked (in X% of either the account equity or balance) based on the specified stop loss. Note that the result of this calculation may be imprecise as the exact degree of risk always depends on market movement and is impossible to predict.
      </summary>
      <param name="type">The type of the amount to be risked (either balance or equity).</param>
      <param name="percentage">The percentage of equity or balance to be risked.</param>
      <param name="stopLossInPips">The stop loss in pips.</param>
      <param name="roundingMode">The rounding method.</param>
      <returns>The calculated volume in units</returns>
    </member>
    <member name="M:cAlgo.API.SymbolInfo.AmountRisked(System.Double,System.Double)">
      <summary>
        Calculates the amount to be risked based on the specified stop loss and trading volume. Note that the result of this calculation may be imprecise as the exact degree of risk always depends on market movement and is impossible to predict.
      </summary>
      <param name="volume">The volume to be traded</param>
      <param name="stopLossInPips">The stop loss in pips.</param>
      <returns>The calculated volume in units.</returns>
    </member>
    <member name="M:cAlgo.API.SymbolInfo.PipsForFixedRisk(System.Double,System.Double)">
      <summary>
        Calculates the number of pips to be risked based on the specified stop loss and trading volume. Note that the result of this calculation may be imprecise as the exact degree of risk always depends on market movement and is impossible to predict.
      </summary>
      <param name="amount">The amount to be risked.</param>
      <param name="volume">The volume to be traded.</param>
      <returns>The calculated volume in units.</returns>
    </member>
    <member name="M:cAlgo.API.SymbolInfo.PipsForProportionalRisk(cAlgo.API.ProportionalAmountType,System.Double,System.Double)">
      <summary>
        Calculates the stop loss (in pips) for the proportional amount to be risked based on the specified volume. Note that the result of this calculation may be imprecise as the exact degree of risk always depends on market movement and is impossible to predict.
      </summary>
      <param name="type">The type of the amount to be risked (either balance or equity).</param>
      <param name="percentage">The percentage of equity or balance to be risked.</param>
      <param name="volume">The volume to be traded.</param>
      <returns>The calculated stop loss in pips.</returns>
    </member>
    <member name="T:cAlgo.API.SymbolMinCommissionType">
      <summary>
        Defines symbol minimum commission types.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataSymbols" />
      <signature>
        <code>public enum SymbolMinCommissionType</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.SymbolMinCommissionType.Asset">
      <summary>
        Symbol minimum commission type is in symbol MinCommissionAsset.
      </summary>
      <signature>
        <code>public static SymbolMinCommissionType Asset;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.SymbolMinCommissionType.QuoteAsset">
      <summary>
        Symbol minimum commission type is in Symbol Quote Asset
      </summary>
      <signature>
        <code>public static SymbolMinCommissionType QuoteAsset;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.SymbolMinDistanceType">
      <summary>
        Defines symbol minimum distance types.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataSymbols" />
      <signature>
        <code>public enum SymbolMinDistanceType</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.SymbolMinDistanceType.Pips">
      <summary>
        Symbol minimum distances are in Pips.
      </summary>
      <signature>
        <code>public static SymbolMinDistanceType Pips;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.SymbolMinDistanceType.Percentage">
      <summary>
        Symbol minimum distances are in percentage difference.
      </summary>
      <signature>
        <code>public static SymbolMinDistanceType Percentage;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Symbols">
      <summary>
        Represents the list of all the symbols with the symbol names as string values.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use Symbols collection to get symbols data
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class SymbolsSample : Indicator
          {
          protected override void Initialize()
          {
          var scrollViewer = new ScrollViewer
          {
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          BackgroundColor = Color.Gold,
          Opacity = 0.7,
          HorizontalScrollBarVisibility = ScrollBarVisibility.Auto,
          VerticalScrollBarVisibility = ScrollBarVisibility.Visible,
          Height = 300
          };

          var grid = new Grid(Symbols.Count + 1, 2)
          {
          BackgroundColor = Color.Gold,
          HorizontalAlignment = HorizontalAlignment.Center,
          VerticalAlignment = VerticalAlignment.Center,
          };

          scrollViewer.Content = grid;

          grid.AddChild(new TextBlock
          {
          Text = "Name",
          Margin = 5,
          ForegroundColor = Color.Black,
          FontWeight = FontWeight.ExtraBold
          }, 0, 0);

          grid.AddChild(new TextBlock
          {
          Text = "Description",
          Margin = 5,
          ForegroundColor = Color.Black,
          FontWeight = FontWeight.ExtraBold
          }, 0, 1);

          for (int iSymbol = 1; iSymbol &lt; Symbols.Count + 1; iSymbol++)
          {
          var symbolName = Symbols[iSymbol];
          var symbol = Symbols.GetSymbol(symbolName);

          if (!symbol.MarketHours.IsOpened()) continue;

          grid.AddChild(new TextBlock
          {
          Text = symbolName,
          Margin = 5,
          ForegroundColor = Color.Black,
          FontWeight = FontWeight.ExtraBold
          }, iSymbol, 0);

          grid.AddChild(new Button
          {
          Text = symbol.Description,
          Margin = 5,
          ForegroundColor = Color.Black,
          FontWeight = FontWeight.ExtraBold
          }, iSymbol, 1);
          }

          Chart.AddControl(scrollViewer);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataSymbols" />
      <signature>
        <code>public interface Symbols</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Symbols.Item(System.Int32)">
      <summary>
        Gets the desired symbol.
      </summary>
      <param name="index">
      </param>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public string this[int index] { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Symbols.Count">
      <summary>
        Gets the total number of the symbols in the list.
      </summary>
      <value>
      </value>
      <remarks>
      </remarks>
      <signature>
        <code>public int Count { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Symbols.GetSymbol(System.String)">
      <summary>
        Gets the specific symbol.
      </summary>
      <param name="symbolName">Name of the symbol you want to get</param>
      <returns>
      </returns>
      <remarks>
      </remarks>
      <signature>
        <code>public Symbol GetSymbol(string symbolName)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Symbols.GetSymbols(System.String[])">
      <summary>
        Get multiple symbols at once.
      </summary>
      <param name="symbolNames">Names of the symbols you want to get</param>
      <returns>
      </returns>
      <remarks>
      </remarks>
      <signature>
        <code>public Symbol[] GetSymbols(string[] symbolNames)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Symbols.Exists(System.String)">
      <summary>
        Defines if the specific symbol name exists in the list.
      </summary>
      <param name="symbolName">Name of the symbol you want to check</param>
      <returns>
      </returns>
      <remarks>
      </remarks>
      <signature>
        <code>public bool Exists(string symbolName)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.SymbolSwapCalculationType">
      <summary>
        Defines the types of calculation for symbol SWAP Long/Short.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataSymbols" />
      <signature>
        <code>public enum SymbolSwapCalculationType</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.SymbolSwapCalculationType.Pips">
      <summary>
        Symbol SWAP Long/Short is in Pips.
      </summary>
      <signature>
        <code>public static SymbolSwapCalculationType Pips;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.SymbolSwapCalculationType.Percentage">
      <summary>
        Symbol SWAP Long/Short is in Percent (%).
      </summary>
      <signature>
        <code>public static SymbolSwapCalculationType Percentage;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.SymbolTradingMode">
      <summary>
        Defines symbol trading modes.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.MarketDataSymbols" />
      <signature>
        <code>public enum SymbolTradingMode</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.SymbolTradingMode.FullAccess">
      <summary>
        Full access mode.
      </summary>
      <signature>
        <code>public static SymbolTradingMode FullAccess;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.SymbolTradingMode.CloseOnly">
      <summary>
        Close only mode.
      </summary>
      <signature>
        <code>public static SymbolTradingMode CloseOnly;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.SymbolTradingMode.DisabledWithPendingOrderExecution">
      <summary>
        Trading is disabled but pending order execution is allowed mode.
      </summary>
      <signature>
        <code>public static SymbolTradingMode DisabledWithPendingOrderExecution;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.SymbolTradingMode.FullyDisabled">
      <summary>
        Trading is fully disabled mode.
      </summary>
      <signature>
        <code>public static SymbolTradingMode FullyDisabled;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Timer">
      <summary>
        Schedules execution of virtual OnTimer method with specified interval.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using System;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the API Timer, this timer works both on live and back test
          // The timer is available for both cBots and indicators
          // Every cBot/indicator can have one single timer
          // You can also use the .NET timers if you want to but those will not work properly on back test
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TimerSample : Robot
          {
          protected override void OnStart()
          {
          // You can start the cBot timer by calling Timer.Start method, for interval you can pass a time span or seconds
          Timer.Start(TimeSpan.FromSeconds(1));
          // You can also use the TimerTick event instead of OnTimer method
          Timer.TimerTick += Timer_TimerTick;

          // To stop the timer you can call Timer.Stop method anywhere on your cBot/indicator
          Timer.Stop();
          }

          private void Timer_TimerTick()
          {
          // Put your logic for timer elapsed event here
          }

          protected override void OnTimer()
          {
          // Put your logic for timer elapsed event here
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Timer" />
      <signature>
        <code>public interface Timer</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Timer.Start(System.TimeSpan)">
      <summary>
        Starts the Timer
      </summary>
      <param name="interval">Interval as a TimeSpan</param>
      <example>
        protected override void OnStart()
        {
        Timer.Start(TimeSpan.FromMilliseconds(1000));
        }

        protected override void OnTimer()
        {
        ChartObjects.DrawText("time", Time.ToString("HH:mm:ss"), StaticPosition.TopLeft);
        }
      </example>
      <signature>
        <code>public void Start(TimeSpan interval)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Timer.Start(System.Int32)">
      <summary>
        Starts the Timer
      </summary>
      <param name="intervalInSeconds">Interval in seconds</param>
      <example>
        protected override void OnStart()
        {
        Timer.Start(1);
        }

        protected override void OnTimer()
        {
        ChartObjects.DrawText("time", Time.ToString("HH:mm:ss"), StaticPosition.TopLeft);
        }
      </example>
      <signature>
        <code>public void Start(int intervalInSeconds)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Timer.Stop">
      <summary>
        Stops the Timer
      </summary>
      <signature>
        <code>public void Stop()</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Timer.TimerTick">
      <summary>
        Occurs when the interval elapses
      </summary>
      <example>
        <code>
          protected override void OnStart()
          {
          Timer.TimerTick += OnTimerTick
          Timer.Start(1);//start timer with 1 second interval
          }

          private void OnTimerTick()
          {
          ChartObjects.DrawText("time", Time.ToString("HH:mm:ss"), StaticPosition.TopLeft);
          }
        </code>
      </example>
      <signature>
        <code>public event Action TimerTick;</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Timer.Interval">
      <summary>
        Gets the interval of timer. Returns -1 millisecond if the timer is stopped
      </summary>
      <signature>
        <code>public TimeSpan Interval { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TradeType">
      <summary>
        The direction of a trade order.
      </summary>
      <remarks>
        Indicates the trade direction, whether it is a Buy or a Sell trade.
      </remarks>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 20000);
        </code>
      </example>
      <example>
        <code>
          Position position =  Positions.Find("myLabel", Symbol, TradeType.Sell);
        </code>
      </example>
      <example>
        <code>
          PlaceLimitOrder(TradeType.Buy, Symbol, 10000, Symbol.Bid);
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use the TradeType
          // TradeType is used to set an order trade side or direction
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TradeTypeSample : Robot
          {
          [Parameter("Trade Type", DefaultValue = TradeType.Buy)]
          public TradeType TradeType { get; set; }

          protected override void OnStart()
          {
          ExecuteMarketOrder(TradeType, SymbolName, Symbol.VolumeInUnitsMin);
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Trading" />
      <signature>
        <code>public enum TradeType</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TradeType.Buy">
      <summary>
        Represents a Buy order.
      </summary>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          var result = PlaceLimitOrder(TradeType.Buy, Symbol, 10000, Symbol.Bid);
        </code>
      </example>
      <signature>
        <code>public static TradeType Buy;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.TradeType.Sell">
      <summary>
        Represents a Sell order.
      </summary>
      <example>
        <code>
          ExecuteMarketOrder(TradeType.Sell, Symbol, 10000);
        </code>
      </example>
      <example>
        <code>
          var result = PlaceLimitOrder(TradeType.Sell, Symbol, 10000, Symbol.Ask);
        </code>
      </example>
      <signature>
        <code>public static TradeType Sell;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.StopTriggerMethod">
      <summary>
        The trigger side for the Stop Orders.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo.Robots
          {
          // This sample shows how to use StopTriggerMethod of orders to control their execution price
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class StopTriggerMethodSample : Robot
          {
          [Parameter("Stop Trigger Method", DefaultValue = StopTriggerMethod.Trade)]
          public StopTriggerMethod StopTriggerMethod { get; set; }

          protected override void OnStart()
          {
          // Setting a new position StopTriggerMethod
          ExecuteMarketOrder(TradeType.Buy, SymbolName, Symbol.VolumeInUnitsMin, "StopTriggerMethod Test", 10, 10, string.Empty, false, StopTriggerMethod);

          // Setting a new stop order StopTriggerMethod for both order and its stop loss
          var target = Symbol.Bid + (100 * Symbol.PipSize);

          PlaceStopOrder(TradeType.Buy, SymbolName, Symbol.VolumeInUnitsMin, target, "StopTriggerMethod Test", 10, 10, null, string.Empty, false, StopTriggerMethod, StopTriggerMethod);

          // Changing open positions StopTriggerMethod
          foreach (var position in Positions)
          {
          if (!position.StopLoss.HasValue) continue;

          ModifyPosition(position, position.StopLoss, position.TakeProfit, position.HasTrailingStop, StopTriggerMethod);
          }

          // Changing open pending orders (Stop and StopLimit) StopTriggerMethod
          foreach (var order in PendingOrders)
          {
          if (!order.StopLossPips.HasValue || order.OrderType == PendingOrderType.Limit) continue;

          ModifyPendingOrder(order, order.TargetPrice, order.StopLossPips, order.TakeProfitPips, order.ExpirationTime, order.VolumeInUnits, order.HasTrailingStop, StopTriggerMethod, StopTriggerMethod);
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Trading" />
      <signature>
        <code>public enum StopTriggerMethod</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.StopTriggerMethod.Trade">
      <summary>
        Trade method uses default trigger behavior for Stop orders.
        Buy order and Stop Loss for Sell position will be triggered when Ask &gt;= order price.
        Sell order and Stop Loss for Buy position will be triggered when Bid &lt;= order price.
      </summary>
      <signature>
        <code>public static StopTriggerMethod Trade;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.StopTriggerMethod.Opposite">
      <summary>
        Opposite method uses opposite price for order triggering.
        Buy order and Stop Loss for Sell position will be triggered when Bid &gt;= order price.
        Sell order and Stop Loss for Buy position will be triggered when Ask &lt;= order price.
      </summary>
      <signature>
        <code>public static StopTriggerMethod Opposite;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.StopTriggerMethod.DoubleTrade">
      <summary>
        Uses default prices for order triggering, but waits for
        additional  confirmation - two consecutive prices should meet criteria to trigger order.
        Buy order and Stop Loss for Sell position will be triggered when two consecutive Ask prices &gt;= order price.
        Sell order and Stop Loss for Buy position will be triggered when two consecutive Bid prices &lt;= order price.
      </summary>
      <signature>
        <code>public static StopTriggerMethod DoubleTrade;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.StopTriggerMethod.DoubleOpposite">
      <summary>
        Uses opposite prices for order triggering, and waits for
        additional confirmation - two consecutive prices should meet criteria to trigger order.
        Buy order and Stop Loss for Sell position will be triggered when two consecutive Bid prices &gt;= order price.
        Sell order and Stop Loss for Buy position will be triggered when two consecutive Ask prices &lt;= order price.
      </summary>
      <signature>
        <code>public static StopTriggerMethod DoubleOpposite;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TradeOperation">
      <summary>
        Provides access to the properties describing an asynchronous trade operation.
      </summary>
      <example>
        <code>
          TradeOperation operation = ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "asynchronous");
          if (operation.IsExecuting)
          {
          Print("Trade is executing");
          }
          else
          {
          if (operation.TradeResult.IsSuccessful)
          Print("Trade executed");
          }
        </code>
      </example>
      <example>
        <code>
          protected override void OnStart()
          {
          Positions.Opened += PositionsOnOpened;

          TradeOperation operation = ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "asynchronous");
          ExecuteMarketOrder(TradeType.Buy, Symbol, 10000, "synchronous", 10, 10);

          if (operation.IsExecuting)
          {
          Print("Trade is executing");
          }
          else
          {
          if (operation.TradeResult.IsSuccessful)
          Print("Trade executed");
          }
          }

          private void PositionsOnOpened(PositionOpenedEventArgs args)
          {
          var pos = args.Position;
          Print("Position {0} opened at {1}", pos.Label, pos.EntryPrice);
          }
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to use TradeOperation to monitor an async order execution/placement operation
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TradeOperationSample : Robot
          {
          protected override void OnStart()
          {
          var tradeOperation = ExecuteMarketOrderAsync(TradeType.Buy, SymbolName, Symbol.VolumeInUnitsMin, OnTradeResult);

          if (tradeOperation.IsExecuting)
          {
          Print("Executing");
          }
          else
          {
          Print("Completed");
          }
          }

          private void OnTradeResult(TradeResult obj)
          {
          Print("Was Trade Operation Successful: ", obj.IsSuccessful);
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Trading" />
      <signature>
        <code>public sealed class TradeOperation</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeOperation.IsExecuting">
      <summary>
        True if a trade operation is being executed, false if it completed
      </summary>
      <example>
        <code>
          TradeOperation operation = ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 20000, "myLabel");
          // ...
          if (!operation.IsExecuting)
          {
          Print("Trade executed");
          }
        </code>
      </example>
      <signature>
        <code>public bool IsExecuting { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeOperation.TradeResult">
      <summary>
        The result of a trade operation
      </summary>
      <example>
        <code>
          TradeOperation operation = ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 20000, "myLabel");
          // ...
          if (!operation.IsExecuting &amp;&amp; operation.TradeResult.IsSuccessful)
          {
          Print("Trade {0} executed", operation.TradeResult.Position.Label);
          }
        </code>
      </example>
      <signature>
        <code>public TradeResult TradeResult { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.TradeOperation.ToString">
      <summary>
        The description of a trade operation
      </summary>
      <returns>Operation description</returns>
      <example>
        <code>
          TradeOperation operation = ExecuteMarketOrderAsync(TradeType.Buy, Symbol, 10000, "asynchronous");
          Print(operation.ToString());
        </code>
      </example>
      <signature>
        <code>public string ToString()</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.TradeResult">
      <summary>
        The result of a trade operation.
      </summary>
      <example>
        <code>
          TradeResult result = ExecuteMarketOrder(TradeType.Sell, Symbol, 20000);
          if (result.IsSuccessful)
          Print("Sell at {0}", result.Position.EntryPrice);
        </code>
      </example>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo.Robots
          {
          // This sample cBot shows how to get a trade operation result
          [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class TradeResultSample : Robot
          {
          protected override void OnStart()
          {
          var tradeResult = ExecuteMarketOrder(TradeType.Buy, SymbolName, Symbol.VolumeInUnitsMin);

          if (tradeResult.IsSuccessful)
          {
          Print("Market order execution was successful");

          var position = tradeResult.Position;

          Print("A new position opend with ID ", position.Id);
          }
          else
          {
          Print("Market order execution was not successful");
          }
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Trading" />
      <signature>
        <code>public sealed class TradeResult</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeResult.IsSuccessful">
      <summary>
        True if the trade is successful, false if there is an error.
      </summary>
      <example>
        <code>
          TradeResult result = ExecuteMarketOrder(TradeType.Buy, Symbol, 20000);
          if (result.IsSuccessful)
          Print("Buy at {0}", result.Position.EntryPrice);
        </code>
      </example>
      <signature>
        <code>public bool IsSuccessful { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeResult.Error">
      <summary>
        The error code of an unsuccessful trade.
      </summary>
      <example>
        <code>
          var mySymbol = MarketData.GetSymbol("EURUSD");
          TradeResult result = ExecuteMarketOrder(TradeType.Sell, mySymbol, 1);
          if(!result.IsSuccessful)
          Print("Error: {0}", result.Error);
        </code>
      </example>
      <signature>
        <code>public ErrorCode? Error { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeResult.Position">
      <summary>
        The resulting position of a trade request.
      </summary>
      <example>
        <code>
          TradeResult result = ExecuteMarketOrder(TradeType.Sell, Symbol, 50000);
          if (result.IsSuccessful)
          Print("Sell at {0}", result.Position.EntryPrice);
        </code>
      </example>
      <signature>
        <code>public Position Position { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.TradeResult.PendingOrder">
      <summary>
        The resulting pending order of a trade request.
      </summary>
      <example>
        <code>
          TradeResult result = PlaceLimitOrder(TradeType.Sell, Symbol,
          50000, Symbol.Ask, "myLabel", 10, null);
          if(result.IsSuccessful)
          Print("Order placed. SL: {0}", result.PendingOrder.StopLoss);
        </code>
      </example>
      <signature>
        <code>public PendingOrder PendingOrder { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.TradeResult.ToString">
      <summary>
        The description of a trade result.
      </summary>
      <returns>Result description.</returns>
      <example>
        <code>
          TradeResult result = PlaceLimitOrder(TradeType.Sell, Symbol, 50000, Symbol.Ask);
          if (result.IsSuccessful)
          Print(result.ToString());
        </code>
      </example>
      <signature>
        <code>public string ToString()</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.VerticalAlignment">
      <summary>
        Describes vertical position related to an anchor point or a parent element.
      </summary>
      <example>
        <code>
          using cAlgo.API;

          namespace cAlgo
          {
          // This sample shows how to use the VerticalAlignment
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class VerticalAlignmentSample : Indicator
          {
          [Parameter("Vertical Alignment", DefaultValue = VerticalAlignment.Center)]
          public VerticalAlignment VerticalAlignment { get; set; }

          protected override void Initialize()
          {
          var textBlock = new TextBlock
          {
          Text = string.Format("Alignment: {0}", VerticalAlignment),
          VerticalAlignment = VerticalAlignment,
          HorizontalAlignment = HorizontalAlignment.Center
          };

          Chart.AddControl(textBlock);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <seealso cref="T:cAlgo.API.ChartVerticalLine" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Chart" />
      <signature>
        <code>public enum VerticalAlignment</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.VerticalAlignment.Center">
      <summary>
        Center vertical alignment.
      </summary>
      <signature>
        <code>public static VerticalAlignment Center;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.VerticalAlignment.Top">
      <summary>
        Top vertical alignment.
      </summary>
      <signature>
        <code>public static VerticalAlignment Top;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.VerticalAlignment.Bottom">
      <summary>
        Bottom vertical alignment.
      </summary>
      <signature>
        <code>public static VerticalAlignment Bottom;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.VerticalAlignment.Stretch">
      <summary>
        Stretch vertical alignment.
      </summary>
      <signature>
        <code>public static VerticalAlignment Stretch;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Watchlist">
      <summary>
        Represents the Watchlist interface.
      </summary>
      <example>
        <code>
          using cAlgo.API;
          using System.Linq;

          namespace cAlgo
          {
          // This sample shows how to use Automate API to monitor user platform Watchlists
          [Indicator(IsOverlay = true, TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
          public class WatchlistSample : Indicator
          {
          protected override void Initialize()
          {
          Watchlists.Added += Watchlists_Added;
          Watchlists.Removed += Watchlists_Removed;
          Watchlists.WatchlistRenamed += Watchlists_WatchlistRenamed;
          Watchlists.WatchlistSymbolAdded += Watchlists_WatchlistSymbolAdded;
          Watchlists.WatchlistSymbolRemoved += Watchlists_WatchlistSymbolRemoved;

          Print("Number of Watchlists: ", Watchlists.Count());

          foreach (var watchlist in Watchlists)
          {
          Print("Watchlist Name: {0} | Symbols #: {1}", watchlist.Name, watchlist.SymbolNames.Count);
          }
          }

          private void Watchlists_WatchlistSymbolRemoved(WatchlistSymbolRemovedEventArgs obj)
          {
          Print("Symbol {0} Removed From Watchlist {1}", obj.SymbolName, obj.Watchlist.Name);
          }

          private void Watchlists_WatchlistSymbolAdded(WatchlistSymbolAddedEventArgs obj)
          {
          Print("Symbol {0} Added to Watchlist {1}", obj.SymbolName, obj.Watchlist.Name);
          }

          private void Watchlists_WatchlistRenamed(WatchlistRenamedEventArgs obj)
          {
          Print("Renamed Watchlist {0}", obj.Watchlist.Name);
          }

          private void Watchlists_Removed(WatchlistRemovedEventArgs obj)
          {
          Print("Removed Watchlist {0}", obj.Watchlist.Name);
          }

          private void Watchlists_Added(WatchlistAddedEventArgs obj)
          {
          Print("Added Watchlist {0}", obj.Watchlist.Name);
          }

          public override void Calculate(int index)
          {
          }
          }
          }
        </code>
      </example>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Watchlists" />
      <signature>
        <code>public interface Watchlist</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Watchlist.Name">
      <summary>
        Gets the watchlist name.
      </summary>
      <signature>
        <code>public string Name { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Watchlist.SymbolNames">
      <summary>
        Gets the names of the symbols in the watchlist.
      </summary>
      <signature>
        <code>public IReadonlyList&lt;string&gt; SymbolNames { get; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Watchlists">
      <summary>
        Represents the Watchlists interface - allows getting all the watchlists and symbols in them, and receiving the relevant events.
      </summary>
      <seealso cref="T:cAlgo.API.Watchlist" />
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.Watchlists" />
      <signature>
        <code>public interface Watchlists</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Watchlists.Item(System.Int32)">
      <summary>
        Gets the desired Watchlist.
      </summary>
      <param name="index">
      </param>
      <signature>
        <code>public Watchlist this[int index] { get; }</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Watchlists.Added">
      <summary>
        Occurs when a new watchlist is added.
      </summary>
      <signature>
        <code>public event Action&lt;WatchlistAddedEventArgs&gt; Added;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Watchlists.Removed">
      <summary>
        Occurs when a watchlist is removed.
      </summary>
      <signature>
        <code>public event Action&lt;WatchlistRemovedEventArgs&gt; Removed;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Watchlists.WatchlistSymbolAdded">
      <summary>
        Occurs when a new symbol is added to the watchlist.
      </summary>
      <signature>
        <code>public event Action&lt;WatchlistSymbolAddedEventArgs&gt; WatchlistSymbolAdded;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Watchlists.WatchlistSymbolRemoved">
      <summary>
        Occurs when a symbol is removed from the watchlist.
      </summary>
      <signature>
        <code>public event Action&lt;WatchlistSymbolRemovedEventArgs&gt; WatchlistSymbolRemoved;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Watchlists.WatchlistRenamed">
      <summary>
        Occurs when the name of the watchlist is changed.
      </summary>
      <signature>
        <code>public event Action&lt;WatchlistRenamedEventArgs&gt; WatchlistRenamed;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WebSocketClient">
      <summary>
        Represents a web socket client.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.WebSocket" />
      <signature>
        <code>public class WebSocketClient</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.WebSocketClient.#ctor">
      <summary>
        Creates a WebSocketClient with default options.
      </summary>
      <signature>
        <code>public WebSocketClient()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.WebSocketClient.#ctor(cAlgo.API.WebSocketClientOptions)">
      <summary>
        Creates a WebSocketClient with passed options.
      </summary>
      <signature>
        <code>public WebSocketClient(WebSocketClientOptions options)</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebSocketClient.State">
      <summary>
        Gets current state of WebSocketClient instance.
      </summary>
      <signature>
        <code>public WebSocketClientState State { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebSocketClient.CloseStatus">
      <summary>
        Gets close status / reason.
      </summary>
      <signature>
        <code>public WebSocketClientCloseStatus? CloseStatus { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebSocketClient.CloseStatusDescription">
      <summary>
        Gets a description of the reason why the instance was closed.
      </summary>
      <signature>
        <code>public string CloseStatusDescription { get; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.WebSocketClient.Connect(System.Uri)">
      <summary>
        Connects WebSocketClient to passed URI.
      </summary>
      <param name="uri">The server URI.</param>
      <signature>
        <code>public void Connect(Uri uri)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.WebSocketClient.Close(cAlgo.API.WebSocketClientCloseStatus,System.String)">
      <summary>
        Disconnects WebSocketClient.
      </summary>
      <param name="closeStatus">Close status / reason.</param>
      <param name="closeStatusDescription">Close status / reason description.</param>
      <signature>
        <code>public void Close(WebSocketClientCloseStatus closeStatus, string closeStatusDescription)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.WebSocketClient.Send(System.String)">
      <summary>
        Sends passed text.
      </summary>
      <param name="text">Text to send.</param>
      <signature>
        <code>public void Send(string text)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.WebSocketClient.Send(System.Byte[])">
      <summary>
        Sends passed binary data.
      </summary>
      <param name="data">Data to send.</param>
      <signature>
        <code>public void Send(byte[] data)</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.WebSocketClient.Connected">
      <summary>
        Occurs when WebSocketClient is connected.
      </summary>
      <signature>
        <code>public event Action&lt;WebSocketClientConnectedEventArgs&gt; Connected;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.WebSocketClient.Disconnected">
      <summary>
        Occurs when WebSocketClient is disconnected.
      </summary>
      <signature>
        <code>public event Action&lt;WebSocketClientDisconnectEventArgs&gt; Disconnected;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.WebSocketClient.TextReceived">
      <summary>
        Occurs when WebSocketClient receives text data.
      </summary>
      <signature>
        <code>public event Action&lt;WebSocketClientTextReceivedEventArgs&gt; TextReceived;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.WebSocketClient.BinaryReceived">
      <summary>
        Occurs when WebSocketClient receives binary data.
      </summary>
      <signature>
        <code>public event Action&lt;WebSocketClientBinaryReceivedEventArgs&gt; BinaryReceived;</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.WebSocketClient.Dispose">
      <summary>
        Releases the unmanaged resources used by the WebSocketClient instance.
      </summary>
      <signature>
        <code>public void Dispose()</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WebSocketClientCloseStatus">
      <summary>
        An enumeration of different Web socket client close states / reasons.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.WebSocket" />
      <signature>
        <code>public enum WebSocketClientCloseStatus</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WebSocketClientCloseStatus.Empty">
      <summary>
        No error specified.
      </summary>
      <signature>
        <code>public static WebSocketClientCloseStatus Empty;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WebSocketClientCloseStatus.EndpointUnavailable">
      <summary>
        (1001) Indicates an endpoint is being removed. Either the server or client will become unavailable.
      </summary>
      <signature>
        <code>public static WebSocketClientCloseStatus EndpointUnavailable;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WebSocketClientCloseStatus.InternalServerError">
      <summary>
        (1011) The connection will be closed by the server because of an error on the server.
      </summary>
      <signature>
        <code>public static WebSocketClientCloseStatus InternalServerError;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WebSocketClientCloseStatus.InvalidMessageType">
      <summary>
        (1003) The client or server is terminating the connection because it cannot accept the data type it received.
      </summary>
      <signature>
        <code>public static WebSocketClientCloseStatus InvalidMessageType;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WebSocketClientCloseStatus.InvalidPayloadData">
      <summary>
        (1007) The client or server is terminating the connection because it has received data inconsistent with the message type.
      </summary>
      <signature>
        <code>public static WebSocketClientCloseStatus InvalidPayloadData;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WebSocketClientCloseStatus.MandatoryExtension">
      <summary>
        (1010) The client is terminating the connection because it expected the server to negotiate an extension.
      </summary>
      <signature>
        <code>public static WebSocketClientCloseStatus MandatoryExtension;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WebSocketClientCloseStatus.MessageTooBig">
      <summary>
        (1009) The client or server is terminating the connection because it has received a message that is too big for it to process.
      </summary>
      <signature>
        <code>public static WebSocketClientCloseStatus MessageTooBig;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WebSocketClientCloseStatus.NormalClosure">
      <summary>
        (1000) The connection has closed after the request was fulfilled.
      </summary>
      <signature>
        <code>public static WebSocketClientCloseStatus NormalClosure;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WebSocketClientCloseStatus.PolicyViolation">
      <summary>
        (1008) The connection will be closed because an endpoint has received a message that violates its policy.
      </summary>
      <signature>
        <code>public static WebSocketClientCloseStatus PolicyViolation;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WebSocketClientCloseStatus.ProtocolError">
      <summary>
        (1008) The client or server is terminating the connection because of a protocol error.
      </summary>
      <signature>
        <code>public static WebSocketClientCloseStatus ProtocolError;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WebSocketClientOptions">
      <summary>
        Websocket client options.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.WebSocket" />
      <signature>
        <code>public class WebSocketClientOptions</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.WebSocketClientOptions.#ctor">
      <summary>
        Creates WebSocketClientOptions with default values.
      </summary>
      <signature>
        <code>public WebSocketClientOptions()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebSocketClientOptions.Timeout">
      <summary>
        Gets or sets the operation timeout.
        Default value is set to 60 seconds.
      </summary>
      <signature>
        <code>public TimeSpan Timeout { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebSocketClientOptions.SubProtocols">
      <summary>
        Gets or sets sub-protocols to be negotiated during the WebSocket connection handshake.
      </summary>
      <signature>
        <code>public IEnumerable&lt;string&gt; SubProtocols { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebSocketClientOptions.KeepAliveInterval">
      <summary>
        Gets or sets the WebSocket protocol keep-alive interval.
        Default value is set to 30 seconds.
      </summary>
      <signature>
        <code>public TimeSpan KeepAliveInterval { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.WebSocketClientOptions.UseDefaultCredentials">
      <summary>
        Gets or sets a Boolean value that indicates if default credentials should be used during WebSocket handshake.
        Default value is false.
      </summary>
      <signature>
        <code>public bool UseDefaultCredentials { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WebSocketClientState">
      <summary>
        An enumeration of different Web socket client states.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.WebSocket" />
      <signature>
        <code>public enum WebSocketClientState</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WebSocketClientState.None">
      <summary>
        Reserved for future use.
      </summary>
      <signature>
        <code>public static WebSocketClientState None;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WebSocketClientState.Connecting">
      <summary>
        The connection is negotiating the handshake with the remote endpoint.
      </summary>
      <signature>
        <code>public static WebSocketClientState Connecting;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WebSocketClientState.Open">
      <summary>
        The initial state after the HTTP handshake has been completed.
      </summary>
      <signature>
        <code>public static WebSocketClientState Open;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WebSocketClientState.CloseSent">
      <summary>
        A close message was sent to the remote endpoint.
      </summary>
      <signature>
        <code>public static WebSocketClientState CloseSent;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WebSocketClientState.CloseReceived">
      <summary>
        A close message was received from the remote endpoint.
      </summary>
      <signature>
        <code>public static WebSocketClientState CloseReceived;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WebSocketClientState.Closed">
      <summary>
        Indicates the WebSocket close handshake completed gracefully.
      </summary>
      <signature>
        <code>public static WebSocketClientState Closed;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WebSocketClientState.Aborted">
      <summary>
        Indicates that the WebSocket has been aborted.
      </summary>
      <signature>
        <code>public static WebSocketClientState Aborted;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.DetachedWindow">
      <summary>
        Used to represent the properties of a detached window.
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsWindows" />
      <signature>
        <code>public interface DetachedWindow</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DetachedWindow.Left">
      <summary>
        Get / Set window left margin (X)
      </summary>
      <signature>
        <code>public double Left { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DetachedWindow.Top">
      <summary>
        Get / Set window top margin (Y)
      </summary>
      <signature>
        <code>public double Top { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DetachedWindow.Width">
      <summary>
        Get / Set width of the window
      </summary>
      <signature>
        <code>public double Width { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DetachedWindow.Height">
      <summary>
        Get / Set height of the Window
      </summary>
      <signature>
        <code>public double Height { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DetachedWindow.MinHeight">
      <summary>
        Get / Set the window minimum height
      </summary>
      <signature>
        <code>public double MinHeight { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DetachedWindow.MaxHeight">
      <summary>
        Get / Set the window maximum height
      </summary>
      <signature>
        <code>public double MaxHeight { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DetachedWindow.MinWidth">
      <summary>
        Get / Set the window minimum width
      </summary>
      <signature>
        <code>public double MinWidth { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DetachedWindow.MaxWidth">
      <summary>
        Get / Set the window maximum width
      </summary>
      <signature>
        <code>public double MaxWidth { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DetachedWindow.ResizeMode">
      <summary>
        Get / Set the window resize mode
      </summary>
      <signature>
        <code>public ResizeMode ResizeMode { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.DetachedWindow.WindowStartupLocation">
      <summary>
        Get / Set the window startup location
      </summary>
      <signature>
        <code>public WindowStartupLocation WindowStartupLocation { get; set; }</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.MessageBox">
      <summary>
        A message dialog window that you can use to show a message with buttons
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsWindows" />
      <signature>
        <code>public static class MessageBox</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.MessageBox.Show(System.String)">
      <summary>
        Shows a MessageBox with just a text
      </summary>
      <param name="messageBoxText">The text that will be displayed on MessageBox</param>
      <returns>
      </returns>
      <signature>
        <code>public static MessageBoxResult Show(string messageBoxText)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.MessageBox.Show(System.String,System.String)">
      <summary>
        Shows a MessageBox with text and caption / title
      </summary>
      <param name="messageBoxText">The text that will be displayed on MessageBox</param>
      <param name="caption">The caption that will be displayed on MessageBox tile bar</param>
      <returns>
      </returns>
      <signature>
        <code>public static MessageBoxResult Show(string messageBoxText, string caption)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.MessageBox.Show(System.String,System.String,cAlgo.API.MessageBoxButton)">
      <summary>
        Shows a MessageBox with text, caption / title, and button
      </summary>
      <param name="messageBoxText">The text that will be displayed on MessageBox</param>
      <param name="caption">The caption that will be displayed on MessageBox tile bar</param>
      <param name="button">The button that will be displayed on MessageBox</param>
      <returns>
      </returns>
      <signature>
        <code>public static MessageBoxResult Show(string messageBoxText, string caption, MessageBoxButton button)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.MessageBox.Show(System.String,System.String,cAlgo.API.MessageBoxButton,cAlgo.API.MessageBoxImage)">
      <summary>
        Shows a MessageBox with text, caption / title, button, and an image icon
      </summary>
      <param name="messageBoxText">The text that will be displayed on MessageBox</param>
      <param name="caption">The caption that will be displayed on MessageBox tile bar</param>
      <param name="button">The button that will be displayed on MessageBox</param>
      <param name="icon">The icon that will be displayed on MessageBox</param>
      <returns>
      </returns>
      <signature>
        <code>public static MessageBoxResult Show(string messageBoxText, string caption, MessageBoxButton button, MessageBoxImage icon)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.MessageBox.Show(System.String,System.String,cAlgo.API.MessageBoxButton,cAlgo.API.MessageBoxImage,cAlgo.API.MessageBoxResult)">
      <summary>
        Shows a MessageBox with text, caption / title, button, icon, and a default result
      </summary>
      <param name="messageBoxText">The text that will be displayed on MessageBox</param>
      <param name="caption">The caption that will be displayed on MessageBox tile bar</param>
      <param name="button">The button that will be displayed on MessageBox</param>
      <param name="icon">The icon that will be displayed on MessageBox</param>
      <param name="defaultResult">The MessageBox default result</param>
      <returns>
      </returns>
      <signature>
        <code>public static MessageBoxResult Show(string messageBoxText, string caption, MessageBoxButton button, MessageBoxImage icon, MessageBoxResult defaultResult)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.MessageBox.Show(cAlgo.API.Window,System.String)">
      <summary>
        Shows a MessageBox with text that is a child of another window
      </summary>
      <param name="owner">The window that owns the MessageBox</param>
      <param name="messageBoxText">The text that will be displayed on MessageBox</param>
      <returns>
      </returns>
      <signature>
        <code>public static MessageBoxResult Show(Window owner, string messageBoxText)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.MessageBox.Show(cAlgo.API.Window,System.String,System.String)">
      <summary>
        Shows a MessageBox with text, and caption / title that is a child of another window
      </summary>
      <param name="owner">The window that owns the MessageBox</param>
      <param name="messageBoxText">The text that will be displayed on MessageBox</param>
      <param name="caption">The caption that will be displayed on MessageBox tile bar</param>
      <returns>
      </returns>
      <signature>
        <code>public static MessageBoxResult Show(Window owner, string messageBoxText, string caption)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.MessageBox.Show(cAlgo.API.Window,System.String,System.String,cAlgo.API.MessageBoxButton)">
      <summary>
        Shows a MessageBox with text, caption / title, and button that is a child of another window
      </summary>
      <param name="owner">The window that owns the MessageBox</param>
      <param name="messageBoxText">The text that will be displayed on MessageBox</param>
      <param name="caption">The caption that will be displayed on MessageBox tile bar</param>
      <param name="button">The button that will be displayed on MessageBox</param>
      <returns>
      </returns>
      <signature>
        <code>public static MessageBoxResult Show(Window owner, string messageBoxText, string caption, MessageBoxButton button)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.MessageBox.Show(cAlgo.API.Window,System.String,System.String,cAlgo.API.MessageBoxButton,cAlgo.API.MessageBoxImage)">
      <summary>
        Shows a MessageBox with text, caption / title, button, and image icon that is a child of another window
      </summary>
      <param name="owner">The window that owns the MessageBox</param>
      <param name="messageBoxText">The text that will be displayed on MessageBox</param>
      <param name="caption">The caption that will be displayed on MessageBox tile bar</param>
      <param name="button">The button that will be displayed on MessageBox</param>
      <param name="icon">The icon that will be displayed on MessageBox</param>
      <returns>
      </returns>
      <signature>
        <code>public static MessageBoxResult Show(Window owner, string messageBoxText, string caption, MessageBoxButton button, MessageBoxImage icon)</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.MessageBox.Show(cAlgo.API.Window,System.String,System.String,cAlgo.API.MessageBoxButton,cAlgo.API.MessageBoxImage,cAlgo.API.MessageBoxResult)">
      <summary>
        Shows a MessageBox with text, caption / title, button, icon, and a default result that is a child of another window
      </summary>
      <param name="owner">The window that owns the MessageBox</param>
      <param name="messageBoxText">The text that will be displayed on MessageBox</param>
      <param name="caption">The caption that will be displayed on MessageBox tile bar</param>
      <param name="button">The button that will be displayed on MessageBox</param>
      <param name="icon">The icon that will be displayed on MessageBox</param>
      <param name="defaultResult">The MessageBox default result</param>
      <returns>
      </returns>
      <signature>
        <code>public static MessageBoxResult Show(Window owner, string messageBoxText, string caption, MessageBoxButton button, MessageBoxImage icon, MessageBoxResult defaultResult)</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.MessageBoxButton">
      <summary>
        This Enum contains MessageBox buttons
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsWindows" />
      <signature>
        <code>public enum MessageBoxButton</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MessageBoxButton.OK">
      <summary>
        Show just an OK button on MessageBox
      </summary>
      <signature>
        <code>public static MessageBoxButton OK;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MessageBoxButton.OKCancel">
      <summary>
        Show an OK and Cancel button on MessageBox
      </summary>
      <signature>
        <code>public static MessageBoxButton OKCancel;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MessageBoxButton.YesNoCancel">
      <summary>
        Show Yes, No, and Cancel button on MessageBox
      </summary>
      <signature>
        <code>public static MessageBoxButton YesNoCancel;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MessageBoxButton.YesNo">
      <summary>
        Show Yes and No button on MessageBox
      </summary>
      <signature>
        <code>public static MessageBoxButton YesNo;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.MessageBoxImage">
      <summary>
        This Enum contains MessageBox image icons
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsWindows" />
      <signature>
        <code>public enum MessageBoxImage</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MessageBoxImage.None">
      <summary>
        The default value, MessageBox without any icon
      </summary>
      <signature>
        <code>public static MessageBoxImage None;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MessageBoxImage.Error">
      <summary>
        Shows an error icon on MessageBox
      </summary>
      <signature>
        <code>public static MessageBoxImage Error;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MessageBoxImage.Question">
      <summary>
        Shows a question icon on MessageBox
      </summary>
      <signature>
        <code>public static MessageBoxImage Question;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MessageBoxImage.Warning">
      <summary>
        Shows a warning icon on MessageBox
      </summary>
      <signature>
        <code>public static MessageBoxImage Warning;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MessageBoxImage.Information">
      <summary>
        Shows an information icon on MessageBox
      </summary>
      <signature>
        <code>public static MessageBoxImage Information;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.MessageBoxResult">
      <summary>
        This Enum contains MessageBox results
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsWindows" />
      <signature>
        <code>public enum MessageBoxResult</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MessageBoxResult.None">
      <summary>
        The default result for MessageBox
      </summary>
      <signature>
        <code>public static MessageBoxResult None;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MessageBoxResult.OK">
      <summary>
        MessageBox result if OK button clicked by user
      </summary>
      <signature>
        <code>public static MessageBoxResult OK;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MessageBoxResult.Cancel">
      <summary>
        MessageBox result if Cancel button clicked by user
      </summary>
      <signature>
        <code>public static MessageBoxResult Cancel;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MessageBoxResult.Yes">
      <summary>
        MessageBox result if Yes button clicked by user
      </summary>
      <signature>
        <code>public static MessageBoxResult Yes;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.MessageBoxResult.No">
      <summary>
        MessageBox result if No button clicked by user
      </summary>
      <signature>
        <code>public static MessageBoxResult No;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.OwnerType">
      <summary>
        The types of owners for windows
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsWindows" />
      <signature>
        <code>public enum OwnerType</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.OwnerType.None">
      <summary>
        The default owner type, which means the window has no owner
      </summary>
      <signature>
        <code>public static OwnerType None;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.OwnerType.Chart">
      <summary>
        The chart owns the window
      </summary>
      <signature>
        <code>public static OwnerType Chart;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.OwnerType.Application">
      <summary>
        The application main window owns the window
      </summary>
      <signature>
        <code>public static OwnerType Application;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.ResizeMode">
      <summary>
        Types of resize modes for windows
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsWindows" />
      <signature>
        <code>public enum ResizeMode</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ResizeMode.NoResize">
      <summary>
        For windows that cannot be resized
      </summary>
      <signature>
        <code>public static ResizeMode NoResize;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ResizeMode.CanMinimize">
      <summary>
        For windows that can only be minimized
      </summary>
      <signature>
        <code>public static ResizeMode CanMinimize;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ResizeMode.CanResize">
      <summary>
        For windows that can be resized from all directions
      </summary>
      <signature>
        <code>public static ResizeMode CanResize;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.ResizeMode.CanResizeWithGrip">
      <summary>
        For windows that can only be resized by the bottom edge resize grip
      </summary>
      <signature>
        <code>public static ResizeMode CanResizeWithGrip;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.Window">
      <summary>
        The window class, you can use it to show a window that can contain other chart controls
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsWindows" />
      <signature>
        <code>public sealed class Window</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Window.#ctor">
      <summary>
        Creates an empty window with default settings
      </summary>
      <signature>
        <code>public Window()</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Window.Child">
      <summary>
        Get / Set the main content control of window
      </summary>
      <signature>
        <code>public ControlBase Child { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Window.Left">
      <summary>
        Get / Set window left margin (X)
      </summary>
      <signature>
        <code>public double Left { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Window.Top">
      <summary>
        Get / Set window top margin (Y)
      </summary>
      <signature>
        <code>public double Top { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Window.Width">
      <summary>
        Get / Set width of the window
      </summary>
      <signature>
        <code>public double Width { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Window.Height">
      <summary>
        Get / Set height of the Window
      </summary>
      <signature>
        <code>public double Height { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Window.Title">
      <summary>
        Get / Set the window title
      </summary>
      <signature>
        <code>public string Title { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Window.BackgroundColor">
      <summary>
        Get / Set the window background color
      </summary>
      <signature>
        <code>public Color BackgroundColor { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Window.Padding">
      <summary>
        Get / Set the window padding
      </summary>
      <signature>
        <code>public Thickness Padding { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Window.MinHeight">
      <summary>
        Get / Set the window minimum height
      </summary>
      <signature>
        <code>public double MinHeight { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Window.MaxHeight">
      <summary>
        Get / Set the window maximum height
      </summary>
      <signature>
        <code>public double MaxHeight { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Window.MinWidth">
      <summary>
        Get / Set the window minimum width
      </summary>
      <signature>
        <code>public double MinWidth { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Window.MaxWidth">
      <summary>
        Get / Set the window maximum width
      </summary>
      <signature>
        <code>public double MaxWidth { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Window.ResizeMode">
      <summary>
        Get / Set the window resize mode
      </summary>
      <signature>
        <code>public ResizeMode ResizeMode { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Window.Topmost">
      <summary>
        Get / Set the window topmost flag, if True then the window will appear on top of all other windows
      </summary>
      <signature>
        <code>public bool Topmost { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Window.WindowStartupLocation">
      <summary>
        Get / Set the window startup location
      </summary>
      <signature>
        <code>public WindowStartupLocation WindowStartupLocation { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Window.WindowState">
      <summary>
        Get / Set the window state
      </summary>
      <signature>
        <code>public WindowState WindowState { get; set; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Window.IsActive">
      <summary>
        Get / Set the window active / de-active flag, if Yes then the window will be active
      </summary>
      <signature>
        <code>public bool IsActive { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Window.IsVisible">
      <summary>
        Get / Set the window visibility flag, if Yes then the window will be shown otherwise it will be hidden
      </summary>
      <signature>
        <code>public bool IsVisible { get; }</code>
      </signature>
    </member>
    <member name="P:cAlgo.API.Window.OwnerType">
      <summary>
        Get / Set the window owner
      </summary>
      <signature>
        <code>public OwnerType OwnerType { get; set; }</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Window.Show">
      <summary>
        Shows the window
      </summary>
      <signature>
        <code>public void Show()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Window.Hide">
      <summary>
        Hides the window
      </summary>
      <signature>
        <code>public void Hide()</code>
      </signature>
    </member>
    <member name="M:cAlgo.API.Window.Close">
      <summary>
        Closes the window
      </summary>
      <signature>
        <code>public void Close()</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Window.Closed">
      <summary>
        This event gets triggered when window is closed
      </summary>
      <signature>
        <code>public event Action&lt;WindowClosedEventArgs&gt; Closed;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Window.IsVisibleChanged">
      <summary>
        This event gets triggered when window visibility changes
      </summary>
      <signature>
        <code>public event Action&lt;WindowIsVisibleChangedEventArgs&gt; IsVisibleChanged;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Window.Activated">
      <summary>
        This event gets triggered when window is activated
      </summary>
      <signature>
        <code>public event Action&lt;WindowActivatedEventArgs&gt; Activated;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Window.Deactivated">
      <summary>
        This event gets triggered when window is deactivated
      </summary>
      <signature>
        <code>public event Action&lt;WindowDeactivatedEventArgs&gt; Deactivated;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Window.LocationChanged">
      <summary>
        This event gets triggered when window location changes
      </summary>
      <signature>
        <code>public event Action&lt;WindowLocationChangedEventArgs&gt; LocationChanged;</code>
      </signature>
    </member>
    <member name="E:cAlgo.API.Window.SizeChanged">
      <summary>
        This event gets triggered when window is size changes
      </summary>
      <signature>
        <code>public event Action&lt;WindowSizeChangedEventArgs&gt; SizeChanged;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WindowStartupLocation">
      <summary>
        Types of startup locations that you can use for windows
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsWindows" />
      <signature>
        <code>public enum WindowStartupLocation</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WindowStartupLocation.Manual">
      <summary>
        Default window startup location value.
        The startup location of a Window is set from code, or defers to the default Windows location.
      </summary>
      <signature>
        <code>public static WindowStartupLocation Manual;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WindowStartupLocation.CenterScreen">
      <summary>
        Window is placed at the center of the screen.
      </summary>
      <signature>
        <code>public static WindowStartupLocation CenterScreen;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WindowStartupLocation.CenterOwner">
      <summary>
        Window is placed at the center of it's owner.
      </summary>
      <signature>
        <code>public static WindowStartupLocation CenterOwner;</code>
      </signature>
    </member>
    <member name="T:cAlgo.API.WindowState">
      <summary>
        Types of states for windows
      </summary>
      <group cref="F:cAlgo.API.Internals.ApiReferenceGroup.ControlsWindows" />
      <signature>
        <code>public enum WindowState</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WindowState.Normal">
      <summary>
        The default state of window
      </summary>
      <signature>
        <code>public static WindowState Normal;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WindowState.Minimized">
      <summary>
        Window is minimized to the task bar
      </summary>
      <signature>
        <code>public static WindowState Minimized;</code>
      </signature>
    </member>
    <member name="F:cAlgo.API.WindowState.Maximized">
      <summary>
        Window is maximized
      </summary>
      <signature>
        <code>public static WindowState Maximized;</code>
      </signature>
    </member>
  </members>
</doc>